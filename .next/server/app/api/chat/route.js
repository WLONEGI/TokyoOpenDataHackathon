"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("string_decoder");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_negishi_Documents_develop_Hackathon_TokyoOpenDataHackathon_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/chat/route.ts */ \"(rsc)/./src/app/api/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"/Users/negishi/Documents/develop/Hackathon/TokyoOpenDataHackathon/src/app/api/chat/route.ts\",\n    nextConfigOutput,\n    userland: _Users_negishi_Documents_develop_Hackathon_TokyoOpenDataHackathon_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGF0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjaGF0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRm5lZ2lzaGklMkZEb2N1bWVudHMlMkZkZXZlbG9wJTJGSGFja2F0aG9uJTJGVG9reW9PcGVuRGF0YUhhY2thdGhvbiUyRnNyYyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZuZWdpc2hpJTJGRG9jdW1lbnRzJTJGZGV2ZWxvcCUyRkhhY2thdGhvbiUyRlRva3lvT3BlbkRhdGFIYWNrYXRob24maXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzJDO0FBQ3hIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9reW8tb3BlbmRhdGEtaGFja2F0aG9uLz9lOWM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9uZWdpc2hpL0RvY3VtZW50cy9kZXZlbG9wL0hhY2thdGhvbi9Ub2t5b09wZW5EYXRhSGFja2F0aG9uL3NyYy9hcHAvYXBpL2NoYXQvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2NoYXQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGF0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9jaGF0L3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL25lZ2lzaGkvRG9jdW1lbnRzL2RldmVsb3AvSGFja2F0aG9uL1Rva3lvT3BlbkRhdGFIYWNrYXRob24vc3JjL2FwcC9hcGkvY2hhdC9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvY2hhdC9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/chat/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/chat/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/validation */ \"(rsc)/./src/lib/validation.ts\");\n/* harmony import */ var _lib_services_SessionManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/services/SessionManager */ \"(rsc)/./src/lib/services/SessionManager.ts\");\n/* harmony import */ var _lib_services_RedisService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/services/RedisService */ \"(rsc)/./src/lib/services/RedisService.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/errors */ \"(rsc)/./src/lib/errors.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/logger */ \"(rsc)/./src/lib/logger.ts\");\n/* harmony import */ var _lib_monitoring_PerformanceMonitor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/monitoring/PerformanceMonitor */ \"(rsc)/./src/lib/monitoring/PerformanceMonitor.ts\");\n/* harmony import */ var _lib_services_SimpleRAGService__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/lib/services/SimpleRAGService */ \"(rsc)/./src/lib/services/SimpleRAGService.ts\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n\n\n\n\n\n\n\n\n\nasync function POST(request) {\n    const requestId = (0,_lib_logger__WEBPACK_IMPORTED_MODULE_5__.generateRequestId)();\n    const timer = _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.performance(\"Chat API Request\", requestId);\n    const perfMonitor = (0,_lib_monitoring_PerformanceMonitor__WEBPACK_IMPORTED_MODULE_6__.getPerformanceMonitor)();\n    const requestStartTime = Date.now();\n    // Record API request count\n    perfMonitor.recordCount(\"api.chat.requests\", 1, {\n        method: \"POST\",\n        endpoint: \"/api/chat\"\n    });\n    try {\n        const sessionManager = _lib_services_SessionManager__WEBPACK_IMPORTED_MODULE_2__.SessionManager.getInstance();\n        const redisService = (0,_lib_services_RedisService__WEBPACK_IMPORTED_MODULE_3__.getRedisService)();\n        const simpleRAGService = new _lib_services_SimpleRAGService__WEBPACK_IMPORTED_MODULE_7__.SimpleRAGService();\n        // Get client IP for rate limiting\n        const clientIP = request.headers.get(\"x-forwarded-for\") || request.headers.get(\"x-real-ip\") || \"unknown\";\n        _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.info(\"Chat request received\", {\n            clientIP,\n            userAgent: request.headers.get(\"user-agent\")\n        }, requestId);\n        // Check rate limit with Redis (fallback to memory)\n        let rateLimitResult;\n        try {\n            rateLimitResult = await redisService.checkRateLimit(clientIP, 900, 100); // 15 minutes, 100 requests\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.warn(\"Redis rate limiting failed, using fallback\", {\n                clientIP,\n                fallback: \"memory-based-rate-limiting\",\n                error: error.message\n            });\n            rateLimitResult = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_1__.checkRateLimit)(clientIP);\n        }\n        if (!rateLimitResult.allowed) {\n            const retryAfter = \"retryAfter\" in rateLimitResult ? rateLimitResult.retryAfter : undefined;\n            const error = _lib_errors__WEBPACK_IMPORTED_MODULE_4__.ErrorFactory.rateLimitExceeded(retryAfter);\n            const response = (0,_lib_errors__WEBPACK_IMPORTED_MODULE_4__.handleApiError)(error, \"ja\");\n            _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.security(\"Rate limit exceeded\", {\n                clientIP,\n                retryAfter\n            }, requestId);\n            const duration = timer.end();\n            _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.api(\"POST\", \"/api/chat\", error.statusCode, duration, requestId);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n                status: error.statusCode,\n                headers: {\n                    \"Retry-After\": retryAfter ? retryAfter.toString() : \"60\",\n                    \"X-RateLimit-Limit\": \"100\",\n                    \"X-RateLimit-Remaining\": (\"remaining\" in rateLimitResult ? rateLimitResult.remaining : 0).toString(),\n                    \"X-RateLimit-Reset\": (\"resetTime\" in rateLimitResult ? Math.ceil(rateLimitResult.resetTime / 1000) : Math.ceil((Date.now() + 60000) / 1000)).toString()\n                }\n            });\n        }\n        const body = await request.json();\n        // Validate and sanitize input\n        const validation = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_1__.validateChatRequest)(body);\n        if (!validation.isValid) {\n            const error = _lib_errors__WEBPACK_IMPORTED_MODULE_4__.ErrorFactory.validationFailed(validation.errors.join(\", \"), validation.errors);\n            const response = (0,_lib_errors__WEBPACK_IMPORTED_MODULE_4__.handleApiError)(error, body.language || \"ja\");\n            _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.warn(\"Input validation failed\", {\n                errors: validation.errors,\n                originalMessage: body.message?.substring(0, 100)\n            }, requestId);\n            const duration = timer.end();\n            _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.api(\"POST\", \"/api/chat\", error.statusCode, duration, requestId);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n                status: error.statusCode\n            });\n        }\n        const sanitizedData = validation.sanitized;\n        const { message, sessionId, language, useVoice, inputType = \"text\", location, requestedScope } = sanitizedData;\n        // Validate and get session\n        _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.info(\"Attempting to get session\", {\n            sessionId: sessionId.substring(0, 8) + \"...\"\n        }, requestId);\n        const session = await sessionManager.getSession(sessionId);\n        if (!session) {\n            const error = _lib_errors__WEBPACK_IMPORTED_MODULE_4__.ErrorFactory.sessionNotFound();\n            const response = (0,_lib_errors__WEBPACK_IMPORTED_MODULE_4__.handleApiError)(error, language);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.warn(\"Session not found\", {\n                sessionId: sessionId.substring(0, 8) + \"...\"\n            }, requestId);\n            const duration = timer.end();\n            _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.api(\"POST\", \"/api/chat\", error.statusCode, duration, requestId);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n                status: error.statusCode\n            });\n        }\n        _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.info(\"Session found successfully\", {\n            sessionId: sessionId.substring(0, 8) + \"...\",\n            language: session.language,\n            createdAt: session.createdAt,\n            lastActivity: session.lastActivity\n        }, requestId);\n        // Update session language if different\n        if (session.language !== language) {\n            await sessionManager.setSessionLanguage(sessionId, language);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.info(\"Session language updated\", {\n                sessionId: sessionId.substring(0, 8) + \"...\",\n                from: session.language,\n                to: language\n            }, requestId);\n        }\n        _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.business(\"Chat message processed\", {\n            messageLength: message.length,\n            sessionId: sessionId.substring(0, 8) + \"...\",\n            language,\n            useVoice,\n            inputType,\n            sessionMessageCount: session.messageCount,\n            hasLocation: !!location,\n            hasRequestedScope: !!requestedScope\n        }, requestId);\n        // Execute simple RAG processing\n        let ragResponse;\n        const ragTimer = _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.performance(\"Simple RAG Processing\", requestId);\n        const perfRAGTimer = perfMonitor.startTimer(\"rag.processing\", {\n            language,\n            messageLength: message.length.toString(),\n            sessionId: sessionId.substring(0, 8) + \"...\"\n        });\n        try {\n            ragResponse = await simpleRAGService.processQuery(message, language);\n            perfRAGTimer();\n            ragTimer.end({\n                confidence: ragResponse.confidence,\n                sourceCount: ragResponse.sources.length,\n                processingTime: ragResponse.processingTime\n            });\n            // Record RAG processing metrics\n            perfMonitor.recordCount(\"rag.success\", 1);\n            perfMonitor.recordCount(\"rag.confidence\", Math.round(ragResponse.confidence * 100));\n            perfMonitor.recordCount(\"rag.sources\", ragResponse.sources.length);\n            perfMonitor.recordTiming(\"rag.processingTime\", ragResponse.processingTime);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.info(\"Simple RAG processing completed\", {\n                confidence: ragResponse.confidence,\n                sourceCount: ragResponse.sources.length,\n                processingTime: ragResponse.processingTime\n            }, requestId);\n        } catch (error) {\n            perfRAGTimer();\n            ragTimer.end({\n                error: true\n            });\n            perfMonitor.recordCount(\"rag.errors\", 1);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.error(\"Simple RAG processing failed\", error, {\n                messageLength: message.length,\n                sessionId: sessionId.substring(0, 8) + \"...\"\n            }, requestId);\n            // Fallback to basic response\n            ragResponse = {\n                content: `申し訳ございませんが、システム処理中にエラーが発生しました。\n\n「${message}」について、基本的な情報をお調べします。より具体的な質問がございましたら、もう一度お聞かせください。`,\n                sources: [],\n                confidence: 0.2,\n                processingTime: Date.now() - requestStartTime\n            };\n        }\n        // Store user message in session with enhanced metadata\n        const userMessage = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(),\n            role: \"user\",\n            content: message,\n            timestamp: new Date(),\n            metadata: {\n                inputType,\n                language,\n                clientIP: clientIP.substring(0, 10) + \"...\",\n                hasLocation: !!location,\n                requestedScope: requestedScope ? {\n                    timeRange: requestedScope.timeRange,\n                    locationRange: requestedScope.locationRange\n                } : undefined\n            }\n        };\n        await sessionManager.addMessage(sessionId, userMessage);\n        // Handle voice synthesis (client-side)\n        let audioUrl;\n        if (useVoice) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.info(\"Voice synthesis requested - will be handled client-side\", {\n                language,\n                textLength: ragResponse.content.length,\n                confidence: ragResponse.confidence\n            }, requestId);\n            perfMonitor.recordCount(\"speech.clientSideRequested\", 1);\n        }\n        // Store assistant response with simple metadata\n        const assistantMessage = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(),\n            role: \"assistant\",\n            content: ragResponse.content,\n            timestamp: new Date(),\n            metadata: {\n                confidence: ragResponse.confidence,\n                sources: ragResponse.sources.map((source)=>({\n                        id: source.id,\n                        title: source.title,\n                        url: source.metadata?.source || \"#\",\n                        description: source.description,\n                        category: source.category,\n                        lastUpdated: source.metadata?.lastUpdated || new Date()\n                    })),\n                processingTime: ragResponse.processingTime\n            }\n        };\n        await sessionManager.addMessage(sessionId, assistantMessage);\n        // Simple chat response with basic RAG capabilities\n        const simpleChatResponse = {\n            response: ragResponse.content,\n            audioUrl,\n            sources: ragResponse.sources.length > 0 ? ragResponse.sources.map((source)=>({\n                    id: source.id,\n                    title: source.title,\n                    url: source.metadata?.source || \"#\",\n                    description: source.description,\n                    category: source.category,\n                    lastUpdated: source.metadata?.lastUpdated || new Date()\n                })) : undefined,\n            shouldPlayAudio: inputType === \"voice\",\n            // Simple RAG response fields\n            confidence: ragResponse.confidence,\n            metadata: {\n                processingTime: ragResponse.processingTime,\n                sourceCount: ragResponse.sources.length\n            }\n        };\n        const response = {\n            success: true,\n            data: simpleChatResponse\n        };\n        const duration = timer.end({\n            responseLength: ragResponse.content.length,\n            sourceCount: ragResponse.sources.length,\n            confidence: ragResponse.confidence,\n            hasAudio: !!audioUrl,\n            processingTime: ragResponse.processingTime\n        });\n        // Record simple performance metrics\n        perfMonitor.recordCount(\"api.chat.success\", 1);\n        perfMonitor.recordTiming(\"api.chat.duration\", duration);\n        perfMonitor.recordCount(\"api.chat.responseLength\", ragResponse.content.length);\n        perfMonitor.recordCount(\"api.chat.sources\", ragResponse.sources.length);\n        perfMonitor.recordCount(\"api.chat.confidence\", Math.round(ragResponse.confidence * 100));\n        _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.api(\"POST\", \"/api/chat\", 200, duration, requestId);\n        _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.business(\"Simple RAG chat response generated\", {\n            responseLength: ragResponse.content.length,\n            sourceCount: ragResponse.sources.length,\n            confidence: ragResponse.confidence,\n            processingTime: ragResponse.processingTime,\n            language\n        }, requestId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n            status: 200\n        });\n    } catch (error) {\n        const appError = error instanceof _lib_errors__WEBPACK_IMPORTED_MODULE_4__.AppError ? error : _lib_errors__WEBPACK_IMPORTED_MODULE_4__.ErrorFactory.internalError(error);\n        const response = (0,_lib_errors__WEBPACK_IMPORTED_MODULE_4__.handleApiError)(appError, \"ja\");\n        const duration = timer.end({\n            error: true\n        });\n        // Record error metrics\n        perfMonitor.recordCount(\"api.chat.errors\", 1, {\n            errorCode: appError.code,\n            statusCode: appError.statusCode.toString()\n        });\n        perfMonitor.recordTiming(\"api.chat.errorDuration\", duration);\n        _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.error(\"Chat API error\", error, {\n            code: appError.code,\n            statusCode: appError.statusCode\n        }, requestId);\n        _lib_logger__WEBPACK_IMPORTED_MODULE_5__.log.api(\"POST\", \"/api/chat\", appError.statusCode, duration, requestId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n            status: appError.statusCode\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/cache/SearchCache.ts":
/*!**************************************!*\
  !*** ./src/lib/cache/SearchCache.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SearchCache: () => (/* binding */ SearchCache),\n/* harmony export */   getSearchCache: () => (/* binding */ getSearchCache)\n/* harmony export */ });\n// In-memory search cache with LRU eviction\nclass SearchCache {\n    constructor(maxSize = 1000, ttlMinutes = 15){\n        this.cache = new Map();\n        this.cleanupInterval = null;\n        this.maxSize = maxSize;\n        this.ttl = ttlMinutes * 60 * 1000;\n        this.startCleanupProcess();\n    }\n    generateCacheKey(query) {\n        const normalized = {\n            text: query.text.toLowerCase().trim(),\n            category: query.category || \"\",\n            language: query.language || \"ja\",\n            limit: query.limit || 10,\n            filters: query.filters || {}\n        };\n        return JSON.stringify(normalized);\n    }\n    get(query) {\n        const key = this.generateCacheKey(query);\n        const entry = this.cache.get(key);\n        if (!entry) {\n            return null;\n        }\n        // Check if entry has expired\n        const now = Date.now();\n        if (now - entry.timestamp > this.ttl) {\n            this.cache.delete(key);\n            return null;\n        }\n        // Update access information for LRU\n        entry.accessCount++;\n        entry.lastAccessed = now;\n        this.cache.set(key, entry);\n        // Mark result as coming from cache\n        return {\n            ...entry.result,\n            usedCache: true\n        };\n    }\n    set(query, result) {\n        const key = this.generateCacheKey(query);\n        const now = Date.now();\n        // Remove oldest entries if cache is full\n        if (this.cache.size >= this.maxSize) {\n            this.evictLRU();\n        }\n        const entry = {\n            key,\n            result: {\n                ...result,\n                usedCache: false\n            },\n            timestamp: now,\n            accessCount: 0,\n            lastAccessed: now\n        };\n        this.cache.set(key, entry);\n    }\n    evictLRU() {\n        if (this.cache.size === 0) return;\n        let oldestKey = \"\";\n        let oldestTime = Infinity;\n        for (const [key, entry] of this.cache.entries()){\n            if (entry.lastAccessed < oldestTime) {\n                oldestTime = entry.lastAccessed;\n                oldestKey = key;\n            }\n        }\n        if (oldestKey) {\n            this.cache.delete(oldestKey);\n        }\n    }\n    startCleanupProcess() {\n        // Clean up expired entries every 5 minutes\n        this.cleanupInterval = setInterval(()=>{\n            this.cleanupExpired();\n        }, 5 * 60 * 1000);\n    }\n    cleanupExpired() {\n        const now = Date.now();\n        const keysToDelete = [];\n        for (const [key, entry] of this.cache.entries()){\n            if (now - entry.timestamp > this.ttl) {\n                keysToDelete.push(key);\n            }\n        }\n        for (const key of keysToDelete){\n            this.cache.delete(key);\n        }\n        console.log(`🧹 Cache cleanup: removed ${keysToDelete.length} expired entries`);\n    }\n    // Manual cache invalidation\n    invalidate(pattern) {\n        let removedCount = 0;\n        if (!pattern) {\n            // Clear all cache\n            removedCount = this.cache.size;\n            this.cache.clear();\n        } else {\n            // Remove entries matching pattern\n            const keysToDelete = [];\n            for (const [key] of this.cache.entries()){\n                if (key.includes(pattern.toLowerCase())) {\n                    keysToDelete.push(key);\n                }\n            }\n            for (const key of keysToDelete){\n                this.cache.delete(key);\n            }\n            removedCount = keysToDelete.length;\n        }\n        console.log(`🗑️ Cache invalidation: removed ${removedCount} entries`);\n        return removedCount;\n    }\n    // Cache statistics\n    getStats() {\n        const totalAccess = Array.from(this.cache.values()).reduce((sum, entry)=>sum + entry.accessCount, 0);\n        const avgAccessCount = this.cache.size > 0 ? totalAccess / this.cache.size : 0;\n        return {\n            size: this.cache.size,\n            maxSize: this.maxSize,\n            hitRate: 0,\n            averageAccessCount: avgAccessCount\n        };\n    }\n    // Cleanup method for proper resource management\n    cleanup() {\n        if (this.cleanupInterval) {\n            clearInterval(this.cleanupInterval);\n            this.cleanupInterval = null;\n        }\n        this.cache.clear();\n        console.log(\"\\uD83E\\uDDF9 SearchCache cleanup completed\");\n    }\n}\n// Singleton instance\nlet searchCacheInstance = null;\nconst getSearchCache = ()=>{\n    if (!searchCacheInstance) {\n        searchCacheInstance = new SearchCache();\n    }\n    return searchCacheInstance;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/cache/SearchCache.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/config.ts":
/*!***************************!*\
  !*** ./src/lib/config.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   getApiBaseUrl: () => (/* binding */ getApiBaseUrl),\n/* harmony export */   getSecureConfig: () => (/* binding */ getSecureConfig),\n/* harmony export */   isDevelopment: () => (/* binding */ isDevelopment),\n/* harmony export */   isProduction: () => (/* binding */ isProduction),\n/* harmony export */   securityConfig: () => (/* binding */ securityConfig),\n/* harmony export */   validateConfig: () => (/* binding */ validateConfig)\n/* harmony export */ });\n// API Key validation utility\nconst validateApiKey = (key, keyName)=>{\n    if (!key || key.length === 0) {\n        throw new Error(`${keyName} is required but not provided`);\n    }\n    // Check for dummy/placeholder values (更に厳格に)\n    const invalidPatterns = [\n        \"your_key_here\",\n        \"placeholder\",\n        \"dummy\",\n        \"test_key\",\n        \"example\",\n        \"sample\",\n        \"fake\",\n        \"mock\",\n        \"development\",\n        \"dev\",\n        \"localhost\"\n    ];\n    if (invalidPatterns.some((pattern)=>key.toLowerCase().includes(pattern))) {\n        throw new Error(`${keyName} appears to be a placeholder value`);\n    }\n    // Enhanced format validation for Gemini API key\n    if (keyName === \"GEMINI_API_KEY\") {\n        if (!key.startsWith(\"AIza\")) {\n            throw new Error(`${keyName} format is invalid (must start with 'AIza')`);\n        }\n        // Length validation (Gemini API keys are typically 39 characters)\n        if (key.length < 30 || key.length > 50) {\n            throw new Error(`${keyName} length is invalid (expected 30-50 characters)`);\n        }\n        // Character validation (should contain only alphanumeric and specific symbols)\n        if (!/^[A-Za-z0-9_-]+$/.test(key)) {\n            throw new Error(`${keyName} contains invalid characters`);\n        }\n    }\n    // Environment-specific validation\n    if (false) {}\n    return key;\n};\n// Safe configuration loading with validation\nconst loadConfig = ()=>{\n    try {\n        const geminiApiKey = validateApiKey(process.env.GEMINI_API_KEY, \"GEMINI_API_KEY\");\n        return {\n            geminiApiKey,\n            redisUrl: process.env.REDIS_URL,\n            gcpProjectId: process.env.GOOGLE_CLOUD_PROJECT_ID,\n            gcpRegion: process.env.GOOGLE_CLOUD_REGION || \"us-central1\",\n            enableVoice: \"true\" === \"true\",\n            enableMultiLanguage: \"true\" === \"true\",\n            maxSessionDuration: Math.max(60000, parseInt(\"3600000\" || 0)),\n            maxMessagesPerSession: Math.max(1, parseInt(\"50\" || 0)),\n            enableDynamicSearch: process.env.NEXT_PUBLIC_ENABLE_DYNAMIC_SEARCH !== \"false\",\n            tokyoOpenDataCatalogUrl: process.env.TOKYO_OPEN_DATA_CATALOG_URL || \"https://catalog.data.metro.tokyo.lg.jp\",\n            maxConcurrentDatasetRequests: Math.max(1, parseInt(process.env.MAX_CONCURRENT_DATASET_REQUESTS || \"5\"))\n        };\n    } catch (error) {\n        console.error(\"Configuration validation failed:\", error);\n        throw error;\n    }\n};\nconst config = loadConfig();\nconst validateConfig = ()=>{\n    const requiredKeys = [\n        \"geminiApiKey\"\n    ];\n    const missingKeys = requiredKeys.filter((key)=>!config[key]);\n    if (missingKeys.length > 0) {\n        throw new Error(`Missing required configuration: ${missingKeys.join(\", \")}`);\n    }\n    // Additional runtime validation\n    if (config.maxSessionDuration < 60000) {\n        throw new Error(\"maxSessionDuration must be at least 60 seconds\");\n    }\n    if (config.maxMessagesPerSession < 1) {\n        throw new Error(\"maxMessagesPerSession must be at least 1\");\n    }\n    // Security validation\n    if (false) {}\n    console.log(\"✅ Configuration validation passed\");\n};\n// Secure configuration getter - never logs sensitive values\nconst getSecureConfig = ()=>{\n    return {\n        ...config,\n        geminiApiKey: config.geminiApiKey ? \"[REDACTED]\" : \"NOT_SET\",\n        redisUrl: config.redisUrl ? \"[REDACTED]\" : \"NOT_SET\"\n    };\n};\nconst getApiBaseUrl = ()=>{\n    const baseUrl = \"http://localhost:3000\" || 0;\n    // Validate URL format\n    try {\n        new URL(baseUrl);\n        return baseUrl;\n    } catch  {\n        console.warn(`Invalid API base URL: ${baseUrl}, falling back to localhost`);\n        return \"http://localhost:3000\";\n    }\n};\nconst isProduction = ()=>{\n    return \"development\" === \"production\";\n};\nconst isDevelopment = ()=>{\n    return \"development\" === \"development\";\n};\n// Security configuration\nconst securityConfig = {\n    // Rate limiting\n    rateLimiting: {\n        windowMs: 15 * 60 * 1000,\n        maxRequests: isProduction() ? 100 : 1000,\n        skipSuccessfulRequests: false,\n        skipFailedRequests: false\n    },\n    // Input validation\n    validation: {\n        maxMessageLength: 2000,\n        maxFileSize: 10 * 1024 * 1024,\n        allowedAudioTypes: [\n            \"audio/webm\",\n            \"audio/mp3\",\n            \"audio/wav\",\n            \"audio/m4a\"\n        ]\n    },\n    // Session security\n    session: {\n        maxAge: config.maxSessionDuration,\n        httpOnly: true,\n        secure: isProduction(),\n        sameSite: \"strict\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/config.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/errors.ts":
/*!***************************!*\
  !*** ./src/lib/errors.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppError: () => (/* binding */ AppError),\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   ErrorFactory: () => (/* binding */ ErrorFactory),\n/* harmony export */   extractErrorInfo: () => (/* binding */ extractErrorInfo),\n/* harmony export */   handleApiError: () => (/* binding */ handleApiError)\n/* harmony export */ });\n// Standardized error handling system\nvar ErrorCode;\n(function(ErrorCode) {\n    // Authentication & Authorization\n    ErrorCode[\"INVALID_API_KEY\"] = \"INVALID_API_KEY\";\n    ErrorCode[\"RATE_LIMIT_EXCEEDED\"] = \"RATE_LIMIT_EXCEEDED\";\n    // Validation\n    ErrorCode[\"VALIDATION_FAILED\"] = \"VALIDATION_FAILED\";\n    ErrorCode[\"INVALID_INPUT\"] = \"INVALID_INPUT\";\n    ErrorCode[\"INVALID_SESSION\"] = \"INVALID_SESSION\";\n    ErrorCode[\"SESSION_NOT_FOUND\"] = \"SESSION_NOT_FOUND\";\n    // External Services\n    ErrorCode[\"GEMINI_API_ERROR\"] = \"GEMINI_API_ERROR\";\n    ErrorCode[\"GEMINI_QUOTA_EXCEEDED\"] = \"GEMINI_QUOTA_EXCEEDED\";\n    ErrorCode[\"GEMINI_UNAVAILABLE\"] = \"GEMINI_UNAVAILABLE\";\n    // Data & Search\n    ErrorCode[\"SEARCH_FAILED\"] = \"SEARCH_FAILED\";\n    ErrorCode[\"DATA_FETCH_FAILED\"] = \"DATA_FETCH_FAILED\";\n    ErrorCode[\"INDEX_INITIALIZATION_FAILED\"] = \"INDEX_INITIALIZATION_FAILED\";\n    // Audio Processing\n    ErrorCode[\"AUDIO_PROCESSING_FAILED\"] = \"AUDIO_PROCESSING_FAILED\";\n    ErrorCode[\"UNSUPPORTED_AUDIO_FORMAT\"] = \"UNSUPPORTED_AUDIO_FORMAT\";\n    ErrorCode[\"AUDIO_TOO_LARGE\"] = \"AUDIO_TOO_LARGE\";\n    // System\n    ErrorCode[\"INTERNAL_ERROR\"] = \"INTERNAL_ERROR\";\n    ErrorCode[\"SERVICE_UNAVAILABLE\"] = \"SERVICE_UNAVAILABLE\";\n    ErrorCode[\"CONFIGURATION_ERROR\"] = \"CONFIGURATION_ERROR\";\n})(ErrorCode || (ErrorCode = {}));\nclass AppError extends Error {\n    constructor(errorDetails){\n        super(errorDetails.message);\n        this.name = \"AppError\";\n        this.code = errorDetails.code;\n        this.statusCode = errorDetails.statusCode;\n        this.isRetryable = errorDetails.isRetryable;\n        this.details = errorDetails.details;\n        this.userMessage = errorDetails.userMessage;\n        // Maintains proper stack trace for where our error was thrown\n        Error.captureStackTrace(this, AppError);\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            code: this.code,\n            message: this.message,\n            statusCode: this.statusCode,\n            isRetryable: this.isRetryable,\n            details: this.details,\n            stack: this.stack\n        };\n    }\n    getUserMessage(language = \"ja\") {\n        return this.userMessage[language] || this.userMessage.ja || this.message;\n    }\n}\n// Predefined error factories\nconst ErrorFactory = {\n    validationFailed: (details, validationErrors)=>{\n        return new AppError({\n            code: \"VALIDATION_FAILED\",\n            message: `Validation failed: ${details}`,\n            details: validationErrors,\n            statusCode: 400,\n            isRetryable: false,\n            userMessage: {\n                ja: \"入力内容に問題があります。正しい形式で入力してください。\",\n                en: \"There is an issue with your input. Please enter in the correct format.\",\n                zh: \"输入内容有问题。请以正确格式输入。\",\n                ko: \"입력 내용에 문제가 있습니다. 올바른 형식으로 입력해주세요.\"\n            }\n        });\n    },\n    rateLimitExceeded: (retryAfter = 60)=>{\n        return new AppError({\n            code: \"RATE_LIMIT_EXCEEDED\",\n            message: \"Rate limit exceeded\",\n            details: {\n                retryAfter\n            },\n            statusCode: 429,\n            isRetryable: true,\n            userMessage: {\n                ja: \"リクエストが多すぎます。しばらくお待ちください。\",\n                en: \"Too many requests. Please wait a moment.\",\n                zh: \"请求过多。请稍等。\",\n                ko: \"요청이 너무 많습니다. 잠시 기다려 주세요.\"\n            }\n        });\n    },\n    sessionNotFound: ()=>{\n        return new AppError({\n            code: \"SESSION_NOT_FOUND\",\n            message: \"Session not found or expired\",\n            statusCode: 404,\n            isRetryable: false,\n            userMessage: {\n                ja: \"セッションが見つからないか期限切れです。新しいセッションを作成してください。\",\n                en: \"Session not found or expired. Please create a new session.\",\n                zh: \"会话未找到或已过期。请创建新会话。\",\n                ko: \"세션을 찾을 수 없거나 만료되었습니다. 새 세션을 만들어주세요.\"\n            }\n        });\n    },\n    geminiApiError: (originalError)=>{\n        const isQuotaError = originalError?.message?.toLowerCase().includes(\"quota\");\n        const isUnavailable = originalError?.message?.toLowerCase().includes(\"unavailable\");\n        if (isQuotaError) {\n            return new AppError({\n                code: \"GEMINI_QUOTA_EXCEEDED\",\n                message: \"Gemini API quota exceeded\",\n                details: originalError,\n                statusCode: 503,\n                isRetryable: true,\n                userMessage: {\n                    ja: \"AIサービスの利用制限に達しました。しばらく後にお試しください。\",\n                    en: \"AI service usage limit reached. Please try again later.\",\n                    zh: \"AI服务使用限制已达到。请稍后再试。\",\n                    ko: \"AI 서비스 사용 한도에 도달했습니다. 나중에 다시 시도해주세요.\"\n                }\n            });\n        }\n        if (isUnavailable) {\n            return new AppError({\n                code: \"GEMINI_UNAVAILABLE\",\n                message: \"Gemini API temporarily unavailable\",\n                details: originalError,\n                statusCode: 503,\n                isRetryable: true,\n                userMessage: {\n                    ja: \"AIサービスが一時的に利用できません。しばらく後にお試しください。\",\n                    en: \"AI service is temporarily unavailable. Please try again later.\",\n                    zh: \"AI服务暂时不可用。请稍后再试。\",\n                    ko: \"AI 서비스가 일시적으로 사용할 수 없습니다. 나중에 다시 시도해주세요.\"\n                }\n            });\n        }\n        return new AppError({\n            code: \"GEMINI_API_ERROR\",\n            message: \"Gemini API error\",\n            details: originalError,\n            statusCode: 500,\n            isRetryable: false,\n            userMessage: {\n                ja: \"AIサービスでエラーが発生しました。\",\n                en: \"An error occurred with the AI service.\",\n                zh: \"AI服务发生错误。\",\n                ko: \"AI 서비스에서 오류가 발생했습니다.\"\n            }\n        });\n    },\n    searchFailed: (originalError)=>{\n        return new AppError({\n            code: \"SEARCH_FAILED\",\n            message: \"Search operation failed\",\n            details: originalError,\n            statusCode: 500,\n            isRetryable: true,\n            userMessage: {\n                ja: \"検索処理でエラーが発生しました。\",\n                en: \"An error occurred during search.\",\n                zh: \"搜索处理中发生错误。\",\n                ko: \"검색 처리 중 오류가 발생했습니다.\"\n            }\n        });\n    },\n    audioProcessingFailed: (originalError)=>{\n        return new AppError({\n            code: \"AUDIO_PROCESSING_FAILED\",\n            message: \"Audio processing failed\",\n            details: originalError,\n            statusCode: 500,\n            isRetryable: true,\n            userMessage: {\n                ja: \"音声処理でエラーが発生しました。\",\n                en: \"An error occurred during audio processing.\",\n                zh: \"音频处理中发生错误。\",\n                ko: \"음성 처리 중 오류가 발생했습니다.\"\n            }\n        });\n    },\n    internalError: (originalError)=>{\n        return new AppError({\n            code: \"INTERNAL_ERROR\",\n            message: \"Internal server error\",\n            details:  true ? originalError : 0,\n            statusCode: 500,\n            isRetryable: false,\n            userMessage: {\n                ja: \"システムエラーが発生しました。しばらく後にお試しください。\",\n                en: \"A system error occurred. Please try again later.\",\n                zh: \"系统错误。请稍后再试。\",\n                ko: \"시스템 오류가 발생했습니다. 나중에 다시 시도해주세요.\"\n            }\n        });\n    }\n};\n// Error handler for API responses\nconst handleApiError = (error, language = \"ja\")=>{\n    if (error instanceof AppError) {\n        return {\n            success: false,\n            error: error.getUserMessage(language),\n            code: error.code,\n            retryable: error.isRetryable\n        };\n    }\n    // Handle unknown errors\n    const internalError = ErrorFactory.internalError(error);\n    return {\n        success: false,\n        error: internalError.getUserMessage(language),\n        code: internalError.code,\n        retryable: internalError.isRetryable\n    };\n};\n// Utility to safely extract error information\nconst extractErrorInfo = (error)=>{\n    if (error instanceof Error) {\n        return {\n            message: error.message,\n            stack: error.stack,\n            details: error instanceof AppError ? error.details : undefined\n        };\n    }\n    if (typeof error === \"string\") {\n        return {\n            message: error\n        };\n    }\n    if (typeof error === \"object\" && error !== null) {\n        return {\n            message: error.message || \"Unknown error\",\n            details: error\n        };\n    }\n    return {\n        message: \"Unknown error occurred\"\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/errors.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/logger.ts":
/*!***************************!*\
  !*** ./src/lib/logger.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   PerformanceTimer: () => (/* binding */ PerformanceTimer),\n/* harmony export */   generateRequestId: () => (/* binding */ generateRequestId),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n// Enhanced logging system with multiple levels and structured logging\nvar LogLevel;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n    LogLevel[LogLevel[\"FATAL\"] = 4] = \"FATAL\";\n})(LogLevel || (LogLevel = {}));\nclass Logger {\n    constructor(){\n        this.logs = [];\n        this.maxLogHistory = 1000;\n        this.minLevel = this.getLogLevel();\n    }\n    getLogLevel() {\n        const level = process.env.LOG_LEVEL?.toUpperCase() || \"INFO\";\n        switch(level){\n            case \"DEBUG\":\n                return 0;\n            case \"INFO\":\n                return 1;\n            case \"WARN\":\n                return 2;\n            case \"ERROR\":\n                return 3;\n            case \"FATAL\":\n                return 4;\n            default:\n                return 1;\n        }\n    }\n    shouldLog(level) {\n        return level >= this.minLevel;\n    }\n    formatMessage(entry) {\n        const timestamp = entry.timestamp.toISOString();\n        const level = LogLevel[entry.level].padEnd(5);\n        const context = entry.context ? ` | Context: ${JSON.stringify(entry.context)}` : \"\";\n        const requestId = entry.requestId ? ` | RequestID: ${entry.requestId}` : \"\";\n        const performance = entry.performance?.duration ? ` | Duration: ${entry.performance.duration}ms` : \"\";\n        return `[${timestamp}] ${level} | ${entry.message}${context}${requestId}${performance}`;\n    }\n    writeLog(entry) {\n        if (!this.shouldLog(entry.level)) {\n            return;\n        }\n        const formattedMessage = this.formatMessage(entry);\n        // Console output\n        switch(entry.level){\n            case 0:\n                console.debug(formattedMessage);\n                break;\n            case 1:\n                console.info(formattedMessage);\n                break;\n            case 2:\n                console.warn(formattedMessage);\n                break;\n            case 3:\n            case 4:\n                console.error(formattedMessage);\n                if (entry.error) {\n                    console.error(\"Stack trace:\", entry.error.stack);\n                }\n                break;\n        }\n        // Store in memory (for debugging and monitoring)\n        this.logs.push(entry);\n        if (this.logs.length > this.maxLogHistory) {\n            this.logs = this.logs.slice(-this.maxLogHistory);\n        }\n    }\n    debug(message, context, requestId) {\n        this.writeLog({\n            level: 0,\n            message,\n            timestamp: new Date(),\n            context,\n            requestId\n        });\n    }\n    info(message, context, requestId) {\n        this.writeLog({\n            level: 1,\n            message,\n            timestamp: new Date(),\n            context,\n            requestId\n        });\n    }\n    warn(message, context, requestId) {\n        this.writeLog({\n            level: 2,\n            message,\n            timestamp: new Date(),\n            context,\n            requestId\n        });\n    }\n    error(message, error, context, requestId) {\n        this.writeLog({\n            level: 3,\n            message,\n            timestamp: new Date(),\n            error,\n            context,\n            requestId\n        });\n    }\n    fatal(message, error, context, requestId) {\n        this.writeLog({\n            level: 4,\n            message,\n            timestamp: new Date(),\n            error,\n            context,\n            requestId\n        });\n    }\n    // Performance logging\n    performance(message, duration, context, requestId) {\n        this.writeLog({\n            level: 1,\n            message,\n            timestamp: new Date(),\n            context,\n            requestId,\n            performance: {\n                duration,\n                memory: process.memoryUsage()\n            }\n        });\n    }\n    // API request logging\n    apiRequest(method, path, statusCode, duration, requestId) {\n        const level = statusCode >= 400 ? 3 : 1;\n        this.writeLog({\n            level,\n            message: `API ${method} ${path} - ${statusCode}`,\n            timestamp: new Date(),\n            context: {\n                method,\n                path,\n                statusCode,\n                type: \"api_request\"\n            },\n            requestId,\n            performance: {\n                duration\n            }\n        });\n    }\n    // Security logging\n    security(event, details, requestId) {\n        this.writeLog({\n            level: 2,\n            message: `Security Event: ${event}`,\n            timestamp: new Date(),\n            context: {\n                ...details,\n                type: \"security_event\"\n            },\n            requestId\n        });\n    }\n    // Business logic logging\n    business(event, details, requestId) {\n        this.writeLog({\n            level: 1,\n            message: `Business Event: ${event}`,\n            timestamp: new Date(),\n            context: {\n                ...details,\n                type: \"business_event\"\n            },\n            requestId\n        });\n    }\n    // Get recent logs for debugging\n    getRecentLogs(count = 100) {\n        return this.logs.slice(-count);\n    }\n    // Get logs by level\n    getLogsByLevel(level, count = 100) {\n        return this.logs.filter((log)=>log.level === level).slice(-count);\n    }\n    // Get logs by time range\n    getLogsByTimeRange(from, to) {\n        return this.logs.filter((log)=>log.timestamp >= from && log.timestamp <= to);\n    }\n    // Clear logs\n    clearLogs() {\n        this.logs = [];\n        this.info(\"Log history cleared\");\n    }\n    // Get statistics\n    getStats() {\n        const logCounts = {};\n        for (const log of this.logs){\n            const levelName = LogLevel[log.level];\n            logCounts[levelName] = (logCounts[levelName] || 0) + 1;\n        }\n        return {\n            totalLogs: this.logs.length,\n            logCounts,\n            oldestLog: this.logs.length > 0 ? this.logs[0].timestamp : undefined,\n            newestLog: this.logs.length > 0 ? this.logs[this.logs.length - 1].timestamp : undefined\n        };\n    }\n}\n// Create singleton logger instance\nconst logger = new Logger();\n// Performance measurement utility\nclass PerformanceTimer {\n    constructor(name, requestId){\n        this.name = name;\n        this.requestId = requestId;\n        this.startTime = Date.now();\n    }\n    end(context) {\n        const duration = Date.now() - this.startTime;\n        logger.performance(`${this.name} completed`, duration, context, this.requestId);\n        return duration;\n    }\n}\n// Request ID generator\nconst generateRequestId = ()=>{\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n};\n// Export singleton logger\n\n// Convenience functions\nconst log = {\n    debug: (message, context, requestId)=>logger.debug(message, context, requestId),\n    info: (message, context, requestId)=>logger.info(message, context, requestId),\n    warn: (message, context, requestId)=>logger.warn(message, context, requestId),\n    error: (message, error, context, requestId)=>logger.error(message, error, context, requestId),\n    fatal: (message, error, context, requestId)=>logger.fatal(message, error, context, requestId),\n    performance: (name, requestId)=>new PerformanceTimer(name, requestId),\n    api: (method, path, statusCode, duration, requestId)=>logger.apiRequest(method, path, statusCode, duration, requestId),\n    security: (event, details, requestId)=>logger.security(event, details, requestId),\n    business: (event, details, requestId)=>logger.business(event, details, requestId)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/logger.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/monitoring/PerformanceMonitor.ts":
/*!**************************************************!*\
  !*** ./src/lib/monitoring/PerformanceMonitor.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerformanceMonitor: () => (/* binding */ PerformanceMonitor),\n/* harmony export */   getPerformanceMonitor: () => (/* binding */ getPerformanceMonitor),\n/* harmony export */   withTiming: () => (/* binding */ withTiming)\n/* harmony export */ });\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../logger */ \"(rsc)/./src/lib/logger.ts\");\n// Performance monitoring and metrics collection\n\nclass PerformanceMonitor {\n    constructor(){\n        this.metrics = new Map();\n        this.maxMetricsPerType = 1000;\n        this.cleanupInterval = 60 * 60 * 1000 // 1 hour\n        ;\n        this.cleanupTimer = null;\n        this.startCleanup();\n    }\n    startCleanup() {\n        this.cleanupTimer = setInterval(()=>{\n            this.cleanupOldMetrics();\n        }, this.cleanupInterval);\n    }\n    cleanupOldMetrics() {\n        const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n        let totalRemoved = 0;\n        for (const [metricName, metrics] of this.metrics.entries()){\n            const before = metrics.length;\n            const filtered = metrics.filter((metric)=>metric.timestamp > oneHourAgo);\n            this.metrics.set(metricName, filtered);\n            totalRemoved += before - filtered.length;\n        }\n        if (totalRemoved > 0) {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.log.debug(`Performance metrics cleanup: removed ${totalRemoved} old metrics`);\n        }\n    }\n    recordMetric(metric) {\n        if (!this.metrics.has(metric.name)) {\n            this.metrics.set(metric.name, []);\n        }\n        const metrics = this.metrics.get(metric.name);\n        metrics.push(metric);\n        // Keep only the most recent metrics to prevent memory growth\n        if (metrics.length > this.maxMetricsPerType) {\n            metrics.splice(0, metrics.length - this.maxMetricsPerType);\n        }\n    }\n    recordTiming(name, durationMs, tags) {\n        this.recordMetric({\n            name,\n            value: durationMs,\n            unit: \"ms\",\n            timestamp: new Date(),\n            tags\n        });\n    }\n    recordCount(name, count = 1, tags) {\n        this.recordMetric({\n            name,\n            value: count,\n            unit: \"count\",\n            timestamp: new Date(),\n            tags\n        });\n    }\n    recordMemory(name, bytes, tags) {\n        this.recordMetric({\n            name,\n            value: bytes,\n            unit: \"bytes\",\n            timestamp: new Date(),\n            tags\n        });\n    }\n    recordPercentage(name, percentage, tags) {\n        this.recordMetric({\n            name,\n            value: Math.max(0, Math.min(100, percentage)),\n            unit: \"percentage\",\n            timestamp: new Date(),\n            tags\n        });\n    }\n    // Create a timing decorator for async functions\n    time(name, tags) {\n        return (target, propertyKey, descriptor)=>{\n            const originalMethod = descriptor.value;\n            descriptor.value = async function(...args) {\n                const start = Date.now();\n                try {\n                    const result = await originalMethod.apply(this, args);\n                    const duration = Date.now() - start;\n                    getPerformanceMonitor().recordTiming(name, duration, tags);\n                    return result;\n                } catch (error) {\n                    const duration = Date.now() - start;\n                    getPerformanceMonitor().recordTiming(name, duration, {\n                        ...tags,\n                        error: \"true\"\n                    });\n                    throw error;\n                }\n            };\n            return descriptor;\n        };\n    }\n    // Manual timing utility\n    startTimer(name, tags) {\n        const start = Date.now();\n        return ()=>{\n            const duration = Date.now() - start;\n            this.recordTiming(name, duration, tags);\n            return duration;\n        };\n    }\n    getSummary(metricName, timeWindowMs = 5 * 60 * 1000) {\n        const metrics = this.metrics.get(metricName);\n        if (!metrics || metrics.length === 0) {\n            return null;\n        }\n        const cutoff = new Date(Date.now() - timeWindowMs);\n        const recentMetrics = metrics.filter((metric)=>metric.timestamp > cutoff).map((metric)=>metric.value).sort((a, b)=>a - b);\n        if (recentMetrics.length === 0) {\n            return null;\n        }\n        const sum = recentMetrics.reduce((acc, val)=>acc + val, 0);\n        const avg = sum / recentMetrics.length;\n        const min = recentMetrics[0];\n        const max = recentMetrics[recentMetrics.length - 1];\n        const percentile = (p)=>{\n            const index = Math.ceil(p / 100 * recentMetrics.length) - 1;\n            return recentMetrics[Math.max(0, index)];\n        };\n        const firstMetric = metrics[0];\n        const timeWindowMinutes = Math.round(timeWindowMs / (1000 * 60));\n        return {\n            name: metricName,\n            count: recentMetrics.length,\n            min,\n            max,\n            avg: Number(avg.toFixed(2)),\n            p50: percentile(50),\n            p95: percentile(95),\n            p99: percentile(99),\n            unit: firstMetric.unit,\n            timeWindow: `${timeWindowMinutes}m`\n        };\n    }\n    getAllSummaries(timeWindowMs = 5 * 60 * 1000) {\n        const summaries = [];\n        for (const metricName of this.metrics.keys()){\n            const summary = this.getSummary(metricName, timeWindowMs);\n            if (summary) {\n                summaries.push(summary);\n            }\n        }\n        return summaries.sort((a, b)=>a.name.localeCompare(b.name));\n    }\n    getMetrics(metricName, limit = 100) {\n        const metrics = this.metrics.get(metricName);\n        if (!metrics) {\n            return [];\n        }\n        return metrics.slice(-limit);\n    }\n    getTopSlowestOperations(limit = 10, timeWindowMs = 5 * 60 * 1000) {\n        const summaries = this.getAllSummaries(timeWindowMs).filter((summary)=>summary.unit === \"ms\").sort((a, b)=>b.max - a.max).slice(0, limit);\n        return summaries.map((summary)=>({\n                name: summary.name,\n                maxDuration: summary.max,\n                avgDuration: summary.avg,\n                count: summary.count\n            }));\n    }\n    // System performance monitoring\n    recordSystemMetrics() {\n        const memUsage = process.memoryUsage();\n        const cpuUsage = process.cpuUsage();\n        // Memory metrics\n        this.recordMemory(\"system.memory.heapUsed\", memUsage.heapUsed);\n        this.recordMemory(\"system.memory.heapTotal\", memUsage.heapTotal);\n        this.recordMemory(\"system.memory.external\", memUsage.external);\n        this.recordMemory(\"system.memory.rss\", memUsage.rss);\n        // Memory usage percentage\n        const memoryPercentage = memUsage.heapUsed / memUsage.heapTotal * 100;\n        this.recordPercentage(\"system.memory.usage\", memoryPercentage);\n        // CPU metrics (note: these are cumulative, would need baseline for rates)\n        this.recordMetric({\n            name: \"system.cpu.user\",\n            value: cpuUsage.user / 1000,\n            unit: \"ms\",\n            timestamp: new Date()\n        });\n        this.recordMetric({\n            name: \"system.cpu.system\",\n            value: cpuUsage.system / 1000,\n            unit: \"ms\",\n            timestamp: new Date()\n        });\n        // Uptime\n        this.recordMetric({\n            name: \"system.uptime\",\n            value: process.uptime(),\n            unit: \"count\",\n            timestamp: new Date()\n        });\n    }\n    // Event loop lag measurement\n    measureEventLoopLag() {\n        return new Promise((resolve)=>{\n            const start = process.hrtime.bigint();\n            setImmediate(()=>{\n                const lag = Number(process.hrtime.bigint() - start) / 1000000; // Convert to ms\n                this.recordTiming(\"system.eventLoopLag\", lag);\n                resolve(lag);\n            });\n        });\n    }\n    // Start automatic system monitoring\n    startSystemMonitoring(intervalMs = 30000) {\n        return setInterval(()=>{\n            this.recordSystemMetrics();\n            this.measureEventLoopLag();\n        }, intervalMs);\n    }\n    getStats() {\n        let totalMetrics = 0;\n        let oldestMetric = null;\n        let newestMetric = null;\n        for (const metrics of this.metrics.values()){\n            totalMetrics += metrics.length;\n            if (metrics.length > 0) {\n                const first = metrics[0].timestamp;\n                const last = metrics[metrics.length - 1].timestamp;\n                if (!oldestMetric || first < oldestMetric) {\n                    oldestMetric = first;\n                }\n                if (!newestMetric || last > newestMetric) {\n                    newestMetric = last;\n                }\n            }\n        }\n        return {\n            metricTypes: this.metrics.size,\n            totalMetrics,\n            oldestMetric,\n            newestMetric\n        };\n    }\n    cleanup() {\n        if (this.cleanupTimer) {\n            clearInterval(this.cleanupTimer);\n            this.cleanupTimer = null;\n        }\n        this.metrics.clear();\n        _logger__WEBPACK_IMPORTED_MODULE_0__.log.info(\"Performance monitor cleanup completed\");\n    }\n}\n// Singleton instance\nlet performanceMonitorInstance = null;\nconst getPerformanceMonitor = ()=>{\n    if (!performanceMonitorInstance) {\n        performanceMonitorInstance = new PerformanceMonitor();\n    }\n    return performanceMonitorInstance;\n};\n// Convenience function for timing operations\nconst withTiming = async (name, operation, tags)=>{\n    const monitor = getPerformanceMonitor();\n    const endTimer = monitor.startTimer(name, tags);\n    try {\n        const result = await operation();\n        endTimer();\n        return result;\n    } catch (error) {\n        endTimer();\n        throw error;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/monitoring/PerformanceMonitor.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/GeminiService.ts":
/*!*******************************************!*\
  !*** ./src/lib/services/GeminiService.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GeminiService: () => (/* binding */ GeminiService)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _lib_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/config */ \"(rsc)/./src/lib/config.ts\");\n\n\nclass GeminiService {\n    constructor(){\n        if (!_lib_config__WEBPACK_IMPORTED_MODULE_1__.config.geminiApiKey) {\n            throw new Error(\"Gemini API key is not configured\");\n        }\n        this.genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(_lib_config__WEBPACK_IMPORTED_MODULE_1__.config.geminiApiKey);\n        // Gemini 2.5 Flash 設定（思考モードOFF）\n        const optimizedConfig = {\n            model: \"gemini-2.5-flash\",\n            generationConfig: {\n                temperature: 0.1,\n                topK: 10,\n                topP: 0.6,\n                maxOutputTokens: 1024,\n                candidateCount: 1,\n                stopSequences: [\n                    \"```\",\n                    \"END\",\n                    \"終了\"\n                ]\n            },\n            safetySettings: [\n                {\n                    category: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmCategory.HARM_CATEGORY_HARASSMENT,\n                    threshold: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n                },\n                {\n                    category: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n                    threshold: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n                },\n                {\n                    category: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n                    threshold: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n                },\n                {\n                    category: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n                    threshold: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n                }\n            ]\n        };\n        // シンプルクエリ用設定（思考モードOFF）\n        const simpleConfig = {\n            model: \"gemini-2.5-flash\",\n            generationConfig: {\n                temperature: 0.05,\n                topK: 5,\n                topP: 0.5,\n                maxOutputTokens: 512,\n                candidateCount: 1,\n                stopSequences: [\n                    \"```\",\n                    \"END\",\n                    \"終了\",\n                    \"\\n\\n\"\n                ]\n            },\n            safetySettings: [\n                {\n                    category: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmCategory.HARM_CATEGORY_HARASSMENT,\n                    threshold: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n                },\n                {\n                    category: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n                    threshold: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n                },\n                {\n                    category: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n                    threshold: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n                },\n                {\n                    category: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n                    threshold: _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n                }\n            ]\n        };\n        this.textModel = this.genAI.getGenerativeModel(optimizedConfig);\n        this.audioModel = this.genAI.getGenerativeModel(optimizedConfig);\n        this.embeddingModel = this.genAI.getGenerativeModel({\n            model: \"text-embedding-004\"\n        });\n    }\n    async generateText(prompt, context, language = \"ja\", useAudioModel = false) {\n        try {\n            const languagePrompts = {\n                ja: {\n                    systemPrompt: `あなたは東京都公式AI音声対話システムのアシスタントです。\n以下のガイドラインに従って応答してください：\n\n【役割】\n- 東京都の行政サービスに関する情報提供に特化\n- 特に子育て支援分野の情報を中心に案内\n\n【応答制限】\n1. 東京都の行政サービスに関係ない質問には回答しない\n2. システムの技術的詳細（使用モデル、実装方法等）は開示しない\n3. 個人情報の収集や開示は行わない\n4. 政治的な意見や批判は述べない\n5. 医療・法律の専門的アドバイスは提供しない\n\n【応答スタイル】\n- 丁寧で親しみやすい敬語を使用\n- 正確な情報のみを提供\n- 不明な点は推測せず、適切な窓口を案内\n\n【制限外の質問への標準応答】\n「申し訳ございませんが、その質問にはお答えできません。東京都の行政サービス、特に子育て支援に関する情報についてお気軽にお尋ねください。」`,\n                    contextPrompt: context ? `【システムルール】\n上記のガイドラインを厳守してください。\n\n【参考情報】\n${context}\n\n【ユーザーの質問】\n${prompt}\n\n【応答指示】\n- ユーザーの質問が東京都の行政サービスに関連する場合：参考情報に基づいて正確に回答\n- ユーザーの質問が制限事項に該当する場合：標準応答を返す\n- 技術的な質問（モデル名、実装方法等）の場合：「システムに関する技術的な情報はお答えできません」と回答\n\n日本語で回答してください。` : `【システムルール】\n上記のガイドラインを厳守してください。\n\n【ユーザーの質問】\n${prompt}\n\n【応答指示】\n- ユーザーの質問が東京都の行政サービスに関連する場合：子育て支援制度について回答\n- ユーザーの質問が制限事項に該当する場合：標準応答を返す\n- 技術的な質問（モデル名、実装方法等）の場合：「システムに関する技術的な情報はお答えできません」と回答\n\n日本語で回答してください。`,\n                    fallbackMessage: \"申し訳ございませんが、現在サービスに問題が発生しています。しばらく後にもう一度お試しください。\"\n                },\n                en: {\n                    systemPrompt: `You are the official Tokyo AI Voice Dialogue System assistant.\nPlease follow these guidelines:\n\n【Role】\n- Specialize in providing information about Tokyo's administrative services\n- Focus primarily on childcare support information\n\n【Response Restrictions】\n1. Do not answer questions unrelated to Tokyo's administrative services\n2. Do not disclose technical details (model used, implementation methods, etc.)\n3. Do not collect or disclose personal information\n4. Do not express political opinions or criticism\n5. Do not provide professional medical or legal advice\n\n【Response Style】\n- Use polite and friendly language\n- Provide only accurate information\n- For unclear matters, do not speculate but direct to appropriate services\n\n【Standard Response for Restricted Questions】\n\"I apologize, but I cannot answer that question. Please feel free to ask about Tokyo's administrative services, especially childcare support information.\"`,\n                    contextPrompt: context ? `【System Rules】\nStrictly follow the above guidelines.\n\n【Reference Information】\n${context}\n\n【User Question】\n${prompt}\n\n【Response Instructions】\n- If the question relates to Tokyo's administrative services: Answer accurately based on reference information\n- If the question falls under restrictions: Return the standard response\n- For technical questions (model name, implementation, etc.): Reply \"I cannot provide technical information about the system\"\n\nPlease respond in English.` : `【System Rules】\nStrictly follow the above guidelines.\n\n【User Question】\n${prompt}\n\n【Response Instructions】\n- If the question relates to Tokyo's administrative services: Answer about childcare support systems\n- If the question falls under restrictions: Return the standard response\n- For technical questions (model name, implementation, etc.): Reply \"I cannot provide technical information about the system\"\n\nPlease respond in English.`,\n                    fallbackMessage: \"I apologize, but there is currently an issue with the service. Please try again later.\"\n                },\n                zh: {\n                    systemPrompt: `您是东京都官方AI语音对话系统的助手。\n请遵循以下准则：\n\n【角色】\n- 专注于提供东京都行政服务相关信息\n- 重点提供育儿支援领域的信息\n\n【回答限制】\n1. 不回答与东京都行政服务无关的问题\n2. 不透露技术细节（使用的模型、实施方法等）\n3. 不收集或披露个人信息\n4. 不发表政治观点或批评\n5. 不提供专业的医疗或法律建议\n\n【回答风格】\n- 使用礼貌友好的语言\n- 只提供准确的信息\n- 对于不明确的事项，不进行推测，而是引导至适当的服务窗口\n\n【受限问题的标准回答】\n\"很抱歉，我无法回答这个问题。请随时询问有关东京都行政服务，特别是育儿支援方面的信息。\"`,\n                    contextPrompt: context ? `【系统规则】\n严格遵守上述准则。\n\n【参考信息】\n${context}\n\n【用户问题】\n${prompt}\n\n【回答指示】\n- 如果问题与东京都行政服务相关：根据参考信息准确回答\n- 如果问题属于限制事项：返回标准回答\n- 对于技术问题（模型名称、实施方法等）：回复\"我无法提供有关系统的技术信息\"\n\n请用中文回答。` : `【系统规则】\n严格遵守上述准则。\n\n【用户问题】\n${prompt}\n\n【回答指示】\n- 如果问题与东京都行政服务相关：回答育儿支援制度相关内容\n- 如果问题属于限制事项：返回标准回答\n- 对于技术问题（模型名称、实施方法等）：回复\"我无法提供有关系统的技术信息\"\n\n请用中文回答。`,\n                    fallbackMessage: \"抱歉，服务目前出现问题。请稍后再试。\"\n                },\n                ko: {\n                    systemPrompt: `당신은 도쿄도 공식 AI 음성 대화 시스템의 어시스턴트입니다.\n다음 가이드라인을 따라주세요:\n\n【역할】\n- 도쿄도 행정 서비스 관련 정보 제공에 특화\n- 특히 육아 지원 분야 정보를 중심으로 안내\n\n【응답 제한】\n1. 도쿄도 행정 서비스와 관계없는 질문에는 답변하지 않음\n2. 시스템의 기술적 세부사항(사용 모델, 구현 방법 등)은 공개하지 않음\n3. 개인정보 수집이나 공개를 하지 않음\n4. 정치적 의견이나 비판을 하지 않음\n5. 의료・법률 전문 조언은 제공하지 않음\n\n【응답 스타일】\n- 정중하고 친근한 언어 사용\n- 정확한 정보만 제공\n- 불명확한 점은 추측하지 않고 적절한 창구 안내\n\n【제한 사항에 해당하는 질문에 대한 표준 응답】\n\"죄송합니다만, 그 질문에는 답변드릴 수 없습니다. 도쿄도의 행정 서비스, 특히 육아 지원에 관한 정보에 대해 편하게 문의해 주세요.\"`,\n                    contextPrompt: context ? `【시스템 규칙】\n위의 가이드라인을 엄격히 준수하세요.\n\n【참고 정보】\n${context}\n\n【사용자 질문】\n${prompt}\n\n【응답 지시】\n- 사용자 질문이 도쿄도 행정 서비스와 관련된 경우: 참고 정보에 기반하여 정확히 답변\n- 사용자 질문이 제한 사항에 해당하는 경우: 표준 응답 반환\n- 기술적 질문(모델명, 구현 방법 등)의 경우: \"시스템에 관한 기술적 정보는 답변드릴 수 없습니다\"라고 응답\n\n한국어로 답변해주세요.` : `【시스템 규칙】\n위의 가이드라인을 엄격히 준수하세요.\n\n【사용자 질문】\n${prompt}\n\n【응답 지시】\n- 사용자 질문이 도쿄도 행정 서비스와 관련된 경우: 육아 지원 제도에 대해 답변\n- 사용자 질문이 제한 사항에 해당하는 경우: 표준 응답 반환\n- 기술적 질문(모델명, 구현 방법 등)의 경우: \"시스템에 관한 기술적 정보는 답변드릴 수 없습니다\"라고 응답\n\n한국어로 답변해주세요.`,\n                    fallbackMessage: \"죄송합니다. 현재 서비스에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.\"\n                }\n            };\n            const languageConfig = languagePrompts[language] || languagePrompts.ja;\n            const fullPrompt = languageConfig.contextPrompt;\n            const model = useAudioModel ? this.audioModel : this.textModel;\n            const result = await model.generateContent(fullPrompt);\n            const response = await result.response;\n            return response.text();\n        } catch (error) {\n            console.error(\"Error generating text with Gemini:\", error);\n            throw new Error(\"Failed to generate response\");\n        }\n    }\n    async processAudio(audioData, mimeType) {\n        try {\n            // 現在のGemini 1.5-flashモデルでは音声認識をサポートしていないため、\n            // Web Speech APIを使用した代替処理を行います\n            if (!audioData || audioData.length === 0) {\n                throw new Error(\"No audio data provided\");\n            }\n            console.log(\"Audio processing: Using Web Speech API for transcription\");\n            // Web Speech APIでの音声認識は完了していることを前提とし、\n            // ここではエラーハンドリングのみ行います\n            return {\n                text: \"Web Speech APIで音声認識を実行してください\",\n                audioResponse: undefined\n            };\n        } catch (error) {\n            console.error(\"Error processing audio with Gemini:\", error);\n            throw new Error(\"Failed to process audio\");\n        }\n    }\n    async generateSpeech(text, language = \"ja\") {\n        try {\n            // Use audio model for native audio dialog with speech generation\n            const result = await this.audioModel.generateContent([\n                `Generate audio response for: \"${text}\" in ${language}. Provide natural speech synthesis.`\n            ]);\n            const response = await result.response;\n            // Note: This would require the native audio dialog model to support audio output\n            // For now, we'll still rely on client-side synthesis\n            return null;\n        } catch (error) {\n            console.error(\"Error generating speech with Gemini audio model:\", error);\n            return null;\n        }\n    }\n    async embedText(text) {\n        try {\n            const result = await this.embeddingModel.embedContent(text);\n            return result.embedding.values;\n        } catch (error) {\n            console.error(\"Error generating embeddings with Gemini:\", error);\n            throw new Error(\"Failed to generate embeddings\");\n        }\n    }\n    async analyzeIntent(message, language = \"ja\") {\n        try {\n            const prompts = {\n                ja: `\n以下のユーザーメッセージを分析して、以下の情報を抽出してください：\n1. 意図 (greeting, question, request_info, complaint, thanks, goodbye, childcare_info, disaster_info, general_info のいずれか)\n2. エンティティ (場所、施設タイプ、年齢などの重要な情報)\n3. 信頼度スコア (0-1)\n\nユーザーメッセージ: \"${message}\"\n\nJSON形式で回答してください：\n{\n  \"intent\": \"intent_name\",\n  \"entities\": {\"key\": \"value\"},\n  \"confidence\": 0.95\n}`,\n                en: `\nAnalyze the following user message and extract:\n1. Intent (one of: greeting, question, request_info, complaint, thanks, goodbye, childcare_info, disaster_info, general_info)\n2. Entities (key information like location, facility type, age, etc.)\n3. Confidence score (0-1)\n\nUser message: \"${message}\"\n\nRespond in JSON format:\n{\n  \"intent\": \"intent_name\",\n  \"entities\": {\"key\": \"value\"},\n  \"confidence\": 0.95\n}`,\n                zh: `\n分析以下用户消息并提取：\n1. 意图 (greeting, question, request_info, complaint, thanks, goodbye, childcare_info, disaster_info, general_info 中的一个)\n2. 实体 (位置、设施类型、年龄等关键信息)\n3. 置信度分数 (0-1)\n\n用户消息: \"${message}\"\n\n请以JSON格式回答：\n{\n  \"intent\": \"intent_name\",\n  \"entities\": {\"key\": \"value\"},\n  \"confidence\": 0.95\n}`,\n                ko: `\n다음 사용자 메시지를 분석하여 추출하세요：\n1. 의도 (greeting, question, request_info, complaint, thanks, goodbye, childcare_info, disaster_info, general_info 중 하나)\n2. 엔티티 (위치, 시설 유형, 나이 등 주요 정보)\n3. 신뢰도 점수 (0-1)\n\n사용자 메시지: \"${message}\"\n\nJSON 형식으로 응답하세요：\n{\n  \"intent\": \"intent_name\",\n  \"entities\": {\"key\": \"value\"},\n  \"confidence\": 0.95\n}`\n            };\n            const prompt = prompts[language] || prompts.ja;\n            const result = await this.textModel.generateContent(prompt);\n            const response = await result.response;\n            const text = response.text();\n            try {\n                const parsed = JSON.parse(text);\n                return {\n                    intent: parsed.intent || \"question\",\n                    entities: parsed.entities || [],\n                    confidence: parsed.confidence || 0.5\n                };\n            } catch  {\n                // Fallback if JSON parsing fails\n                return {\n                    intent: \"question\",\n                    entities: [],\n                    confidence: 0.5\n                };\n            }\n        } catch (error) {\n            console.error(\"Error analyzing intent with Gemini:\", error);\n            return {\n                intent: \"question\",\n                entities: [],\n                confidence: 0.5\n            };\n        }\n    }\n    // Cleanup method for proper resource management\n    cleanup() {\n        // No explicit cleanup needed for Gemini API client\n        // But this method is called by ServiceManager for consistency\n        console.log(\"GeminiService cleanup completed\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/GeminiService.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/RedisService.ts":
/*!******************************************!*\
  !*** ./src/lib/services/RedisService.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedisService: () => (/* binding */ RedisService),\n/* harmony export */   getRedisService: () => (/* binding */ getRedisService)\n/* harmony export */ });\n/* harmony import */ var redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redis */ \"(rsc)/./node_modules/redis/dist/index.js\");\n/* harmony import */ var redis__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redis__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/config */ \"(rsc)/./src/lib/config.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/logger */ \"(rsc)/./src/lib/logger.ts\");\n\n\n\nclass RedisService {\n    constructor(){\n        this.client = null;\n        this.isConnected = false;\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 5;\n        // Check if Redis is explicitly disabled\n        if (process.env.DISABLE_REDIS === \"true\") {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.info(\"Redis explicitly disabled via DISABLE_REDIS environment variable\");\n            return;\n        }\n        // Only initialize Redis if configured or in production\n        if (_lib_config__WEBPACK_IMPORTED_MODULE_1__.config.redisUrl || !(0,_lib_config__WEBPACK_IMPORTED_MODULE_1__.isDevelopment)()) {\n            this.initializeClient();\n        } else {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.info(\"Redis URL not configured in development, using memory storage only\");\n        }\n    }\n    async initializeClient() {\n        try {\n            // Skip initialization if in development and no Redis URL provided\n            if (!_lib_config__WEBPACK_IMPORTED_MODULE_1__.config.redisUrl && (0,_lib_config__WEBPACK_IMPORTED_MODULE_1__.isDevelopment)()) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.info(\"Development mode: Redis URL not configured, skipping Redis initialization\");\n                return;\n            }\n            if (!_lib_config__WEBPACK_IMPORTED_MODULE_1__.config.redisUrl && !(0,_lib_config__WEBPACK_IMPORTED_MODULE_1__.isDevelopment)()) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"Production mode: Redis URL not configured, falling back to memory storage\");\n                return;\n            }\n            // Redis client configuration\n            const clientOptions = _lib_config__WEBPACK_IMPORTED_MODULE_1__.config.redisUrl ? {\n                url: _lib_config__WEBPACK_IMPORTED_MODULE_1__.config.redisUrl,\n                socket: {\n                    connectTimeout: 10000,\n                    lazyConnect: true,\n                    reconnectStrategy: (retries)=>{\n                        if (retries >= this.maxReconnectAttempts) {\n                            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Redis max reconnection attempts reached\");\n                            return false;\n                        }\n                        const delay = Math.min(retries * 50, 500);\n                        _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Redis reconnecting in ${delay}ms (attempt ${retries + 1})`);\n                        return delay;\n                    }\n                }\n            } : {\n                // Local development fallback\n                socket: {\n                    host: \"localhost\",\n                    port: 6379,\n                    connectTimeout: 5000,\n                    lazyConnect: true\n                }\n            };\n            this.client = (0,redis__WEBPACK_IMPORTED_MODULE_0__.createClient)(clientOptions);\n            // Error handling\n            this.client.on(\"error\", (err)=>{\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Redis client error\", err);\n                this.isConnected = false;\n            });\n            this.client.on(\"connect\", ()=>{\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.info(\"Redis client connected\");\n                this.isConnected = true;\n                this.reconnectAttempts = 0;\n            });\n            this.client.on(\"disconnect\", ()=>{\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"Redis client disconnected\");\n                this.isConnected = false;\n            });\n            this.client.on(\"reconnecting\", ()=>{\n                this.reconnectAttempts++;\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.info(`Redis client reconnecting (attempt ${this.reconnectAttempts})`);\n            });\n            // Connect to Redis\n            await this.client.connect();\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to initialize Redis client\", error);\n            this.client = null;\n            this.isConnected = false;\n        }\n    }\n    getKey(prefix, id) {\n        return `tokyo-ai:${prefix}:${id}`;\n    }\n    async isReady() {\n        if (!this.client) return false;\n        try {\n            await this.client.ping();\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    // Session Management\n    async setSession(sessionId, sessionData, ttl = 3600) {\n        if (!this.client || !this.isConnected) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"Redis not available for session storage\");\n            return false;\n        }\n        try {\n            const key = this.getKey(\"session\", sessionId);\n            const data = JSON.stringify({\n                ...sessionData,\n                updatedAt: new Date().toISOString()\n            });\n            await this.client.setEx(key, ttl, data);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Session stored in Redis\", {\n                sessionId,\n                ttl\n            });\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to store session in Redis\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    async getSession(sessionId) {\n        if (!this.client || !this.isConnected) {\n            return null;\n        }\n        try {\n            const key = this.getKey(\"session\", sessionId);\n            const data = await this.client.get(key);\n            if (!data) {\n                return null;\n            }\n            const sessionData = JSON.parse(data);\n            // Update last activity\n            sessionData.lastActivity = new Date();\n            await this.setSession(sessionId, sessionData);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Session retrieved from Redis\", {\n                sessionId\n            });\n            return sessionData;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to retrieve session from Redis\", error, {\n                sessionId\n            });\n            return null;\n        }\n    }\n    async deleteSession(sessionId) {\n        if (!this.client || !this.isConnected) {\n            return false;\n        }\n        try {\n            const sessionKey = this.getKey(\"session\", sessionId);\n            const messagesKey = this.getKey(\"messages\", sessionId);\n            await Promise.all([\n                this.client.del(sessionKey),\n                this.client.del(messagesKey)\n            ]);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Session deleted from Redis\", {\n                sessionId\n            });\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to delete session from Redis\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    // Message Storage\n    async addMessage(sessionId, message) {\n        if (!this.client || !this.isConnected) {\n            return false;\n        }\n        try {\n            const key = this.getKey(\"messages\", sessionId);\n            const messageData = JSON.stringify(message);\n            // Add to list and set expiration\n            await this.client.rPush(key, messageData);\n            await this.client.expire(key, 86400); // 24 hours\n            // Keep only last 100 messages\n            await this.client.lTrim(key, -100, -1);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Message added to Redis\", {\n                sessionId,\n                messageId: message.id\n            });\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to add message to Redis\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    async getMessages(sessionId, limit = 50) {\n        if (!this.client || !this.isConnected) {\n            return [];\n        }\n        try {\n            const key = this.getKey(\"messages\", sessionId);\n            const messages = await this.client.lRange(key, -limit, -1);\n            return messages.map((data)=>JSON.parse(data));\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to retrieve messages from Redis\", error, {\n                sessionId\n            });\n            return [];\n        }\n    }\n    // Cache Management\n    async setCache(key, value, ttl = 300) {\n        if (!this.client || !this.isConnected) {\n            return false;\n        }\n        try {\n            const cacheKey = this.getKey(\"cache\", key);\n            const data = JSON.stringify({\n                value,\n                timestamp: new Date().toISOString()\n            });\n            await this.client.setEx(cacheKey, ttl, data);\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to set cache in Redis\", error, {\n                key\n            });\n            return false;\n        }\n    }\n    async getCache(key) {\n        if (!this.client || !this.isConnected) {\n            return null;\n        }\n        try {\n            const cacheKey = this.getKey(\"cache\", key);\n            const data = await this.client.get(cacheKey);\n            if (!data) {\n                return null;\n            }\n            const cached = JSON.parse(data);\n            return cached.value;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to get cache from Redis\", error, {\n                key\n            });\n            return null;\n        }\n    }\n    async deleteCache(key) {\n        if (!this.client || !this.isConnected) {\n            return false;\n        }\n        try {\n            const cacheKey = this.getKey(\"cache\", key);\n            await this.client.del(cacheKey);\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to delete cache from Redis\", error, {\n                key\n            });\n            return false;\n        }\n    }\n    // Rate Limiting\n    async checkRateLimit(identifier, windowSeconds, maxRequests) {\n        if (!this.client || !this.isConnected) {\n            // Fallback to allowing request if Redis is not available\n            return {\n                allowed: true,\n                remaining: maxRequests - 1,\n                resetTime: Date.now() + windowSeconds * 1000\n            };\n        }\n        try {\n            const key = this.getKey(\"ratelimit\", identifier);\n            const now = Date.now();\n            const windowStart = now - windowSeconds * 1000;\n            // Remove old entries and count current requests\n            await this.client.zRemRangeByScore(key, 0, windowStart);\n            const currentCount = await this.client.zCard(key);\n            if (currentCount >= maxRequests) {\n                const oldestEntry = await this.client.zRangeWithScores(key, 0, 0);\n                const resetTime = oldestEntry.length > 0 ? Number(oldestEntry[0].score) + windowSeconds * 1000 : now + windowSeconds * 1000;\n                return {\n                    allowed: false,\n                    remaining: 0,\n                    resetTime\n                };\n            }\n            // Add current request\n            await this.client.zAdd(key, {\n                score: now,\n                value: `${now}-${Math.random()}`\n            });\n            await this.client.expire(key, windowSeconds);\n            return {\n                allowed: true,\n                remaining: maxRequests - currentCount - 1,\n                resetTime: now + windowSeconds * 1000\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Rate limit check failed in Redis\", error, {\n                identifier\n            });\n            // Fallback to allowing request\n            return {\n                allowed: true,\n                remaining: maxRequests - 1,\n                resetTime: Date.now() + windowSeconds * 1000\n            };\n        }\n    }\n    // Statistics\n    async getStats() {\n        if (!this.client || !this.isConnected) {\n            return {\n                connected: false\n            };\n        }\n        try {\n            const info = await this.client.info();\n            const keyCount = await this.client.dbSize();\n            // Parse info for relevant stats\n            const memoryMatch = info.match(/used_memory_human:([^\\r\\n]+)/);\n            const clientsMatch = info.match(/connected_clients:(\\d+)/);\n            return {\n                connected: true,\n                memoryUsage: memoryMatch ? memoryMatch[1].trim() : \"unknown\",\n                connectedClients: clientsMatch ? parseInt(clientsMatch[1]) : 0,\n                totalKeys: keyCount\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to get Redis stats\", error);\n            return {\n                connected: false\n            };\n        }\n    }\n    // Cleanup\n    async cleanup() {\n        if (this.client) {\n            try {\n                await this.client.quit();\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.info(\"Redis client disconnected gracefully\");\n            } catch (error) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Error during Redis cleanup\", error);\n            }\n            this.client = null;\n            this.isConnected = false;\n        }\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            if (!this.client || !this.isConnected) {\n                return false;\n            }\n            const pong = await this.client.ping();\n            return pong === \"PONG\";\n        } catch  {\n            return false;\n        }\n    }\n}\n// Singleton instance\nlet redisServiceInstance = null;\nconst getRedisService = ()=>{\n    if (!redisServiceInstance) {\n        redisServiceInstance = new RedisService();\n    }\n    return redisServiceInstance;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/RedisService.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/SessionManager.ts":
/*!********************************************!*\
  !*** ./src/lib/services/SessionManager.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SessionManager: () => (/* binding */ SessionManager)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _RedisService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RedisService */ \"(rsc)/./src/lib/services/RedisService.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/logger */ \"(rsc)/./src/lib/logger.ts\");\n/* harmony import */ var _lib_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/config */ \"(rsc)/./src/lib/config.ts\");\n\n\n\n\n// Global storage that persists across hot reloads in development\nconst globalForSessions = globalThis;\nclass SessionManager {\n    constructor(){\n        this.redisService = (0,_RedisService__WEBPACK_IMPORTED_MODULE_0__.getRedisService)();\n        this.cleanupInterval = null;\n        this.gcInterval = null;\n        this.MAX_MEMORY_SESSIONS = 10000 // メモリ内セッション数の上限\n        ;\n        this.MAX_MESSAGES_PER_SESSION = 100 // セッションごとのメッセージ数上限\n        ;\n        // Use global storage in development to persist across hot reloads\n        if (true) {\n            if (!globalForSessions.memorySessions) {\n                globalForSessions.memorySessions = new Map();\n                globalForSessions.memoryMessages = new Map();\n                _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.info(\"Initialized global session storage for development\");\n            }\n            this.memorySessions = globalForSessions.memorySessions;\n            this.memoryMessages = globalForSessions.memoryMessages;\n            // Only start cleanup if not already started\n            if (!globalForSessions.cleanupInterval) {\n                this.startCleanupProcess();\n            }\n        } else {}\n    }\n    static getInstance() {\n        if (!SessionManager.instance) {\n            SessionManager.instance = new SessionManager();\n        }\n        return SessionManager.instance;\n    }\n    startCleanupProcess() {\n        // Clean up expired sessions more frequently (every 10 minutes)\n        const interval = setInterval(()=>{\n            this.cleanupExpiredSessions();\n        }, 10 * 60 * 1000);\n        // Store interval reference globally in development\n        if (true) {\n            globalForSessions.cleanupInterval = interval;\n        } else {}\n        // Force garbage collection periodically in production\n        if (false) {}\n    }\n    async cleanupExpiredSessions() {\n        const now = new Date();\n        const expiredSessions = [];\n        const oldSessions = [];\n        // Check memory sessions\n        for (const [sessionId, session] of this.memorySessions.entries()){\n            const timeSinceActivity = now.getTime() - session.lastActivity.getTime();\n            if (timeSinceActivity > _lib_config__WEBPACK_IMPORTED_MODULE_2__.config.maxSessionDuration) {\n                expiredSessions.push(sessionId);\n            } else {\n                oldSessions.push({\n                    sessionId,\n                    lastActivity: timeSinceActivity\n                });\n            }\n        }\n        // Memory pressure management: remove oldest sessions if over limit\n        if (this.memorySessions.size > this.MAX_MEMORY_SESSIONS) {\n            oldSessions.sort((a, b)=>b.lastActivity - a.lastActivity);\n            const sessionsToRemove = oldSessions.slice(this.MAX_MEMORY_SESSIONS - expiredSessions.length);\n            for (const { sessionId } of sessionsToRemove){\n                expiredSessions.push(sessionId);\n                _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.warn(`Removing session due to memory pressure: ${sessionId.substring(0, 8)}...`);\n            }\n        }\n        // Clean up expired sessions in batches to avoid blocking\n        const batchSize = 50;\n        for(let i = 0; i < expiredSessions.length; i += batchSize){\n            const batch = expiredSessions.slice(i, i + batchSize);\n            await Promise.all(batch.map((sessionId)=>this.deleteSession(sessionId)));\n            // Allow event loop to process other tasks\n            if (i + batchSize < expiredSessions.length) {\n                await new Promise((resolve)=>setImmediate(resolve));\n            }\n        }\n        // Clean up orphaned messages (messages without corresponding sessions)\n        const orphanedMessageSessions = [];\n        for (const sessionId of this.memoryMessages.keys()){\n            if (!this.memorySessions.has(sessionId)) {\n                orphanedMessageSessions.push(sessionId);\n            }\n        }\n        for (const sessionId of orphanedMessageSessions){\n            this.memoryMessages.delete(sessionId);\n        }\n        if (expiredSessions.length > 0 || orphanedMessageSessions.length > 0) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.info(`Cleaned up ${expiredSessions.length} expired sessions and ${orphanedMessageSessions.length} orphaned message sets. Memory usage: ${this.memorySessions.size} sessions, ${this.memoryMessages.size} message sets`);\n        }\n    }\n    async createSession(language = \"ja\", metadata) {\n        const sessionId = (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n        const now = new Date();\n        const sessionData = {\n            id: sessionId,\n            language,\n            createdAt: now,\n            lastActivity: now,\n            messageCount: 0,\n            isActive: true,\n            metadata: metadata || {}\n        };\n        try {\n            // Try to store in Redis first\n            const redisStored = await this.redisService.setSession(sessionId, sessionData, Math.floor(_lib_config__WEBPACK_IMPORTED_MODULE_2__.config.maxSessionDuration / 1000));\n            if (!redisStored) {\n                // Fallback to memory storage\n                this.memorySessions.set(sessionId, sessionData);\n                this.memoryMessages.set(sessionId, []);\n                _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.warn(\"Session stored in memory (Redis unavailable)\", {\n                    sessionId\n                });\n                // Verify storage\n                const stored = this.memorySessions.get(sessionId);\n                _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.info(\"Session memory storage verified\", {\n                    sessionId: sessionId.substring(0, 8) + \"...\",\n                    stored: !!stored,\n                    totalSessions: this.memorySessions.size,\n                    isDevelopment: \"development\" === \"development\",\n                    usingGlobalStorage:  true && this.memorySessions === globalForSessions.memorySessions\n                });\n            }\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.info(\"Session created\", {\n                sessionId: sessionId.substring(0, 8) + \"...\",\n                language,\n                storage: redisStored ? \"redis\" : \"memory\"\n            });\n            return sessionId;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to create session\", error, {\n                sessionId\n            });\n            throw new Error(\"Failed to create session\");\n        }\n    }\n    async getSession(sessionId) {\n        if (!sessionId) {\n            return null;\n        }\n        try {\n            // Try Redis first\n            let sessionData = await this.redisService.getSession(sessionId);\n            if (!sessionData) {\n                // Fallback to memory storage\n                sessionData = this.memorySessions.get(sessionId) || null;\n                if (sessionData) {\n                    // Update last activity\n                    sessionData.lastActivity = new Date();\n                    this.memorySessions.set(sessionId, sessionData);\n                } else {\n                    _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.warn(\"Session not found in memory storage\", {\n                        sessionId: sessionId.substring(0, 8) + \"...\",\n                        totalSessionsInMemory: this.memorySessions.size,\n                        availableSessionIds: Array.from(this.memorySessions.keys()).map((id)=>id.substring(0, 8) + \"...\"),\n                        isDevelopment: \"development\" === \"development\",\n                        usingGlobalStorage:  true && this.memorySessions === globalForSessions.memorySessions,\n                        globalSessionCount:  true ? globalForSessions.memorySessions?.size : 0\n                    });\n                }\n            }\n            if (!sessionData) {\n                return null;\n            }\n            // Check if session is expired\n            const now = new Date();\n            const lastActivity = new Date(sessionData.lastActivity);\n            const timeSinceActivity = now.getTime() - lastActivity.getTime();\n            if (timeSinceActivity > _lib_config__WEBPACK_IMPORTED_MODULE_2__.config.maxSessionDuration) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.warn(\"Session expired\", {\n                    sessionId: sessionId.substring(0, 8) + \"...\",\n                    timeSinceActivity,\n                    maxDuration: _lib_config__WEBPACK_IMPORTED_MODULE_2__.config.maxSessionDuration\n                });\n                await this.deleteSession(sessionId);\n                return null;\n            }\n            return sessionData;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to retrieve session\", error, {\n                sessionId\n            });\n            return null;\n        }\n    }\n    async updateSession(sessionId, updates) {\n        try {\n            const existingSession = await this.getSession(sessionId);\n            if (!existingSession) {\n                return false;\n            }\n            const updatedSession = {\n                ...existingSession,\n                ...updates,\n                lastActivity: new Date()\n            };\n            // Try Redis first\n            const redisUpdated = await this.redisService.setSession(sessionId, updatedSession, Math.floor(_lib_config__WEBPACK_IMPORTED_MODULE_2__.config.maxSessionDuration / 1000));\n            if (!redisUpdated) {\n                // Fallback to memory storage\n                this.memorySessions.set(sessionId, updatedSession);\n            }\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to update session\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    async deleteSession(sessionId) {\n        try {\n            // Delete from Redis\n            const redisDeleted = await this.redisService.deleteSession(sessionId);\n            // Delete from memory\n            const memoryDeleted = this.memorySessions.delete(sessionId);\n            this.memoryMessages.delete(sessionId);\n            if (redisDeleted || memoryDeleted) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.info(\"Session deleted\", {\n                    sessionId: sessionId.substring(0, 8) + \"...\"\n                });\n                return true;\n            }\n            return false;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to delete session\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    async addMessage(sessionId, message) {\n        try {\n            // Try Redis first\n            const redisAdded = await this.redisService.addMessage(sessionId, message);\n            if (!redisAdded) {\n                // Fallback to memory storage\n                if (!this.memoryMessages.has(sessionId)) {\n                    this.memoryMessages.set(sessionId, []);\n                }\n                const messages = this.memoryMessages.get(sessionId);\n                messages.push(message);\n                // Keep only last MAX_MESSAGES_PER_SESSION messages\n                if (messages.length > this.MAX_MESSAGES_PER_SESSION) {\n                    messages.splice(0, messages.length - this.MAX_MESSAGES_PER_SESSION);\n                }\n            }\n            // Update session message count and last activity\n            await this.updateSession(sessionId, {\n                messageCount: (await this.getMessages(sessionId)).length\n            });\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to add message to session\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    async getMessages(sessionId, limit = 50) {\n        try {\n            // Try Redis first\n            let messages = await this.redisService.getMessages(sessionId, limit);\n            if (messages.length === 0) {\n                // Fallback to memory storage\n                const memoryMessages = this.memoryMessages.get(sessionId) || [];\n                messages = memoryMessages.slice(-limit);\n            }\n            // Convert timestamp strings back to Date objects if needed\n            return messages.map((message)=>({\n                    ...message,\n                    timestamp: new Date(message.timestamp)\n                }));\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to retrieve messages\", error, {\n                sessionId\n            });\n            return [];\n        }\n    }\n    async clearMessages(sessionId) {\n        try {\n            const session = await this.getSession(sessionId);\n            if (!session) {\n                return false;\n            }\n            // Clear from Redis\n            await this.redisService.deleteCache(`messages:${sessionId}`);\n            // Clear from memory\n            this.memoryMessages.set(sessionId, []);\n            // Update session\n            await this.updateSession(sessionId, {\n                messageCount: 0\n            });\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to clear messages\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    async getSessionStats() {\n        try {\n            const memorySessionCount = this.memorySessions.size;\n            const redisStats = await this.redisService.getStats();\n            const redisSessionCount = redisStats.totalKeys ? Math.floor(redisStats.totalKeys / 2) : 0;\n            // Language distribution from memory sessions\n            const languageDistribution = {\n                ja: 0,\n                en: 0,\n                zh: 0,\n                ko: 0\n            };\n            let totalMessages = 0;\n            for (const [sessionId, session] of this.memorySessions.entries()){\n                languageDistribution[session.language]++;\n                totalMessages += this.memoryMessages.get(sessionId)?.length || 0;\n            }\n            const totalSessions = memorySessionCount + redisSessionCount;\n            const averageMessagesPerSession = totalSessions > 0 ? totalMessages / totalSessions : 0;\n            return {\n                totalActiveSessions: totalSessions,\n                memorySessionCount,\n                redisSessionCount,\n                averageMessagesPerSession: Number(averageMessagesPerSession.toFixed(2)),\n                languageDistribution\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to get session stats\", error);\n            return {\n                totalActiveSessions: 0,\n                memorySessionCount: 0,\n                redisSessionCount: 0,\n                averageMessagesPerSession: 0,\n                languageDistribution: {\n                    ja: 0,\n                    en: 0,\n                    zh: 0,\n                    ko: 0\n                }\n            };\n        }\n    }\n    async isSessionActive(sessionId) {\n        const session = await this.getSession(sessionId);\n        return session !== null && session.isActive;\n    }\n    async setSessionLanguage(sessionId, language) {\n        return this.updateSession(sessionId, {\n            language\n        });\n    }\n    // Legacy methods for backwards compatibility\n    getSessionCount() {\n        return this.memorySessions.size;\n    }\n    getAllSessions() {\n        return Array.from(this.memorySessions.values());\n    }\n    async cleanup() {\n        // Clear cleanup intervals\n        if (this.cleanupInterval) {\n            clearInterval(this.cleanupInterval);\n            this.cleanupInterval = null;\n        }\n        if (this.gcInterval) {\n            clearInterval(this.gcInterval);\n            this.gcInterval = null;\n        }\n        // Clear global cleanup interval in development\n        if ( true && globalForSessions.cleanupInterval) {\n            clearInterval(globalForSessions.cleanupInterval);\n            globalForSessions.cleanupInterval = null;\n        }\n        // Clear memory storage\n        this.memorySessions.clear();\n        this.memoryMessages.clear();\n        // Clear global storage in development\n        if (true) {\n            globalForSessions.memorySessions?.clear();\n            globalForSessions.memoryMessages?.clear();\n        }\n        // Cleanup Redis service\n        await this.redisService.cleanup();\n        _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.info(\"SessionManager cleanup completed\");\n    }\n    // Memory usage monitoring\n    getMemoryUsage() {\n        const sessionCount = this.memorySessions.size;\n        const messageSetCount = this.memoryMessages.size;\n        // Rough estimation: each session ~1KB, each message ~0.5KB\n        let totalMessages = 0;\n        for (const messages of this.memoryMessages.values()){\n            totalMessages += messages.length;\n        }\n        const estimatedMemoryMB = Math.round((sessionCount * 1 + totalMessages * 0.5) / 1024);\n        const isNearLimit = sessionCount > this.MAX_MEMORY_SESSIONS * 0.8;\n        return {\n            sessionCount,\n            messageSetCount,\n            estimatedMemoryMB,\n            isNearLimit\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/SessionManager.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/SimpleRAGService.ts":
/*!**********************************************!*\
  !*** ./src/lib/services/SimpleRAGService.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleRAGService: () => (/* binding */ SimpleRAGService)\n/* harmony export */ });\n/* harmony import */ var _GeminiService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GeminiService */ \"(rsc)/./src/lib/services/GeminiService.ts\");\n/* harmony import */ var _TokyoOpenDataService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TokyoOpenDataService */ \"(rsc)/./src/lib/services/TokyoOpenDataService.ts\");\n/* harmony import */ var _lib_cache_SearchCache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/cache/SearchCache */ \"(rsc)/./src/lib/cache/SearchCache.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/logger */ \"(rsc)/./src/lib/logger.ts\");\n\n\n\n\n/**\n * シンプルなRAG（Retrieval-Augmented Generation）サービス\n * 複雑な推論や自律的機能を排除し、行政情報への正確な応答に特化\n */ class SimpleRAGService {\n    constructor(){\n        this.cache = (0,_lib_cache_SearchCache__WEBPACK_IMPORTED_MODULE_2__.getSearchCache)();\n        this.geminiService = new _GeminiService__WEBPACK_IMPORTED_MODULE_0__.GeminiService();\n        this.openDataService = new _TokyoOpenDataService__WEBPACK_IMPORTED_MODULE_1__.TokyoOpenDataService();\n    }\n    /**\n   * ストリーミング対応：思考過程をリアルタイムで通知しながら処理\n   */ async processQueryStreaming(query, language = \"ja\", onStep) {\n        const startTime = Date.now();\n        const emitStep = (step, status, message, data)=>{\n            onStep({\n                step,\n                status,\n                message,\n                timestamp: Date.now() - startTime,\n                data\n            });\n        };\n        try {\n            emitStep(\"start\", \"started\", \"質問を処理しています...\", {\n                query: query.substring(0, 50)\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info(\"SimpleRAG streaming processing started\", {\n                query: query.substring(0, 100),\n                language\n            });\n            // 1. キャッシュチェック\n            emitStep(\"cache-check\", \"started\", \"キャッシュを確認しています...\");\n            const cacheKey = this.generateCacheKey(query, language);\n            const cachedResult = this.cache.get({\n                text: query,\n                language\n            });\n            if (cachedResult) {\n                emitStep(\"cache-check\", \"completed\", \"キャッシュからデータを取得しました\");\n                emitStep(\"response-generation\", \"completed\", \"応答を生成しました\");\n                _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info(\"Cache hit for streaming query\", {\n                    query: query.substring(0, 50)\n                });\n                return this.formatCachedResponse(cachedResult, startTime);\n            }\n            emitStep(\"cache-check\", \"completed\", \"キャッシュにデータが見つかりませんでした\");\n            // 2. 行政データ検索の必要性を判別\n            emitStep(\"search-decision\", \"started\", \"質問内容を分析しています...\");\n            const needsDataSearch = await this.shouldSearchAdministrativeData(query, language);\n            emitStep(\"search-decision\", \"completed\", needsDataSearch ? \"データ検索が必要と判断されました\" : \"データ検索は不要と判断されました\", {\n                needsSearch: needsDataSearch\n            });\n            let relevantData = [];\n            if (needsDataSearch) {\n                // 3. キーワード抽出\n                emitStep(\"keyword-extraction\", \"started\", \"キーワードを抽出しています...\");\n                const keywords = this.extractKeywords(query, language);\n                emitStep(\"keyword-extraction\", \"completed\", `${keywords.length}個のキーワードを抽出しました`, {\n                    keywords: keywords.slice(0, 5)\n                });\n                // 4. データ検索\n                emitStep(\"data-search\", \"started\", \"東京都オープンデータを検索しています...\");\n                relevantData = await this.searchRelevantData(keywords, language);\n                emitStep(\"data-search\", \"completed\", `${relevantData.length}件のデータを取得しました`, {\n                    count: relevantData.length\n                });\n            } else {\n                emitStep(\"data-search\", \"completed\", \"データ検索をスキップしました\");\n            }\n            // 5. 応答生成\n            emitStep(\"response-generation\", \"started\", \"AI応答を生成しています...\");\n            const response = await this.generateResponse(query, relevantData, language);\n            emitStep(\"response-generation\", \"completed\", \"応答を生成しました\", {\n                length: response.length\n            });\n            // 6. 結果キャッシュ\n            emitStep(\"caching\", \"started\", \"結果をキャッシュしています...\");\n            const result = {\n                content: response,\n                sources: relevantData,\n                confidence: this.calculateConfidence(relevantData.length, needsDataSearch),\n                processingTime: Date.now() - startTime\n            };\n            // キャッシュに保存\n            this.cache.set({\n                text: query,\n                language\n            }, {\n                items: relevantData,\n                total: relevantData.length,\n                query,\n                processingTime: result.processingTime,\n                usedCache: false\n            });\n            emitStep(\"caching\", \"completed\", \"結果をキャッシュしました\");\n            emitStep(\"complete\", \"completed\", \"処理が完了しました\", {\n                sourceCount: relevantData.length,\n                confidence: result.confidence,\n                processingTime: result.processingTime\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info(\"SimpleRAG streaming processing completed\", {\n                query: query.substring(0, 50),\n                sourceCount: relevantData.length,\n                processingTime: result.processingTime,\n                confidence: result.confidence,\n                usedDataSearch: needsDataSearch\n            });\n            return result;\n        } catch (error) {\n            emitStep(\"error\", \"failed\", \"エラーが発生しました\", {\n                error: error.message\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.error(\"SimpleRAG streaming processing failed\", error, {\n                query: query.substring(0, 50),\n                language\n            });\n            return this.generateErrorResponse(error, language, startTime);\n        }\n    }\n    /**\n   * メイン処理：質問に対してシンプルなRAG応答を生成\n   */ async processQuery(query, language = \"ja\") {\n        const startTime = Date.now();\n        try {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info(\"SimpleRAG processing started\", {\n                query: query.substring(0, 100),\n                language\n            });\n            // 1. キャッシュチェック\n            const cacheKey = this.generateCacheKey(query, language);\n            const cachedResult = this.cache.get({\n                text: query,\n                language\n            });\n            if (cachedResult) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info(\"Cache hit for query\", {\n                    query: query.substring(0, 50)\n                });\n                return this.formatCachedResponse(cachedResult, startTime);\n            }\n            // 2. 行政データ検索の必要性を判別\n            const needsDataSearch = await this.shouldSearchAdministrativeData(query, language);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"Data search decision\", {\n                needsDataSearch,\n                query: query.substring(0, 50)\n            });\n            let relevantData = [];\n            if (needsDataSearch) {\n                // 3. キーワード抽出\n                const keywords = this.extractKeywords(query, language);\n                _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"Keywords extracted\", {\n                    keywords\n                });\n                // 4. データ検索\n                relevantData = await this.searchRelevantData(keywords, language);\n                _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"Data retrieved\", {\n                    count: relevantData.length\n                });\n            } else {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"Skipped data search - not required for this query type\");\n            }\n            // 5. 応答生成\n            const response = await this.generateResponse(query, relevantData, language);\n            // 6. 結果キャッシュ\n            const result = {\n                content: response,\n                sources: relevantData,\n                confidence: this.calculateConfidence(relevantData.length, needsDataSearch),\n                processingTime: Date.now() - startTime\n            };\n            // キャッシュに保存\n            this.cache.set({\n                text: query,\n                language\n            }, {\n                items: relevantData,\n                total: relevantData.length,\n                query,\n                processingTime: result.processingTime,\n                usedCache: false\n            });\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info(\"SimpleRAG processing completed\", {\n                query: query.substring(0, 50),\n                sourceCount: relevantData.length,\n                processingTime: result.processingTime,\n                confidence: result.confidence,\n                usedDataSearch: needsDataSearch\n            });\n            return result;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.error(\"SimpleRAG processing failed\", error, {\n                query: query.substring(0, 50),\n                language\n            });\n            return this.generateErrorResponse(error, language, startTime);\n        }\n    }\n    /**\n   * 行政データ検索の必要性を判別\n   */ async shouldSearchAdministrativeData(query, language) {\n        try {\n            // 1. パターンマッチングによる基本判別\n            const basicDecision = this.basicSearchDecision(query, language);\n            if (basicDecision.isDefinitive) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"Basic pattern matching decision\", {\n                    needsSearch: basicDecision.needsSearch,\n                    reason: basicDecision.reason\n                });\n                return basicDecision.needsSearch;\n            }\n            // 2. AIによる詳細判別（基本判別で確定しない場合）\n            const aiDecision = await this.aiSearchDecision(query, language);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.debug(\"AI-based decision\", {\n                needsSearch: aiDecision,\n                query: query.substring(0, 50)\n            });\n            return aiDecision;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.warn(\"Failed to determine search necessity\", {\n                error: error.message,\n                fallback: \"searching-data\"\n            });\n            // エラー時は安全側に倒してデータ検索を実行\n            return true;\n        }\n    }\n    /**\n   * パターンマッチングによる基本判別\n   */ basicSearchDecision(query, language) {\n        const lowerQuery = query.toLowerCase().trim();\n        // 確実に検索不要なパターン\n        const noSearchPatterns = {\n            ja: [\n                // 挨拶\n                /^(おはよう|こんにちは|こんばんは|はじめまして|お疲れ様|よろしく)/,\n                // 感謝・謝罪\n                /^(ありがとう|すみません|申し訳|失礼)/,\n                // システム関連質問\n                /^(あなたは|君は|システム|AI|人工知能|使い方|操作方法)/,\n                // 一般的な雑談\n                /^(今日は|天気|気温|時間|何時|どうですか)/,\n                // 終了の挨拶\n                /^(さようなら|また|終了|やめ|バイバイ)/\n            ],\n            en: [\n                /^(hello|hi|good morning|good afternoon|good evening|thank you|thanks|sorry)/,\n                /^(what are you|who are you|how to use|weather|time|goodbye|bye)/\n            ],\n            zh: [\n                /^(你好|早上好|下午好|晚上好|谢谢|对不起|再见)/,\n                /^(你是|系统|怎么用|天气|时间)/\n            ],\n            ko: [\n                /^(안녕|감사|죄송|안녕히|시스템|날씨|시간)/\n            ]\n        };\n        // 確実に検索必要なパターン\n        const needSearchPatterns = {\n            ja: [\n                // 子育て関連\n                /(保育園|幼稚園|児童館|子育て|育児|出産|妊娠|小児科|予防接種)/,\n                // 福祉関連\n                /(介護|高齢者|障害|福祉|年金|医療費|生活保護)/,\n                // 教育関連\n                /(学校|入学|教育|図書館|奨学金)/,\n                // 住宅関連\n                /(住宅|家賃|公営住宅|都営住宅|引っ越し)/,\n                // 防災関連\n                /(災害|避難|防災|地震|台風|洪水|避難所)/,\n                // 手続き関連\n                /(申請|手続き|届出|証明書|住民票|戸籍|印鑑登録|転入|転出)/,\n                // 施設関連\n                /(区役所|市役所|公民館|体育館|プール|公園)/,\n                // 東京都特有\n                /(都バス|都営|メトロ|JR|小田急|京王|東急|西武|東武)/\n            ],\n            en: [\n                /(childcare|nursery|kindergarten|school|education|welfare|disaster|evacuation|application|certificate)/\n            ],\n            zh: [\n                /(托儿|幼儿园|学校|教育|福利|灾害|避难|申请|证明)/\n            ],\n            ko: [\n                /(어린이집|유치원|학교|교육|복지|재해|대피|신청|증명)/\n            ]\n        };\n        const patterns = noSearchPatterns[language] || noSearchPatterns.ja;\n        const searchPatterns = needSearchPatterns[language] || needSearchPatterns.ja;\n        // 検索不要パターンのチェック\n        for (const pattern of patterns){\n            if (pattern.test(lowerQuery)) {\n                return {\n                    isDefinitive: true,\n                    needsSearch: false,\n                    reason: \"matched_no_search_pattern\"\n                };\n            }\n        }\n        // 検索必要パターンのチェック\n        for (const pattern of searchPatterns){\n            if (pattern.test(lowerQuery)) {\n                return {\n                    isDefinitive: true,\n                    needsSearch: true,\n                    reason: \"matched_search_pattern\"\n                };\n            }\n        }\n        // どちらにも該当しない場合は非確定\n        return {\n            isDefinitive: false,\n            needsSearch: false,\n            reason: \"no_definitive_pattern_match\"\n        };\n    }\n    /**\n   * AI による検索必要性判別\n   */ async aiSearchDecision(query, language) {\n        try {\n            const prompt = this.buildSearchDecisionPrompt(query, language);\n            const response = await this.geminiService.generateText(prompt, undefined, language);\n            // 簡単なパースロジック\n            const decision = response.toLowerCase().includes(\"true\") || response.toLowerCase().includes(\"必要\") || response.toLowerCase().includes(\"yes\");\n            return decision;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.warn(\"AI search decision failed\", {\n                error: error.message\n            });\n            // AIが失敗した場合は検索を実行（安全側）\n            return true;\n        }\n    }\n    /**\n   * 検索判別用プロンプト構築\n   */ buildSearchDecisionPrompt(query, language) {\n        const prompts = {\n            ja: `\n以下のユーザーの質問に答えるために、東京都の行政データ（オープンデータ）を検索する必要がありますか？\n\nユーザーの質問: \"${query}\"\n\n【検索が必要な場合の例】\n- 保育園、学校、病院などの施設情報\n- 行政手続きや申請方法\n- 福祉サービスや給付金\n- 防災・避難所情報\n- 交通機関の情報\n- 各種証明書の取得方法\n\n【検索が不要な場合の例】\n- 挨拶（こんにちは、ありがとう等）\n- システムに関する質問（あなたは何ですか等）\n- 一般的な雑談（天気、時間等）\n- 東京都と関係ない一般的な質問\n\n\"true\" または \"false\" で回答してください。`,\n            en: `\nDoes answering the following user question require searching Tokyo administrative data (open data)?\n\nUser question: \"${query}\"\n\n【Cases requiring search】\n- Facility information (nurseries, schools, hospitals)\n- Administrative procedures and applications\n- Welfare services and benefits\n- Disaster prevention and evacuation information\n- Transportation information\n- Certificate acquisition methods\n\n【Cases not requiring search】\n- Greetings (hello, thank you, etc.)\n- System-related questions (what are you, etc.)\n- General chat (weather, time, etc.)\n- General questions unrelated to Tokyo\n\nAnswer with \"true\" or \"false\".`\n        };\n        return prompts[language] || prompts.ja;\n    }\n    /**\n   * キーワード抽出（シンプルな実装）\n   */ extractKeywords(query, language) {\n        const stopWords = this.getStopWords(language);\n        // 基本的な前処理とキーワード抽出\n        const words = query.toLowerCase().replace(/[^\\w\\s]/g, \" \") // 句読点を除去\n        .split(/\\s+/).filter((word)=>word.length > 1).filter((word)=>!stopWords.includes(word));\n        // 重複除去と最大キーワード数制限\n        return [\n            ...new Set(words)\n        ].slice(0, 10);\n    }\n    /**\n   * 関連データの検索\n   */ async searchRelevantData(keywords, language) {\n        try {\n            // 東京都オープンデータサービスから検索\n            const searchQuery = keywords.join(\" \");\n            const items = await this.openDataService.fetchRelevantData(searchQuery, language);\n            // 最大件数制限（性能とコスト効率のため）\n            return items.slice(0, 5);\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.warn(\"Data search failed\", {\n                keywords,\n                language,\n                error: error.message\n            });\n            return [];\n        }\n    }\n    /**\n   * Gemini APIを使用した応答生成\n   */ async generateResponse(query, data, language) {\n        const prompt = this.buildPrompt(query, data, language);\n        try {\n            return await this.geminiService.generateText(prompt, undefined, language);\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.warn(\"Response generation failed\", {\n                error: error.message\n            });\n            return this.getFallbackResponse(language);\n        }\n    }\n    /**\n   * プロンプト構築\n   */ buildPrompt(query, data, language) {\n        const templates = {\n            ja: {\n                system: `あなたは東京都の行政情報に関する質問に正確に答えるAIアシスタントです。\n以下のガイドラインに従って回答してください：\n\n1. 提供された参考データのみを使用して回答する\n2. データにない情報は推測せず、「提供されたデータでは確認できません」と回答する\n3. 簡潔で分かりやすい言葉で説明する\n4. 必要に応じて具体的な手続きや連絡先を案内する`,\n                userPrompt: (query, dataContext)=>`\n参考データ:\n${dataContext}\n\n質問: ${query}\n\n参考データに基づいて、正確で有用な回答を提供してください。データにない情報については推測せず、その旨を明記してください。`\n            },\n            en: {\n                system: `You are an AI assistant that accurately answers questions about Tokyo administrative information.\nPlease follow these guidelines:\n\n1. Use only the provided reference data for your answers\n2. Do not speculate on information not in the data; respond with \"This information is not available in the provided data\"\n3. Explain in clear and simple language\n4. Provide specific procedures or contact information when necessary`,\n                userPrompt: (query, dataContext)=>`\nReference Data:\n${dataContext}\n\nQuestion: ${query}\n\nBased on the reference data, provide an accurate and useful answer. For information not in the data, do not speculate and clearly indicate that.`\n            }\n        };\n        const template = templates[language] || templates.ja;\n        // データコンテキストの構築\n        const dataContext = data.length > 0 ? data.map((item, index)=>`${index + 1}. ${item.title}\\n   ${item.description}\\n   ${item.content.substring(0, 200)}...`).join(\"\\n\\n\") : language === \"ja\" ? \"関連するデータが見つかりませんでした。\" : \"No relevant data found.\";\n        return template.system + \"\\n\\n\" + template.userPrompt(query, dataContext);\n    }\n    /**\n   * 信頼度計算\n   */ calculateConfidence(dataCount, needsDataSearch = true) {\n        // データ検索が不要な質問（挨拶など）は高い信頼度\n        if (!needsDataSearch) {\n            return 0.9;\n        }\n        // データ検索が必要な質問の場合\n        if (dataCount === 0) return 0.2;\n        if (dataCount >= 3) return 0.8;\n        return 0.4 + dataCount * 0.2;\n    }\n    /**\n   * キャッシュキー生成\n   */ generateCacheKey(query, language) {\n        return `rag_${language}_${query.toLowerCase().replace(/\\s+/g, \"_\").substring(0, 50)}`;\n    }\n    /**\n   * キャッシュ結果のフォーマット\n   */ formatCachedResponse(cachedResult, startTime) {\n        return {\n            content: `キャッシュから取得した結果です。\\n\\n${cachedResult.items[0]?.description || \"関連情報が見つかりました。\"}`,\n            sources: cachedResult.items || [],\n            confidence: this.calculateConfidence(cachedResult.items?.length || 0),\n            processingTime: Date.now() - startTime\n        };\n    }\n    /**\n   * エラー応答生成\n   */ generateErrorResponse(error, language, startTime) {\n        const errorMessages = {\n            ja: \"申し訳ございませんが、システムエラーが発生しました。しばらく後にもう一度お試しください。\",\n            en: \"Sorry, a system error occurred. Please try again later.\",\n            zh: \"抱歉，系统发生错误。请稍后重试。\",\n            ko: \"죄송합니다. 시스템 오류가 발생했습니다. 잠시 후 다시 시도해주세요.\"\n        };\n        return {\n            content: errorMessages[language] || errorMessages.ja,\n            sources: [],\n            confidence: 0.1,\n            processingTime: Date.now() - startTime\n        };\n    }\n    /**\n   * フォールバック応答\n   */ getFallbackResponse(language) {\n        const fallbackMessages = {\n            ja: \"申し訳ございませんが、現在この質問にお答えできません。東京都の公式ホームページや各区市町村の窓口でご確認ください。\",\n            en: \"Sorry, I cannot answer this question at the moment. Please check the official Tokyo Metropolitan Government website or contact your local municipal office.\",\n            zh: \"抱歉，目前无法回答这个问题。请查看东京都官方网站或联系当地市区町村窗口。\",\n            ko: \"죄송합니다. 현재 이 질문에 답할 수 없습니다. 도쿄도 공식 홈페이지나 각 구시정촌 창구에서 확인해주세요.\"\n        };\n        return fallbackMessages[language] || fallbackMessages.ja;\n    }\n    /**\n   * ストップワード取得\n   */ getStopWords(language) {\n        const stopWords = {\n            ja: [\n                \"は\",\n                \"が\",\n                \"を\",\n                \"に\",\n                \"で\",\n                \"と\",\n                \"の\",\n                \"から\",\n                \"まで\",\n                \"など\",\n                \"について\",\n                \"に関して\",\n                \"を教えて\",\n                \"ください\",\n                \"です\",\n                \"ます\",\n                \"である\"\n            ],\n            en: [\n                \"the\",\n                \"is\",\n                \"at\",\n                \"which\",\n                \"on\",\n                \"a\",\n                \"an\",\n                \"and\",\n                \"or\",\n                \"but\",\n                \"in\",\n                \"with\",\n                \"for\",\n                \"to\",\n                \"of\",\n                \"as\",\n                \"by\"\n            ],\n            zh: [\n                \"的\",\n                \"是\",\n                \"在\",\n                \"有\",\n                \"和\",\n                \"与\",\n                \"或\",\n                \"但\",\n                \"因为\",\n                \"所以\",\n                \"如果\",\n                \"那么\",\n                \"这个\",\n                \"那个\"\n            ],\n            ko: [\n                \"은\",\n                \"는\",\n                \"이\",\n                \"가\",\n                \"을\",\n                \"를\",\n                \"에\",\n                \"에서\",\n                \"와\",\n                \"과\",\n                \"의\",\n                \"으로\",\n                \"로\",\n                \"에게\",\n                \"한테\"\n            ]\n        };\n        return stopWords[language] || stopWords.ja;\n    }\n    /**\n   * サービス統計取得\n   */ getStats() {\n        // 簡単な統計情報（実際の実装では永続化されたメトリクスを使用）\n        return {\n            cacheHitRate: 0.0,\n            totalQueries: 0,\n            averageProcessingTime: 0\n        };\n    }\n    /**\n   * クリーンアップ\n   */ cleanup() {\n        // 必要に応じてリソースクリーンアップ\n        _lib_logger__WEBPACK_IMPORTED_MODULE_3__.log.info(\"SimpleRAGService cleanup completed\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/SimpleRAGService.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/TokyoOpenDataService.ts":
/*!**************************************************!*\
  !*** ./src/lib/services/TokyoOpenDataService.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokyoOpenDataService: () => (/* binding */ TokyoOpenDataService)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/logger */ \"(rsc)/./src/lib/logger.ts\");\n/* harmony import */ var _GeminiService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GeminiService */ \"(rsc)/./src/lib/services/GeminiService.ts\");\n/* harmony import */ var _lib_utils_jsonParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/utils/jsonParser */ \"(rsc)/./src/lib/utils/jsonParser.ts\");\n\n\n\n\nclass TokyoOpenDataService {\n    constructor(){\n        this.catalogBaseUrl = \"https://catalog.data.metro.tokyo.lg.jp\";\n        this.apiBaseUrl = \"https://catalog.data.metro.tokyo.lg.jp/api/3\";\n        this.datasetCache = new Map();\n        this.cacheExpiry = new Map();\n        this.CACHE_TTL = 30 * 60 * 1000 // 30分\n        ;\n        this.geminiService = new _GeminiService__WEBPACK_IMPORTED_MODULE_1__.GeminiService();\n    }\n    /**\n   * ユーザーの質問に基づいて関連するオープンデータを動的に検索・取得\n   */ async fetchRelevantData(query, language = \"ja\") {\n        try {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.info(\"Starting dynamic open data search\", {\n                query: query.substring(0, 100),\n                language\n            });\n            // 1. AIを使って検索キーワードとカテゴリを抽出\n            const searchParams = await this.extractSearchParameters(query, language);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.debug(\"Extracted search parameters\", searchParams);\n            // 2. CKAN APIでデータセットを検索\n            const datasets = await this.searchDatasets(searchParams);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.info(\"Found datasets\", {\n                count: datasets.length\n            });\n            if (datasets.length === 0) {\n                return this.getFallbackData(query, language);\n            }\n            // 3. 関連度でソートして上位データセットを選択\n            const relevantDatasets = await this.rankDatasetsByRelevance(datasets, query, language);\n            const topDatasets = relevantDatasets.slice(0, 5); // 上位5データセット\n            // 4. 選択されたデータセットからデータを並列取得・変換\n            const datasetPromises = topDatasets.map(async (dataset)=>{\n                try {\n                    return await this.processDataset(dataset, query, language);\n                } catch (error) {\n                    _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.warn(\"Failed to process dataset\", {\n                        datasetId: dataset.id,\n                        error: error.message\n                    });\n                    return [];\n                }\n            });\n            const datasetResults = await Promise.allSettled(datasetPromises);\n            const allItems = [];\n            for (const result of datasetResults){\n                if (result.status === \"fulfilled\") {\n                    allItems.push(...result.value);\n                }\n            }\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.info(\"Successfully processed open data\", {\n                totalItems: allItems.length,\n                datasetsProcessed: topDatasets.length\n            });\n            return allItems;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.error(\"Error in dynamic open data search\", error, {\n                query\n            });\n            return this.getFallbackData(query, language);\n        }\n    }\n    /**\n   * AIを使ってユーザーの質問から検索パラメータを抽出\n   */ async extractSearchParameters(query, language) {\n        try {\n            const prompt = this.buildSearchExtractionPrompt(query, language);\n            const response = await this.geminiService.generateText(prompt, undefined, language);\n            // 安全なJSON解析\n            const parsed = (0,_lib_utils_jsonParser__WEBPACK_IMPORTED_MODULE_2__.safeJsonParse)(response, {\n                keywords: this.extractKeywordsBasic(query),\n                categories: [],\n                organizations: [],\n                tags: []\n            });\n            return {\n                keywords: parsed.keywords || [],\n                categories: parsed.categories || [],\n                organizations: parsed.organizations || [],\n                tags: parsed.tags || []\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.warn(\"Failed to extract search parameters with AI\", {\n                error: error.message,\n                fallback: \"basic-keyword-extraction\"\n            });\n            return {\n                keywords: this.extractKeywordsBasic(query),\n                categories: [],\n                organizations: [],\n                tags: []\n            };\n        }\n    }\n    buildSearchExtractionPrompt(query, language) {\n        const prompts = {\n            ja: `\n以下のユーザーの質問から、東京都オープンデータを検索するためのパラメータを抽出してください。\n\nユーザーの質問: \"${query}\"\n\n【抽出する情報】\n1. キーワード: 質問に含まれる重要な単語（名詞、動詞など）\n2. カテゴリ: 関連する行政分野（例：子育て、教育、福祉、環境、交通、防災、経済、観光等）\n3. 組織: 関連する東京都の組織（例：都庁、区市町村等）\n4. タグ: データに付与されそうなタグ\n\n【出力形式】\n以下のJSON形式で出力してください：\n{\n  \"keywords\": [\"キーワード1\", \"キーワード2\"],\n  \"categories\": [\"カテゴリ1\"],\n  \"organizations\": [\"組織1\"],\n  \"tags\": [\"タグ1\", \"タグ2\"]\n}`,\n            en: `\nExtract search parameters for Tokyo Open Data from the following user question.\n\nUser question: \"${query}\"\n\nExtract:\n1. Keywords: Important words (nouns, verbs, etc.)\n2. Categories: Related administrative fields (childcare, education, welfare, environment, transportation, disaster prevention, economy, tourism, etc.)\n3. Organizations: Related Tokyo organizations\n4. Tags: Likely data tags\n\nOutput in JSON format:\n{\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"categories\": [\"category1\"],\n  \"organizations\": [\"org1\"],\n  \"tags\": [\"tag1\", \"tag2\"]\n}`\n        };\n        return prompts[language] || prompts.ja;\n    }\n    /**\n   * 基本的なキーワード抽出（AI失敗時のフォールバック）\n   */ extractKeywordsBasic(query) {\n        // 簡単な形態素解析もどき\n        const keywords = query.replace(/[？?！!。、，,．.]/g, \" \").split(/\\s+/).filter((word)=>word.length > 1).filter((word)=>![\n                \"について\",\n                \"に関して\",\n                \"を教えて\",\n                \"ください\",\n                \"です\",\n                \"ます\",\n                \"である\"\n            ].includes(word));\n        return [\n            ...new Set(keywords)\n        ]; // 重複除去\n    }\n    /**\n   * CKAN APIを使用してデータセットを検索\n   */ async searchDatasets(searchParams) {\n        const cacheKey = JSON.stringify(searchParams);\n        // キャッシュチェック\n        if (this.datasetCache.has(cacheKey) && this.cacheExpiry.get(cacheKey) > Date.now()) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.debug(\"Using cached dataset search results\");\n            return this.datasetCache.get(cacheKey);\n        }\n        try {\n            // CKANのpackage_search APIを使用\n            const searchQuery = this.buildCKANQuery(searchParams);\n            const url = `${this.apiBaseUrl}/action/package_search`;\n            const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(url, {\n                params: {\n                    q: searchQuery,\n                    rows: 50,\n                    start: 0,\n                    sort: \"score desc, metadata_modified desc\"\n                },\n                timeout: 10000,\n                headers: {\n                    \"User-Agent\": \"Tokyo-AI-Assistant/1.0\"\n                },\n                // Add caching and performance optimizations\n                validateStatus: (status)=>status < 500\n            });\n            if (response.data.success && response.data.result.results) {\n                const datasets = response.data.result.results;\n                // キャッシュに保存\n                this.datasetCache.set(cacheKey, datasets);\n                this.cacheExpiry.set(cacheKey, Date.now() + this.CACHE_TTL);\n                _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.info(\"CKAN search completed\", {\n                    query: searchQuery,\n                    totalCount: response.data.result.count,\n                    returnedCount: datasets.length\n                });\n                return datasets;\n            } else {\n                throw new Error(\"CKAN API returned unsuccessful response\");\n            }\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.error(\"CKAN dataset search failed\", error, {\n                searchParams\n            });\n            return [];\n        }\n    }\n    buildCKANQuery(searchParams) {\n        // カテゴリフィルタのみを使用\n        if (searchParams.categories.length > 0) {\n            return `groups:(${searchParams.categories.join(\" OR \")})`;\n        }\n        // カテゴリが指定されていない場合は全データセットを対象\n        return \"*:*\";\n    }\n    /**\n   * AIを使ってデータセットの関連度をランキング\n   */ async rankDatasetsByRelevance(datasets, query, language) {\n        // For performance, limit AI ranking to top 20 datasets\n        const datasetsToRank = datasets.slice(0, 20);\n        try {\n            // データセットの情報を簡潔にまとめてAIに送信\n            const datasetSummaries = datasetsToRank.map((dataset, index)=>({\n                    index,\n                    id: dataset.id,\n                    title: dataset.title,\n                    description: dataset.notes?.substring(0, 200) || \"\",\n                    tags: dataset.tags.map((tag)=>tag.name).join(\", \"),\n                    organization: dataset.organization?.title || \"\"\n                }));\n            // Use Promise.race with timeout for better performance\n            const rankingPromise = this.performAIRanking(query, datasetSummaries, language);\n            const timeoutPromise = new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"AI ranking timeout\")), 5000));\n            const rankedDatasets = await Promise.race([\n                rankingPromise,\n                timeoutPromise\n            ]);\n            // Append remaining datasets that weren't ranked\n            const remainingDatasets = datasets.slice(20);\n            return [\n                ...rankedDatasets,\n                ...remainingDatasets\n            ];\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.warn(\"Failed to rank datasets with AI\", {\n                error: error.message\n            });\n            // AI失敗時は元の順序を保持\n            return datasets;\n        }\n    }\n    async performAIRanking(query, datasetSummaries, language) {\n        const prompt = this.buildRankingPrompt(query, datasetSummaries, language);\n        const response = await this.geminiService.generateText(prompt, undefined, language);\n        // 安全なJSON解析\n        const ranking = (0,_lib_utils_jsonParser__WEBPACK_IMPORTED_MODULE_2__.safeJsonParse)(response, []);\n        if (Array.isArray(ranking) && ranking.length > 0) {\n            // ランキングに基づいてデータセットを並び替え\n            const rankedDatasets = ranking.filter((item)=>typeof item.index === \"number\" && item.index < datasetSummaries.length).map((item)=>datasetSummaries[item.index]);\n            return rankedDatasets;\n        }\n        return datasetSummaries;\n    }\n    buildRankingPrompt(query, datasetSummaries, language) {\n        const prompts = {\n            ja: `\nユーザーの質問: \"${query}\"\n\n以下のデータセットの中から、ユーザーの質問に最も関連性の高いものから順番に並べ替えてください。\n\nデータセット一覧:\n${datasetSummaries.map((dataset, i)=>`${i}. ${dataset.title}\\n説明: ${dataset.description}\\nタグ: ${dataset.tags}\\n組織: ${dataset.organization}`).join(\"\\n\\n\")}\n\n関連度の高い順に並べて、以下のJSON形式で出力してください：\n[\n  {\"index\": 0, \"score\": 0.9, \"reason\": \"理由\"},\n  {\"index\": 2, \"score\": 0.8, \"reason\": \"理由\"}\n]`,\n            en: `\nUser question: \"${query}\"\n\nRank the following datasets by relevance to the user's question:\n\nDatasets:\n${datasetSummaries.map((dataset, i)=>`${i}. ${dataset.title}\\nDescription: ${dataset.description}\\nTags: ${dataset.tags}\\nOrganization: ${dataset.organization}`).join(\"\\n\\n\")}\n\nOutput in JSON format, ordered by relevance:\n[\n  {\"index\": 0, \"score\": 0.9, \"reason\": \"reason\"},\n  {\"index\": 2, \"score\": 0.8, \"reason\": \"reason\"}\n]`\n        };\n        return prompts[language] || prompts.ja;\n    }\n    /**\n   * データセットを処理してOpenDataItemに変換\n   */ async processDataset(dataset, originalQuery, language) {\n        const items = [];\n        try {\n            // データセット概要アイテムを作成\n            const summaryItem = this.createDatasetSummaryItem(dataset, language);\n            items.push(summaryItem);\n            // 処理可能なリソースからデータを取得\n            const processableResources = dataset.resources.filter((resource)=>this.isSupportedFormat(resource.format));\n            for (const resource of processableResources.slice(0, 2)){\n                try {\n                    const resourceItems = await this.processResource(resource, dataset, originalQuery, language);\n                    items.push(...resourceItems);\n                } catch (error) {\n                    _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.warn(\"Failed to process resource\", {\n                        resourceId: resource.id,\n                        format: resource.format,\n                        error: error.message\n                    });\n                }\n            }\n            return items;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.error(\"Failed to process dataset\", error, {\n                datasetId: dataset.id\n            });\n            return [];\n        }\n    }\n    createDatasetSummaryItem(dataset, language) {\n        const category = this.extractCategory(dataset);\n        const tags = dataset.tags.map((tag)=>tag.name);\n        return {\n            id: `${dataset.id}-summary`,\n            title: dataset.title,\n            description: dataset.notes || \"東京都オープンデータ\",\n            category: category,\n            tags: [\n                ...tags,\n                \"東京都\",\n                \"オープンデータ\"\n            ],\n            content: this.generateDatasetSummaryContent(dataset, language),\n            metadata: {\n                source: `東京都オープンデータ: ${dataset.title}`,\n                lastUpdated: new Date(dataset.metadata_modified || dataset.metadata_created),\n                language,\n                datasetId: dataset.id,\n                organization: dataset.organization?.title,\n                license: dataset.license_title\n            }\n        };\n    }\n    generateDatasetSummaryContent(dataset, language) {\n        const templates = {\n            ja: `# ${dataset.title}\n\n## 概要\n${dataset.notes || \"データセットの詳細な説明は提供されていません。\"}\n\n## データセット情報\n- **提供組織**: ${dataset.organization?.title || \"東京都\"}\n- **最終更新**: ${new Date(dataset.metadata_modified || dataset.metadata_created).toLocaleDateString(\"ja-JP\")}\n- **ライセンス**: ${dataset.license_title || \"未指定\"}\n- **タグ**: ${dataset.tags.map((tag)=>tag.name).join(\"、\")}\n\n## 利用可能なリソース\n${dataset.resources.map((resource)=>`- ${resource.name || \"データファイル\"} (${resource.format})`).join(\"\\n\")}\n\n東京都オープンデータポータルより提供されている公式データです。`,\n            en: `# ${dataset.title}\n\n## Overview\n${dataset.notes || \"No detailed description provided for this dataset.\"}\n\n## Dataset Information\n- **Organization**: ${dataset.organization?.title || \"Tokyo Metropolitan Government\"}\n- **Last Updated**: ${new Date(dataset.metadata_modified || dataset.metadata_created).toLocaleDateString(\"en-US\")}\n- **License**: ${dataset.license_title || \"Not specified\"}\n- **Tags**: ${dataset.tags.map((tag)=>tag.name).join(\", \")}\n\n## Available Resources\n${dataset.resources.map((resource)=>`- ${resource.name || \"Data file\"} (${resource.format})`).join(\"\\n\")}\n\nOfficial data provided by Tokyo Open Data Portal.`\n        };\n        return templates[language] || templates.ja;\n    }\n    async processResource(resource, dataset, originalQuery, language) {\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(resource.url, {\n                timeout: 20000,\n                maxContentLength: 10 * 1024 * 1024,\n                headers: {\n                    \"User-Agent\": \"Tokyo-AI-Assistant/1.0\"\n                }\n            });\n            return this.convertResourceDataToItems(response.data, resource, dataset, originalQuery, language);\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.warn(\"Failed to fetch resource data\", {\n                resourceId: resource.id,\n                url: resource.url,\n                error: error.message\n            });\n            return [];\n        }\n    }\n    convertResourceDataToItems(data, resource, dataset, originalQuery, language) {\n        const items = [];\n        try {\n            if (Array.isArray(data) && data.length > 0) {\n                // 配列データの場合、関連性の高いエントリを抽出\n                const relevantEntries = this.findRelevantEntries(data, originalQuery);\n                relevantEntries.slice(0, 3).forEach((entry, index)=>{\n                    const item = this.createResourceEntryItem(entry, resource, dataset, index, language);\n                    items.push(item);\n                });\n            } else if (typeof data === \"object\") {\n                // オブジェクトデータの場合\n                const item = this.createResourceEntryItem(data, resource, dataset, 0, language);\n                items.push(item);\n            }\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.error(\"Failed to convert resource data\", error, {\n                resourceId: resource.id\n            });\n        }\n        return items;\n    }\n    findRelevantEntries(data, query) {\n        const queryWords = query.toLowerCase().split(/\\s+/);\n        return data.map((entry)=>{\n            let score = 0;\n            const entryText = JSON.stringify(entry).toLowerCase();\n            queryWords.forEach((word)=>{\n                if (entryText.includes(word)) {\n                    score += 1;\n                }\n            });\n            return {\n                entry,\n                score\n            };\n        }).filter((item)=>item.score > 0).sort((a, b)=>b.score - a.score).map((item)=>item.entry);\n    }\n    createResourceEntryItem(entry, resource, dataset, index, language) {\n        const title = this.extractEntryTitle(entry, dataset.title);\n        const description = this.extractEntryDescription(entry, resource.description);\n        const content = this.formatEntryContent(entry, language);\n        const category = this.extractCategory(dataset);\n        return {\n            id: `${dataset.id}-${resource.id}-${index}`,\n            title,\n            description,\n            category: category,\n            tags: [\n                ...dataset.tags.map((tag)=>tag.name),\n                \"データエントリ\"\n            ],\n            content,\n            metadata: {\n                source: `東京都オープンデータ: ${dataset.title} - ${resource.name}`,\n                lastUpdated: new Date(resource.last_modified || dataset.metadata_modified),\n                language,\n                datasetId: dataset.id,\n                resourceId: resource.id,\n                organization: dataset.organization?.title\n            }\n        };\n    }\n    extractEntryTitle(entry, datasetTitle) {\n        const titleFields = [\n            \"name\",\n            \"title\",\n            \"名称\",\n            \"施設名\",\n            \"事業名\",\n            \"facility_name\",\n            \"項目名\"\n        ];\n        for (const field of titleFields){\n            if (entry[field] && typeof entry[field] === \"string\") {\n                return `${datasetTitle} - ${entry[field].substring(0, 50)}`;\n            }\n        }\n        // フォールバック\n        const firstStringValue = Object.values(entry).find((value)=>typeof value === \"string\" && value.trim().length > 0);\n        if (firstStringValue) {\n            return `${datasetTitle} - ${firstStringValue.substring(0, 30)}`;\n        }\n        return `${datasetTitle} - データエントリ`;\n    }\n    extractEntryDescription(entry, resourceDescription) {\n        const descFields = [\n            \"description\",\n            \"summary\",\n            \"説明\",\n            \"概要\",\n            \"details\"\n        ];\n        for (const field of descFields){\n            if (entry[field] && typeof entry[field] === \"string\") {\n                return entry[field].substring(0, 200);\n            }\n        }\n        return resourceDescription || \"東京都オープンデータのエントリです。\";\n    }\n    formatEntryContent(entry, language) {\n        const templates = {\n            ja: \"## データ詳細\\n\\n\",\n            en: \"## Data Details\\n\\n\"\n        };\n        let content = templates[language] || templates.ja;\n        Object.entries(entry).forEach(([key, value])=>{\n            if (value !== null && value !== undefined && value !== \"\") {\n                content += `**${key}**: ${value}\\n`;\n            }\n        });\n        return content || \"データエントリの詳細情報\";\n    }\n    extractCategory(dataset) {\n        // グループ情報からカテゴリを推定\n        if (dataset.groups && dataset.groups.length > 0) {\n            return dataset.groups[0].title || dataset.groups[0].name;\n        }\n        // タグからカテゴリを推定\n        const categoryKeywords = {\n            \"子育て\": [\n                \"子育て\",\n                \"保育\",\n                \"育児\",\n                \"児童\"\n            ],\n            \"教育\": [\n                \"教育\",\n                \"学校\",\n                \"学習\"\n            ],\n            \"福祉\": [\n                \"福祉\",\n                \"介護\",\n                \"高齢者\"\n            ],\n            \"環境\": [\n                \"環境\",\n                \"気象\",\n                \"ごみ\"\n            ],\n            \"交通\": [\n                \"交通\",\n                \"道路\",\n                \"電車\"\n            ],\n            \"防災\": [\n                \"防災\",\n                \"災害\",\n                \"避難\"\n            ],\n            \"経済\": [\n                \"経済\",\n                \"産業\",\n                \"企業\"\n            ],\n            \"観光\": [\n                \"観光\",\n                \"文化\",\n                \"イベント\"\n            ]\n        };\n        const tags = dataset.tags.map((tag)=>tag.name).join(\" \");\n        const text = `${dataset.title} ${dataset.notes} ${tags}`.toLowerCase();\n        for (const [category, keywords] of Object.entries(categoryKeywords)){\n            if (keywords.some((keyword)=>text.includes(keyword))) {\n                return category;\n            }\n        }\n        return \"general\";\n    }\n    isSupportedFormat(format) {\n        const supportedFormats = [\n            \"JSON\",\n            \"CSV\",\n            \"TSV\",\n            \"XLS\",\n            \"XLSX\"\n        ];\n        return supportedFormats.includes(format?.toUpperCase());\n    }\n    getFallbackData(query, language) {\n        const templates = {\n            ja: {\n                title: \"お探しの情報について\",\n                description: \"ご質問にお答えできるよう努めます\",\n                content: `申し訳ございませんが、「${query}」に関する具体的なオープンデータが見つかりませんでした。\n\n東京都では9,742件のオープンデータを公開しています。以下の方法でより詳しい情報を得ることができます：\n\n1. **東京都オープンデータカタログ** (https://catalog.data.metro.tokyo.lg.jp/)\n2. **各区市町村の公式ホームページ**\n3. **東京都公式ホームページ** (https://www.metro.tokyo.lg.jp/)\n\nより具体的なキーワードや分野を指定していただければ、関連するデータを見つけやすくなります。`\n            },\n            en: {\n                title: \"About Your Inquiry\",\n                description: \"We strive to answer your questions\",\n                content: `I apologize, but I could not find specific open data related to \"${query}\".\n\nTokyo provides 9,742 open datasets. You can get more detailed information through:\n\n1. **Tokyo Open Data Catalog** (https://catalog.data.metro.tokyo.lg.jp/)\n2. **Official websites of each ward/city/town**\n3. **Tokyo Metropolitan Government Official Website** (https://www.metro.tokyo.lg.jp/)\n\nPlease provide more specific keywords or fields to help find relevant data.`\n            }\n        };\n        const template = templates[language] || templates.ja;\n        return [\n            {\n                id: \"fallback-general\",\n                title: template.title,\n                description: template.description,\n                category: \"general\",\n                tags: [\n                    \"案内\",\n                    \"ヘルプ\"\n                ],\n                content: template.content,\n                metadata: {\n                    source: \"システム\",\n                    lastUpdated: new Date(),\n                    language\n                }\n            }\n        ];\n    }\n    /**\n   * 利用可能なデータソース一覧を取得\n   */ async getAvailableDataSources() {\n        try {\n            const url = `${this.apiBaseUrl}/action/organization_list`;\n            const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(url, {\n                params: {\n                    all_fields: true\n                },\n                timeout: 10000\n            });\n            if (response.data.success && response.data.result) {\n                return response.data.result.map((org)=>({\n                        id: org.name,\n                        title: org.title,\n                        url: `${this.catalogBaseUrl}/organization/${org.name}`,\n                        description: org.description || \"東京都オープンデータ提供組織\",\n                        category: \"organization\",\n                        lastUpdated: new Date(org.created)\n                    }));\n            }\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.error(\"Failed to fetch data sources\", error);\n        }\n        return [\n            {\n                id: \"tokyo-metro\",\n                title: \"東京都\",\n                url: this.catalogBaseUrl,\n                description: \"東京都オープンデータポータル\",\n                category: \"organization\",\n                lastUpdated: new Date()\n            }\n        ];\n    }\n    /**\n   * 特定のカテゴリのデータを検索\n   */ async searchByCategory(category, limit = 20) {\n        const searchParams = {\n            keywords: [],\n            categories: [\n                category\n            ],\n            organizations: [],\n            tags: []\n        };\n        const datasets = await this.searchDatasets(searchParams);\n        const items = [];\n        for (const dataset of datasets.slice(0, Math.min(limit, 10))){\n            try {\n                const datasetItems = await this.processDataset(dataset, category, \"ja\");\n                items.push(...datasetItems);\n            } catch (error) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.warn(\"Failed to process dataset in category search\", {\n                    datasetId: dataset.id,\n                    category,\n                    error: error.message\n                });\n            }\n        }\n        return items;\n    }\n    /**\n   * 統計情報を取得\n   */ async getStats() {\n        try {\n            // 全データセット数を取得\n            const countResponse = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(`${this.apiBaseUrl}/action/package_search`, {\n                params: {\n                    q: \"*:*\",\n                    rows: 0\n                },\n                timeout: 10000\n            });\n            const totalDatasets = countResponse.data.result?.count || 0;\n            // 組織一覧を取得\n            const orgResponse = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(`${this.apiBaseUrl}/action/organization_list`, {\n                params: {\n                    all_fields: true\n                },\n                timeout: 10000\n            });\n            const organizations = orgResponse.data.result?.map((org)=>({\n                    name: org.name,\n                    title: org.title,\n                    count: org.package_count || 0\n                })) || [];\n            return {\n                totalDatasets,\n                categories: [],\n                organizations,\n                lastUpdated: new Date()\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_0__.log.error(\"Failed to get stats\", error);\n            return {\n                totalDatasets: 0,\n                categories: [],\n                organizations: [],\n                lastUpdated: new Date()\n            };\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/TokyoOpenDataService.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/utils/jsonParser.ts":
/*!*************************************!*\
  !*** ./src/lib/utils/jsonParser.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   containsJson: () => (/* binding */ containsJson),\n/* harmony export */   debugJsonParse: () => (/* binding */ debugJsonParse),\n/* harmony export */   parseArraySafely: () => (/* binding */ parseArraySafely),\n/* harmony export */   parseJsonFromResponse: () => (/* binding */ parseJsonFromResponse),\n/* harmony export */   parseWithFallbacks: () => (/* binding */ parseWithFallbacks),\n/* harmony export */   safeJsonParse: () => (/* binding */ safeJsonParse)\n/* harmony export */ });\n/**\n * JSON解析ユーティリティ\n * Gemini APIが返すマークダウン形式のJSONを適切に解析\n */ function parseJsonFromResponse(response) {\n    try {\n        // 1. 直接JSON解析を試行\n        return JSON.parse(response);\n    } catch (firstError) {\n        try {\n            // 2. マークダウンのコードブロックを除去（改良版）\n            let cleanedResponse = response.replace(/```json\\s*/gi, \"\").replace(/```\\s*/g, \"\").replace(/^[\\s\\n\\r]+|[\\s\\n\\r]+$/g, \"\") // 前後の空白・改行除去\n            .trim();\n            return JSON.parse(cleanedResponse);\n        } catch (secondError) {\n            try {\n                // 3. より積極的なクリーニング\n                let normalizedResponse = response.replace(/```json\\s*/gi, \"\").replace(/```\\s*/g, \"\").replace(/^\\s*[\\r\\n]+/gm, \"\") // 空行除去\n                .replace(/\\s+$/gm, \"\") // 行末空白除去\n                .replace(/([^\\\\])`/g, \"$1\") // エスケープされていないバッククォートを除去\n                .trim();\n                return JSON.parse(normalizedResponse);\n            } catch (thirdError) {\n                try {\n                    // 4. 最も外側の {} を探してバランスの取れたJSONを抽出\n                    const jsonStart = response.indexOf(\"{\");\n                    if (jsonStart !== -1) {\n                        let braceCount = 0;\n                        let jsonEnd = jsonStart;\n                        for(let i = jsonStart; i < response.length; i++){\n                            if (response[i] === \"{\") braceCount++;\n                            if (response[i] === \"}\") braceCount--;\n                            if (braceCount === 0) {\n                                jsonEnd = i;\n                                break;\n                            }\n                        }\n                        if (braceCount === 0) {\n                            const extractedJson = response.substring(jsonStart, jsonEnd + 1);\n                            return JSON.parse(extractedJson);\n                        }\n                    }\n                    // 5. 配列の場合も同様に処理\n                    const arrayStart = response.indexOf(\"[\");\n                    if (arrayStart !== -1) {\n                        let bracketCount = 0;\n                        let arrayEnd = arrayStart;\n                        for(let i = arrayStart; i < response.length; i++){\n                            if (response[i] === \"[\") bracketCount++;\n                            if (response[i] === \"]\") bracketCount--;\n                            if (bracketCount === 0) {\n                                arrayEnd = i;\n                                break;\n                            }\n                        }\n                        if (bracketCount === 0) {\n                            const extractedArray = response.substring(arrayStart, arrayEnd + 1);\n                            return JSON.parse(extractedArray);\n                        }\n                    }\n                    throw new Error(\"No valid JSON found in response\");\n                } catch (fourthError) {\n                    // 5. より詳細なエラー情報を提供\n                    console.error(\"Failed to parse JSON response:\", {\n                        originalResponse: response.substring(0, 1000) + (response.length > 1000 ? \"...\" : \"\"),\n                        responseLength: response.length,\n                        hasJsonStart: response.includes(\"{\"),\n                        hasArrayStart: response.includes(\"[\"),\n                        hasCodeBlock: response.includes(\"```\"),\n                        errors: [\n                            firstError.message,\n                            secondError.message,\n                            thirdError.message,\n                            fourthError.message\n                        ]\n                    });\n                    // 6. 最後の手段：基本的な値を返す\n                    return {\n                        error: \"JSON parsing failed\",\n                        originalResponse: response.substring(0, 500) + (response.length > 500 ? \"...\" : \"\"),\n                        fallbackUsed: true\n                    };\n                }\n            }\n        }\n    }\n}\n/**\n * JSON解析の安全なラッパー\n * デフォルト値を提供し、エラーを適切に処理\n */ function safeJsonParse(response, defaultValue) {\n    try {\n        const parsed = parseJsonFromResponse(response);\n        // フォールバックが使用された場合はデフォルト値を返す\n        if (parsed && parsed.fallbackUsed) {\n            return defaultValue;\n        }\n        return parsed;\n    } catch (error) {\n        console.warn(\"Safe JSON parse failed, using default value:\", error);\n        return defaultValue;\n    }\n}\n/**\n * 特定のフィールドに対するフォールバック値を持つ安全な解析\n */ function parseWithFallbacks(response, fallbacks) {\n    try {\n        const parsed = parseJsonFromResponse(response);\n        // 解析されたオブジェクトとフォールバックをマージ\n        return {\n            ...fallbacks,\n            ...parsed\n        };\n    } catch (error) {\n        console.warn(\"JSON parse with fallbacks failed, using fallback values:\", error);\n        return fallbacks;\n    }\n}\n/**\n * 配列を期待する場合の安全な解析\n */ function parseArraySafely(response, defaultArray = []) {\n    try {\n        const parsed = parseJsonFromResponse(response);\n        if (Array.isArray(parsed)) {\n            return parsed;\n        }\n        // オブジェクトの場合、値が配列かチェック\n        if (typeof parsed === \"object\" && parsed !== null) {\n            for (const value of Object.values(parsed)){\n                if (Array.isArray(value)) {\n                    return value;\n                }\n            }\n        }\n        return defaultArray;\n    } catch (error) {\n        console.warn(\"Array parsing failed, using default array:\", error);\n        return defaultArray;\n    }\n}\n/**\n * レスポンスにJSONが含まれているかチェック\n */ function containsJson(response) {\n    // JSON開始文字の存在をチェック\n    const hasJsonStart = response.includes(\"{\") || response.includes(\"[\");\n    // マークダウンコードブロックの存在をチェック\n    const hasCodeBlock = response.includes(\"```json\") || response.includes(\"```\");\n    return hasJsonStart || hasCodeBlock;\n}\n/**\n * デバッグ用：解析失敗時の詳細情報を提供\n */ function debugJsonParse(response) {\n    const errors = [];\n    let parsed = null;\n    let success = false;\n    const cleanedResponse = response.replace(/```json\\s*/gi, \"\").replace(/```\\s*/g, \"\").trim();\n    try {\n        parsed = JSON.parse(response);\n        success = true;\n    } catch (error) {\n        errors.push(`Direct parse: ${error.message}`);\n    }\n    if (!success) {\n        try {\n            parsed = JSON.parse(cleanedResponse);\n            success = true;\n        } catch (error) {\n            errors.push(`Cleaned parse: ${error.message}`);\n        }\n    }\n    return {\n        success,\n        parsed,\n        errors,\n        cleanedResponse\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/utils/jsonParser.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/validation.ts":
/*!*******************************!*\
  !*** ./src/lib/validation.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkRateLimit: () => (/* binding */ checkRateLimit),\n/* harmony export */   cleanupRateLimit: () => (/* binding */ cleanupRateLimit),\n/* harmony export */   sanitizeHtmlContent: () => (/* binding */ sanitizeHtmlContent),\n/* harmony export */   validateAndSanitizeText: () => (/* binding */ validateAndSanitizeText),\n/* harmony export */   validateAudioFile: () => (/* binding */ validateAudioFile),\n/* harmony export */   validateChatRequest: () => (/* binding */ validateChatRequest),\n/* harmony export */   validateLanguage: () => (/* binding */ validateLanguage),\n/* harmony export */   validateLocation: () => (/* binding */ validateLocation),\n/* harmony export */   validateRequestedScope: () => (/* binding */ validateRequestedScope),\n/* harmony export */   validateSessionId: () => (/* binding */ validateSessionId)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"(rsc)/./src/lib/config.ts\");\n\n// Text sanitization and validation\nconst validateAndSanitizeText = (input, fieldName = \"text\")=>{\n    const errors = [];\n    // Check if input exists\n    if (!input || typeof input !== \"string\") {\n        return {\n            isValid: false,\n            errors: [\n                `${fieldName} is required and must be a string`\n            ]\n        };\n    }\n    // Trim whitespace\n    let sanitized = input.trim();\n    // Check length\n    if (sanitized.length === 0) {\n        errors.push(`${fieldName} cannot be empty`);\n    }\n    if (sanitized.length > _config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.validation.maxMessageLength) {\n        errors.push(`${fieldName} exceeds maximum length of ${_config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.validation.maxMessageLength} characters`);\n    }\n    // Remove dangerous characters and patterns\n    // Remove control characters except newline, tab, and carriage return\n    sanitized = sanitized.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]/g, \"\");\n    // Enhanced XSS protection\n    const xssPatterns = [\n        // Script tags (various forms)\n        /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n        /<\\/script>/gi,\n        /<script[^>]*>/gi,\n        // Javascript protocols\n        /javascript:/gi,\n        /vbscript:/gi,\n        /data:text\\/html/gi,\n        // Event handlers\n        /on\\w+\\s*=/gi,\n        // HTML tags that can execute JavaScript\n        /<iframe\\b[^>]*>/gi,\n        /<object\\b[^>]*>/gi,\n        /<embed\\b[^>]*>/gi,\n        /<link\\b[^>]*>/gi,\n        /<meta\\b[^>]*>/gi,\n        /<form\\b[^>]*>/gi,\n        // Style with expression\n        /style\\s*=.*expression\\s*\\(/gi,\n        // HTML entities that might be used for XSS\n        /&\\#x?[0-9a-f]+;?/gi\n    ];\n    let hadXssContent = false;\n    xssPatterns.forEach((pattern)=>{\n        if (pattern.test(sanitized)) {\n            hadXssContent = true;\n            sanitized = sanitized.replace(pattern, \"\");\n        }\n    });\n    if (hadXssContent) {\n        errors.push(`${fieldName} contained potentially malicious content that was removed`);\n    }\n    // Enhanced SQL injection protection\n    const sqlPatterns = [\n        // SQL keywords\n        /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|EXECUTE|UNION|TRUNCATE|GRANT|REVOKE)\\b)/gi,\n        // SQL comments and terminators\n        /(--|\\/\\*|\\*\\/|;)/g,\n        // SQL injection patterns\n        /(\\b(OR|AND)\\s+\\w+\\s*=\\s*\\w+)/gi,\n        /(\\b(OR|AND)\\s+1\\s*=\\s*1)/gi,\n        /(\\b(OR|AND)\\s+\\w+\\s*(LIKE|IN|IS))/gi,\n        // Union-based injection\n        /UNION\\s+SELECT/gi,\n        // Information schema access\n        /information_schema/gi,\n        // System functions\n        /(LOAD_FILE|INTO\\s+OUTFILE|INTO\\s+DUMPFILE)/gi,\n        // Hex encoding patterns\n        /0x[0-9a-f]+/gi\n    ];\n    let hadSqlContent = false;\n    sqlPatterns.forEach((pattern)=>{\n        if (pattern.test(sanitized)) {\n            hadSqlContent = true;\n        }\n    });\n    if (hadSqlContent) {\n        errors.push(`${fieldName} contains potentially dangerous SQL patterns`);\n    }\n    // Path traversal protection\n    const pathTraversalPatterns = [\n        /\\.\\.\\//g,\n        /\\.\\.\\\\/g,\n        /%2e%2e%2f/gi,\n        /%2e%2e%5c/gi,\n        /\\.\\.%2f/gi,\n        /\\.\\.%5c/gi\n    ];\n    let hadPathTraversal = false;\n    pathTraversalPatterns.forEach((pattern)=>{\n        if (pattern.test(sanitized)) {\n            hadPathTraversal = true;\n        }\n    });\n    if (hadPathTraversal) {\n        errors.push(`${fieldName} contains path traversal patterns`);\n    }\n    // LDAP injection protection\n    const ldapPatterns = [\n        /[()\\\\*\\x00]/g\n    ];\n    let hadLdapContent = false;\n    ldapPatterns.forEach((pattern)=>{\n        if (pattern.test(sanitized)) {\n            hadLdapContent = true;\n        }\n    });\n    if (hadLdapContent) {\n        errors.push(`${fieldName} contains LDAP injection patterns`);\n    }\n    // Check for excessive repetition (potential spam)\n    const repeatedPattern = /(.)\\1{20,}/;\n    if (repeatedPattern.test(sanitized)) {\n        errors.push(`${fieldName} contains excessive character repetition`);\n    }\n    // Final safety check: ensure no null bytes or excessive whitespace\n    sanitized = sanitized.replace(/\\0/g, \"\");\n    sanitized = sanitized.replace(/\\s{10,}/g, \" \"); // Replace excessive whitespace\n    // Check for encoded attacks\n    const encodedPatterns = [\n        /%3c/gi,\n        /%3e/gi,\n        /%22/gi,\n        /%27/gi,\n        /%28/gi,\n        /%29/gi,\n        /%3b/gi\n    ];\n    let hadEncodedAttack = false;\n    encodedPatterns.forEach((pattern)=>{\n        if (pattern.test(sanitized)) {\n            hadEncodedAttack = true;\n        }\n    });\n    if (hadEncodedAttack) {\n        errors.push(`${fieldName} contains URL-encoded potentially dangerous content`);\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: errors.length === 0 ? sanitized : undefined\n    };\n};\n// Additional sanitization for HTML content (if needed)\nconst sanitizeHtmlContent = (input)=>{\n    if (!input) return \"\";\n    // Basic HTML entity encoding for dangerous characters\n    const htmlEntities = {\n        \"&\": \"&amp;\",\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\",\n        '\"': \"&quot;\",\n        \"'\": \"&#x27;\",\n        \"/\": \"&#x2F;\"\n    };\n    return input.replace(/[&<>\"'/]/g, (char)=>htmlEntities[char] || char);\n};\n// Session ID validation\nconst validateSessionId = (sessionId)=>{\n    const errors = [];\n    if (!sessionId || typeof sessionId !== \"string\") {\n        return {\n            isValid: false,\n            errors: [\n                \"Session ID is required\"\n            ]\n        };\n    }\n    // Check format (UUID v4 format)\n    const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    if (!uuidPattern.test(sessionId)) {\n        errors.push(\"Invalid session ID format\");\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: sessionId\n    };\n};\n// Language validation\nconst validateLanguage = (language)=>{\n    const supportedLanguages = [\n        \"ja\",\n        \"en\",\n        \"zh\",\n        \"ko\"\n    ];\n    const errors = [];\n    if (!language || typeof language !== \"string\") {\n        return {\n            isValid: false,\n            errors: [\n                \"Language is required\"\n            ]\n        };\n    }\n    const sanitized = language.toLowerCase().trim();\n    if (!supportedLanguages.includes(sanitized)) {\n        errors.push(`Unsupported language: ${language}. Supported languages: ${supportedLanguages.join(\", \")}`);\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: errors.length === 0 ? sanitized : undefined\n    };\n};\n// Audio file validation\nconst validateAudioFile = (file)=>{\n    const errors = [];\n    // Check file size\n    if (file.size > _config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.validation.maxFileSize) {\n        errors.push(`File size exceeds maximum limit of ${_config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.validation.maxFileSize / 1024 / 1024}MB`);\n    }\n    // Check MIME type\n    if (!_config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.validation.allowedAudioTypes.includes(file.type)) {\n        errors.push(`Unsupported audio format: ${file.type}. Allowed formats: ${_config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.validation.allowedAudioTypes.join(\", \")}`);\n    }\n    // Validate base64 data\n    try {\n        const base64Pattern = /^[A-Za-z0-9+/]*={0,2}$/;\n        if (!base64Pattern.test(file.data)) {\n            errors.push(\"Invalid audio data format\");\n        }\n    } catch  {\n        errors.push(\"Invalid audio data\");\n    }\n    return {\n        isValid: errors.length === 0,\n        errors\n    };\n};\n// Request body validation for chat endpoint\nconst validateChatRequest = (body)=>{\n    const errors = [];\n    if (!body || typeof body !== \"object\") {\n        return {\n            isValid: false,\n            errors: [\n                \"Request body is required\"\n            ]\n        };\n    }\n    // Validate message\n    const messageValidation = validateAndSanitizeText(body.message, \"message\");\n    if (!messageValidation.isValid) {\n        errors.push(...messageValidation.errors);\n    }\n    // Validate session ID\n    const sessionValidation = validateSessionId(body.sessionId);\n    if (!sessionValidation.isValid) {\n        errors.push(...sessionValidation.errors);\n    }\n    // Validate language (optional)\n    let languageValidation;\n    if (body.language) {\n        languageValidation = validateLanguage(body.language);\n        if (!languageValidation.isValid) {\n            errors.push(...languageValidation.errors);\n        }\n    }\n    // Validate boolean fields\n    if (body.useVoice !== undefined && typeof body.useVoice !== \"boolean\") {\n        errors.push(\"useVoice must be a boolean\");\n    }\n    // Validate inputType (optional)\n    if (body.inputType !== undefined && ![\n        \"text\",\n        \"voice\"\n    ].includes(body.inputType)) {\n        errors.push('inputType must be either \"text\" or \"voice\"');\n    }\n    // Validate location (optional)\n    let locationValidation;\n    if (body.location) {\n        locationValidation = validateLocation(body.location);\n        if (!locationValidation.isValid) {\n            errors.push(...locationValidation.errors);\n        }\n    }\n    // Validate requestedScope (optional)\n    let scopeValidation;\n    if (body.requestedScope) {\n        scopeValidation = validateRequestedScope(body.requestedScope);\n        if (!scopeValidation.isValid) {\n            errors.push(...scopeValidation.errors);\n        }\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: errors.length === 0 && messageValidation.sanitized && sessionValidation.sanitized ? {\n            message: messageValidation.sanitized,\n            sessionId: sessionValidation.sanitized,\n            language: body.language ? languageValidation?.sanitized || \"ja\" : \"ja\",\n            useVoice: Boolean(body.useVoice),\n            inputType: body.inputType || \"text\",\n            location: locationValidation?.sanitized,\n            requestedScope: scopeValidation?.sanitized\n        } : undefined\n    };\n};\n// Rate limiting check (simple in-memory implementation)\nconst rateLimitStore = new Map();\nconst checkRateLimit = (identifier)=>{\n    const now = Date.now();\n    const windowMs = _config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.rateLimiting.windowMs;\n    const maxRequests = _config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.rateLimiting.maxRequests;\n    const current = rateLimitStore.get(identifier);\n    if (!current || now > current.resetTime) {\n        // First request or window expired\n        rateLimitStore.set(identifier, {\n            count: 1,\n            resetTime: now + windowMs\n        });\n        return {\n            allowed: true\n        };\n    }\n    if (current.count >= maxRequests) {\n        return {\n            allowed: false,\n            retryAfter: Math.ceil((current.resetTime - now) / 1000)\n        };\n    }\n    // Increment counter\n    current.count++;\n    rateLimitStore.set(identifier, current);\n    return {\n        allowed: true\n    };\n};\n// Location validation\nconst validateLocation = (location)=>{\n    const errors = [];\n    if (!location || typeof location !== \"object\") {\n        return {\n            isValid: false,\n            errors: [\n                \"Location must be an object\"\n            ]\n        };\n    }\n    // Validate latitude\n    if (typeof location.latitude !== \"number\") {\n        errors.push(\"Latitude must be a number\");\n    } else if (location.latitude < -90 || location.latitude > 90) {\n        errors.push(\"Latitude must be between -90 and 90 degrees\");\n    }\n    // Validate longitude\n    if (typeof location.longitude !== \"number\") {\n        errors.push(\"Longitude must be a number\");\n    } else if (location.longitude < -180 || location.longitude > 180) {\n        errors.push(\"Longitude must be between -180 and 180 degrees\");\n    }\n    // Validate accuracy (optional)\n    if (location.accuracy !== undefined && (typeof location.accuracy !== \"number\" || location.accuracy < 0)) {\n        errors.push(\"Accuracy must be a positive number\");\n    }\n    // Validate timestamp (optional)\n    if (location.timestamp !== undefined) {\n        try {\n            new Date(location.timestamp);\n        } catch  {\n            errors.push(\"Invalid timestamp format\");\n        }\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: errors.length === 0 ? {\n            latitude: location.latitude,\n            longitude: location.longitude,\n            accuracy: location.accuracy,\n            timestamp: location.timestamp ? new Date(location.timestamp) : undefined\n        } : undefined\n    };\n};\n// Requested scope validation\nconst validateRequestedScope = (scope)=>{\n    const errors = [];\n    if (!scope || typeof scope !== \"object\") {\n        return {\n            isValid: true,\n            errors: []\n        }; // Optional field\n    }\n    const validTimeRanges = [\n        \"today\",\n        \"this_week\",\n        \"this_month\",\n        \"next_month\",\n        \"any\"\n    ];\n    const validLocationRanges = [\n        \"nearby\",\n        \"walking_distance\",\n        \"cycling_distance\",\n        \"city_wide\",\n        \"any\"\n    ];\n    // Validate timeRange (optional)\n    if (scope.timeRange !== undefined && !validTimeRanges.includes(scope.timeRange)) {\n        errors.push(`Invalid timeRange. Must be one of: ${validTimeRanges.join(\", \")}`);\n    }\n    // Validate locationRange (optional)\n    if (scope.locationRange !== undefined && !validLocationRanges.includes(scope.locationRange)) {\n        errors.push(`Invalid locationRange. Must be one of: ${validLocationRanges.join(\", \")}`);\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: errors.length === 0 ? {\n            timeRange: scope.timeRange,\n            locationRange: scope.locationRange\n        } : undefined\n    };\n};\n// Cleanup expired rate limit entries (should be called periodically)\nconst cleanupRateLimit = ()=>{\n    const now = Date.now();\n    for (const [key, value] of rateLimitStore.entries()){\n        if (now > value.resetTime) {\n            rateLimitStore.delete(key);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/validation.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/uuid","vendor-chunks/@redis","vendor-chunks/mime-db","vendor-chunks/axios","vendor-chunks/generic-pool","vendor-chunks/follow-redirects","vendor-chunks/debug","vendor-chunks/form-data","vendor-chunks/get-intrinsic","vendor-chunks/asynckit","vendor-chunks/combined-stream","vendor-chunks/yallist","vendor-chunks/mime-types","vendor-chunks/proxy-from-env","vendor-chunks/cluster-key-slot","vendor-chunks/ms","vendor-chunks/supports-color","vendor-chunks/has-symbols","vendor-chunks/delayed-stream","vendor-chunks/function-bind","vendor-chunks/es-set-tostringtag","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/redis","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/has-flag","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/@google"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();