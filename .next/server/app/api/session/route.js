"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/session/route";
exports.ids = ["app/api/session/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("string_decoder");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsession%2Froute&page=%2Fapi%2Fsession%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsession%2Froute.ts&appDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsession%2Froute&page=%2Fapi%2Fsession%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsession%2Froute.ts&appDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_negishi_Documents_develop_Hackathon_TokyoOpenDataHackathon_src_app_api_session_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/session/route.ts */ \"(rsc)/./src/app/api/session/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/session/route\",\n        pathname: \"/api/session\",\n        filename: \"route\",\n        bundlePath: \"app/api/session/route\"\n    },\n    resolvedPagePath: \"/Users/negishi/Documents/develop/Hackathon/TokyoOpenDataHackathon/src/app/api/session/route.ts\",\n    nextConfigOutput,\n    userland: _Users_negishi_Documents_develop_Hackathon_TokyoOpenDataHackathon_src_app_api_session_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/session/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZzZXNzaW9uJTJGcm91dGUmcGFnZT0lMkZhcGklMkZzZXNzaW9uJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGc2Vzc2lvbiUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRm5lZ2lzaGklMkZEb2N1bWVudHMlMkZkZXZlbG9wJTJGSGFja2F0aG9uJTJGVG9reW9PcGVuRGF0YUhhY2thdGhvbiUyRnNyYyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZuZWdpc2hpJTJGRG9jdW1lbnRzJTJGZGV2ZWxvcCUyRkhhY2thdGhvbiUyRlRva3lvT3BlbkRhdGFIYWNrYXRob24maXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzhDO0FBQzNIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9reW8tb3BlbmRhdGEtaGFja2F0aG9uLz84ZTdkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9uZWdpc2hpL0RvY3VtZW50cy9kZXZlbG9wL0hhY2thdGhvbi9Ub2t5b09wZW5EYXRhSGFja2F0aG9uL3NyYy9hcHAvYXBpL3Nlc3Npb24vcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3Nlc3Npb24vcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9zZXNzaW9uXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9zZXNzaW9uL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL25lZ2lzaGkvRG9jdW1lbnRzL2RldmVsb3AvSGFja2F0aG9uL1Rva3lvT3BlbkRhdGFIYWNrYXRob24vc3JjL2FwcC9hcGkvc2Vzc2lvbi9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvc2Vzc2lvbi9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsession%2Froute&page=%2Fapi%2Fsession%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsession%2Froute.ts&appDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/session/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/session/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services_SessionManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/SessionManager */ \"(rsc)/./src/lib/services/SessionManager.ts\");\n/* harmony import */ var _lib_validation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/validation */ \"(rsc)/./src/lib/validation.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/errors */ \"(rsc)/./src/lib/errors.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/logger */ \"(rsc)/./src/lib/logger.ts\");\n\n\n\n\n\n// Create new session\nasync function POST(request) {\n    const requestId = (0,_lib_logger__WEBPACK_IMPORTED_MODULE_4__.generateRequestId)();\n    const timer = _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.performance(\"Create Session API\", requestId);\n    try {\n        const sessionManager = _lib_services_SessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.getInstance();\n        const body = await request.json().catch(()=>({}));\n        // Get client metadata\n        const clientIP = request.headers.get(\"x-forwarded-for\") || request.headers.get(\"x-real-ip\") || \"unknown\";\n        const userAgent = request.headers.get(\"user-agent\") || \"unknown\";\n        // Determine device type from user agent\n        const deviceType = /Mobile|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent) ? \"mobile\" : /Tablet|iPad/i.test(userAgent) ? \"tablet\" : \"desktop\";\n        // Validate language\n        let language = \"ja\";\n        if (body.language) {\n            const langValidation = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_2__.validateLanguage)(body.language);\n            if (langValidation.isValid) {\n                language = langValidation.sanitized;\n            } else {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.warn(\"Invalid language provided, using default\", {\n                    providedLanguage: body.language,\n                    errors: langValidation.errors\n                }, requestId);\n            }\n        }\n        const sessionId = await sessionManager.createSession(language, {\n            userAgent,\n            ipAddress: clientIP,\n            deviceType\n        });\n        _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.business(\"Session created\", {\n            sessionId: sessionId.substring(0, 8) + \"...\",\n            language,\n            deviceType,\n            clientIP\n        }, requestId);\n        const response = {\n            success: true,\n            data: {\n                sessionId,\n                language\n            }\n        };\n        const duration = timer.end();\n        _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.api(\"POST\", \"/api/session\", 201, duration, requestId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n            status: 201\n        });\n    } catch (error) {\n        const appError = error instanceof _lib_errors__WEBPACK_IMPORTED_MODULE_3__.AppError ? error : _lib_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorFactory.internalError(error);\n        const response = (0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.handleApiError)(appError, \"ja\");\n        const duration = timer.end({\n            error: true\n        });\n        _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.error(\"Session creation failed\", error, {\n            code: appError.code,\n            statusCode: appError.statusCode\n        }, requestId);\n        _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.api(\"POST\", \"/api/session\", appError.statusCode, duration, requestId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n            status: appError.statusCode\n        });\n    }\n}\n// Get session information\nasync function GET(request) {\n    const requestId = (0,_lib_logger__WEBPACK_IMPORTED_MODULE_4__.generateRequestId)();\n    const timer = _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.performance(\"Get Session API\", requestId);\n    try {\n        const sessionManager = _lib_services_SessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.getInstance();\n        const url = new URL(request.url);\n        const sessionId = url.searchParams.get(\"sessionId\");\n        if (!sessionId) {\n            const error = _lib_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorFactory.validationFailed(\"Session ID is required\");\n            const response = (0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.handleApiError)(error, \"ja\");\n            const duration = timer.end();\n            _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.api(\"GET\", \"/api/session\", error.statusCode, duration, requestId);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n                status: error.statusCode\n            });\n        }\n        const session = await sessionManager.getSession(sessionId);\n        if (!session) {\n            const error = _lib_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorFactory.sessionNotFound();\n            const response = (0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.handleApiError)(error, \"ja\");\n            _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.warn(\"Session not found in GET request\", {\n                sessionId: sessionId.substring(0, 8) + \"...\"\n            }, requestId);\n            const duration = timer.end();\n            _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.api(\"GET\", \"/api/session\", error.statusCode, duration, requestId);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n                status: error.statusCode\n            });\n        }\n        const response = {\n            success: true,\n            data: session\n        };\n        const duration = timer.end();\n        _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.api(\"GET\", \"/api/session\", 200, duration, requestId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n            status: 200\n        });\n    } catch (error) {\n        const appError = error instanceof _lib_errors__WEBPACK_IMPORTED_MODULE_3__.AppError ? error : _lib_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorFactory.internalError(error);\n        const response = (0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.handleApiError)(appError, \"ja\");\n        const duration = timer.end({\n            error: true\n        });\n        _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.error(\"Session retrieval failed\", error, {\n            code: appError.code,\n            statusCode: appError.statusCode\n        }, requestId);\n        _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.api(\"GET\", \"/api/session\", appError.statusCode, duration, requestId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n            status: appError.statusCode\n        });\n    }\n}\n// Delete session\nasync function DELETE(request) {\n    const requestId = (0,_lib_logger__WEBPACK_IMPORTED_MODULE_4__.generateRequestId)();\n    const timer = _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.performance(\"Delete Session API\", requestId);\n    try {\n        const sessionManager = _lib_services_SessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.getInstance();\n        const url = new URL(request.url);\n        const sessionId = url.searchParams.get(\"sessionId\");\n        if (!sessionId) {\n            const error = _lib_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorFactory.validationFailed(\"Session ID is required\");\n            const response = (0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.handleApiError)(error, \"ja\");\n            const duration = timer.end();\n            _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.api(\"DELETE\", \"/api/session\", error.statusCode, duration, requestId);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n                status: error.statusCode\n            });\n        }\n        const deleted = await sessionManager.deleteSession(sessionId);\n        if (!deleted) {\n            const error = _lib_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorFactory.sessionNotFound();\n            const response = (0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.handleApiError)(error, \"ja\");\n            _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.warn(\"Session not found for deletion\", {\n                sessionId: sessionId.substring(0, 8) + \"...\"\n            }, requestId);\n            const duration = timer.end();\n            _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.api(\"DELETE\", \"/api/session\", error.statusCode, duration, requestId);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n                status: error.statusCode\n            });\n        }\n        _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.business(\"Session deleted\", {\n            sessionId: sessionId.substring(0, 8) + \"...\"\n        }, requestId);\n        const response = {\n            success: true,\n            data: {\n                deleted: true\n            }\n        };\n        const duration = timer.end();\n        _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.api(\"DELETE\", \"/api/session\", 200, duration, requestId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n            status: 200\n        });\n    } catch (error) {\n        const appError = error instanceof _lib_errors__WEBPACK_IMPORTED_MODULE_3__.AppError ? error : _lib_errors__WEBPACK_IMPORTED_MODULE_3__.ErrorFactory.internalError(error);\n        const response = (0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.handleApiError)(appError, \"ja\");\n        const duration = timer.end({\n            error: true\n        });\n        _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.error(\"Session deletion failed\", error, {\n            code: appError.code,\n            statusCode: appError.statusCode\n        }, requestId);\n        _lib_logger__WEBPACK_IMPORTED_MODULE_4__.log.api(\"DELETE\", \"/api/session\", appError.statusCode, duration, requestId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response, {\n            status: appError.statusCode\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/session/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/config.ts":
/*!***************************!*\
  !*** ./src/lib/config.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   getApiBaseUrl: () => (/* binding */ getApiBaseUrl),\n/* harmony export */   getSecureConfig: () => (/* binding */ getSecureConfig),\n/* harmony export */   isDevelopment: () => (/* binding */ isDevelopment),\n/* harmony export */   isProduction: () => (/* binding */ isProduction),\n/* harmony export */   securityConfig: () => (/* binding */ securityConfig),\n/* harmony export */   validateConfig: () => (/* binding */ validateConfig)\n/* harmony export */ });\n// API Key validation utility\nconst validateApiKey = (key, keyName)=>{\n    if (!key || key.length === 0) {\n        throw new Error(`${keyName} is required but not provided`);\n    }\n    // Check for dummy/placeholder values (更に厳格に)\n    const invalidPatterns = [\n        \"your_key_here\",\n        \"placeholder\",\n        \"dummy\",\n        \"test_key\",\n        \"example\",\n        \"sample\",\n        \"fake\",\n        \"mock\",\n        \"development\",\n        \"dev\",\n        \"localhost\"\n    ];\n    if (invalidPatterns.some((pattern)=>key.toLowerCase().includes(pattern))) {\n        throw new Error(`${keyName} appears to be a placeholder value`);\n    }\n    // Enhanced format validation for Gemini API key\n    if (keyName === \"GEMINI_API_KEY\") {\n        if (!key.startsWith(\"AIza\")) {\n            throw new Error(`${keyName} format is invalid (must start with 'AIza')`);\n        }\n        // Length validation (Gemini API keys are typically 39 characters)\n        if (key.length < 30 || key.length > 50) {\n            throw new Error(`${keyName} length is invalid (expected 30-50 characters)`);\n        }\n        // Character validation (should contain only alphanumeric and specific symbols)\n        if (!/^[A-Za-z0-9_-]+$/.test(key)) {\n            throw new Error(`${keyName} contains invalid characters`);\n        }\n    }\n    // Environment-specific validation\n    if (false) {}\n    return key;\n};\n// Safe configuration loading with validation\nconst loadConfig = ()=>{\n    try {\n        const geminiApiKey = validateApiKey(process.env.GEMINI_API_KEY, \"GEMINI_API_KEY\");\n        return {\n            geminiApiKey,\n            redisUrl: process.env.REDIS_URL,\n            gcpProjectId: process.env.GOOGLE_CLOUD_PROJECT_ID,\n            gcpRegion: process.env.GOOGLE_CLOUD_REGION || \"us-central1\",\n            enableVoice: \"true\" === \"true\",\n            enableMultiLanguage: \"true\" === \"true\",\n            maxSessionDuration: Math.max(60000, parseInt(\"3600000\" || 0)),\n            maxMessagesPerSession: Math.max(1, parseInt(\"50\" || 0)),\n            enableDynamicSearch: process.env.NEXT_PUBLIC_ENABLE_DYNAMIC_SEARCH !== \"false\",\n            tokyoOpenDataCatalogUrl: process.env.TOKYO_OPEN_DATA_CATALOG_URL || \"https://catalog.data.metro.tokyo.lg.jp\",\n            maxConcurrentDatasetRequests: Math.max(1, parseInt(process.env.MAX_CONCURRENT_DATASET_REQUESTS || \"5\"))\n        };\n    } catch (error) {\n        console.error(\"Configuration validation failed:\", error);\n        throw error;\n    }\n};\nconst config = loadConfig();\nconst validateConfig = ()=>{\n    const requiredKeys = [\n        \"geminiApiKey\"\n    ];\n    const missingKeys = requiredKeys.filter((key)=>!config[key]);\n    if (missingKeys.length > 0) {\n        throw new Error(`Missing required configuration: ${missingKeys.join(\", \")}`);\n    }\n    // Additional runtime validation\n    if (config.maxSessionDuration < 60000) {\n        throw new Error(\"maxSessionDuration must be at least 60 seconds\");\n    }\n    if (config.maxMessagesPerSession < 1) {\n        throw new Error(\"maxMessagesPerSession must be at least 1\");\n    }\n    // Security validation\n    if (false) {}\n    console.log(\"✅ Configuration validation passed\");\n};\n// Secure configuration getter - never logs sensitive values\nconst getSecureConfig = ()=>{\n    return {\n        ...config,\n        geminiApiKey: config.geminiApiKey ? \"[REDACTED]\" : \"NOT_SET\",\n        redisUrl: config.redisUrl ? \"[REDACTED]\" : \"NOT_SET\"\n    };\n};\nconst getApiBaseUrl = ()=>{\n    const baseUrl = \"http://localhost:3000\" || 0;\n    // Validate URL format\n    try {\n        new URL(baseUrl);\n        return baseUrl;\n    } catch  {\n        console.warn(`Invalid API base URL: ${baseUrl}, falling back to localhost`);\n        return \"http://localhost:3000\";\n    }\n};\nconst isProduction = ()=>{\n    return \"development\" === \"production\";\n};\nconst isDevelopment = ()=>{\n    return \"development\" === \"development\";\n};\n// Security configuration\nconst securityConfig = {\n    // Rate limiting\n    rateLimiting: {\n        windowMs: 15 * 60 * 1000,\n        maxRequests: isProduction() ? 100 : 1000,\n        skipSuccessfulRequests: false,\n        skipFailedRequests: false\n    },\n    // Input validation\n    validation: {\n        maxMessageLength: 2000,\n        maxFileSize: 10 * 1024 * 1024,\n        allowedAudioTypes: [\n            \"audio/webm\",\n            \"audio/mp3\",\n            \"audio/wav\",\n            \"audio/m4a\"\n        ]\n    },\n    // Session security\n    session: {\n        maxAge: config.maxSessionDuration,\n        httpOnly: true,\n        secure: isProduction(),\n        sameSite: \"strict\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/config.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/errors.ts":
/*!***************************!*\
  !*** ./src/lib/errors.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppError: () => (/* binding */ AppError),\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   ErrorFactory: () => (/* binding */ ErrorFactory),\n/* harmony export */   extractErrorInfo: () => (/* binding */ extractErrorInfo),\n/* harmony export */   handleApiError: () => (/* binding */ handleApiError)\n/* harmony export */ });\n// Standardized error handling system\nvar ErrorCode;\n(function(ErrorCode) {\n    // Authentication & Authorization\n    ErrorCode[\"INVALID_API_KEY\"] = \"INVALID_API_KEY\";\n    ErrorCode[\"RATE_LIMIT_EXCEEDED\"] = \"RATE_LIMIT_EXCEEDED\";\n    // Validation\n    ErrorCode[\"VALIDATION_FAILED\"] = \"VALIDATION_FAILED\";\n    ErrorCode[\"INVALID_INPUT\"] = \"INVALID_INPUT\";\n    ErrorCode[\"INVALID_SESSION\"] = \"INVALID_SESSION\";\n    ErrorCode[\"SESSION_NOT_FOUND\"] = \"SESSION_NOT_FOUND\";\n    // External Services\n    ErrorCode[\"GEMINI_API_ERROR\"] = \"GEMINI_API_ERROR\";\n    ErrorCode[\"GEMINI_QUOTA_EXCEEDED\"] = \"GEMINI_QUOTA_EXCEEDED\";\n    ErrorCode[\"GEMINI_UNAVAILABLE\"] = \"GEMINI_UNAVAILABLE\";\n    // Data & Search\n    ErrorCode[\"SEARCH_FAILED\"] = \"SEARCH_FAILED\";\n    ErrorCode[\"DATA_FETCH_FAILED\"] = \"DATA_FETCH_FAILED\";\n    ErrorCode[\"INDEX_INITIALIZATION_FAILED\"] = \"INDEX_INITIALIZATION_FAILED\";\n    // Audio Processing\n    ErrorCode[\"AUDIO_PROCESSING_FAILED\"] = \"AUDIO_PROCESSING_FAILED\";\n    ErrorCode[\"UNSUPPORTED_AUDIO_FORMAT\"] = \"UNSUPPORTED_AUDIO_FORMAT\";\n    ErrorCode[\"AUDIO_TOO_LARGE\"] = \"AUDIO_TOO_LARGE\";\n    // System\n    ErrorCode[\"INTERNAL_ERROR\"] = \"INTERNAL_ERROR\";\n    ErrorCode[\"SERVICE_UNAVAILABLE\"] = \"SERVICE_UNAVAILABLE\";\n    ErrorCode[\"CONFIGURATION_ERROR\"] = \"CONFIGURATION_ERROR\";\n})(ErrorCode || (ErrorCode = {}));\nclass AppError extends Error {\n    constructor(errorDetails){\n        super(errorDetails.message);\n        this.name = \"AppError\";\n        this.code = errorDetails.code;\n        this.statusCode = errorDetails.statusCode;\n        this.isRetryable = errorDetails.isRetryable;\n        this.details = errorDetails.details;\n        this.userMessage = errorDetails.userMessage;\n        // Maintains proper stack trace for where our error was thrown\n        Error.captureStackTrace(this, AppError);\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            code: this.code,\n            message: this.message,\n            statusCode: this.statusCode,\n            isRetryable: this.isRetryable,\n            details: this.details,\n            stack: this.stack\n        };\n    }\n    getUserMessage(language = \"ja\") {\n        return this.userMessage[language] || this.userMessage.ja || this.message;\n    }\n}\n// Predefined error factories\nconst ErrorFactory = {\n    validationFailed: (details, validationErrors)=>{\n        return new AppError({\n            code: \"VALIDATION_FAILED\",\n            message: `Validation failed: ${details}`,\n            details: validationErrors,\n            statusCode: 400,\n            isRetryable: false,\n            userMessage: {\n                ja: \"入力内容に問題があります。正しい形式で入力してください。\",\n                en: \"There is an issue with your input. Please enter in the correct format.\",\n                zh: \"输入内容有问题。请以正确格式输入。\",\n                ko: \"입력 내용에 문제가 있습니다. 올바른 형식으로 입력해주세요.\"\n            }\n        });\n    },\n    rateLimitExceeded: (retryAfter = 60)=>{\n        return new AppError({\n            code: \"RATE_LIMIT_EXCEEDED\",\n            message: \"Rate limit exceeded\",\n            details: {\n                retryAfter\n            },\n            statusCode: 429,\n            isRetryable: true,\n            userMessage: {\n                ja: \"リクエストが多すぎます。しばらくお待ちください。\",\n                en: \"Too many requests. Please wait a moment.\",\n                zh: \"请求过多。请稍等。\",\n                ko: \"요청이 너무 많습니다. 잠시 기다려 주세요.\"\n            }\n        });\n    },\n    sessionNotFound: ()=>{\n        return new AppError({\n            code: \"SESSION_NOT_FOUND\",\n            message: \"Session not found or expired\",\n            statusCode: 404,\n            isRetryable: false,\n            userMessage: {\n                ja: \"セッションが見つからないか期限切れです。新しいセッションを作成してください。\",\n                en: \"Session not found or expired. Please create a new session.\",\n                zh: \"会话未找到或已过期。请创建新会话。\",\n                ko: \"세션을 찾을 수 없거나 만료되었습니다. 새 세션을 만들어주세요.\"\n            }\n        });\n    },\n    geminiApiError: (originalError)=>{\n        const isQuotaError = originalError?.message?.toLowerCase().includes(\"quota\");\n        const isUnavailable = originalError?.message?.toLowerCase().includes(\"unavailable\");\n        if (isQuotaError) {\n            return new AppError({\n                code: \"GEMINI_QUOTA_EXCEEDED\",\n                message: \"Gemini API quota exceeded\",\n                details: originalError,\n                statusCode: 503,\n                isRetryable: true,\n                userMessage: {\n                    ja: \"AIサービスの利用制限に達しました。しばらく後にお試しください。\",\n                    en: \"AI service usage limit reached. Please try again later.\",\n                    zh: \"AI服务使用限制已达到。请稍后再试。\",\n                    ko: \"AI 서비스 사용 한도에 도달했습니다. 나중에 다시 시도해주세요.\"\n                }\n            });\n        }\n        if (isUnavailable) {\n            return new AppError({\n                code: \"GEMINI_UNAVAILABLE\",\n                message: \"Gemini API temporarily unavailable\",\n                details: originalError,\n                statusCode: 503,\n                isRetryable: true,\n                userMessage: {\n                    ja: \"AIサービスが一時的に利用できません。しばらく後にお試しください。\",\n                    en: \"AI service is temporarily unavailable. Please try again later.\",\n                    zh: \"AI服务暂时不可用。请稍后再试。\",\n                    ko: \"AI 서비스가 일시적으로 사용할 수 없습니다. 나중에 다시 시도해주세요.\"\n                }\n            });\n        }\n        return new AppError({\n            code: \"GEMINI_API_ERROR\",\n            message: \"Gemini API error\",\n            details: originalError,\n            statusCode: 500,\n            isRetryable: false,\n            userMessage: {\n                ja: \"AIサービスでエラーが発生しました。\",\n                en: \"An error occurred with the AI service.\",\n                zh: \"AI服务发生错误。\",\n                ko: \"AI 서비스에서 오류가 발생했습니다.\"\n            }\n        });\n    },\n    searchFailed: (originalError)=>{\n        return new AppError({\n            code: \"SEARCH_FAILED\",\n            message: \"Search operation failed\",\n            details: originalError,\n            statusCode: 500,\n            isRetryable: true,\n            userMessage: {\n                ja: \"検索処理でエラーが発生しました。\",\n                en: \"An error occurred during search.\",\n                zh: \"搜索处理中发生错误。\",\n                ko: \"검색 처리 중 오류가 발생했습니다.\"\n            }\n        });\n    },\n    audioProcessingFailed: (originalError)=>{\n        return new AppError({\n            code: \"AUDIO_PROCESSING_FAILED\",\n            message: \"Audio processing failed\",\n            details: originalError,\n            statusCode: 500,\n            isRetryable: true,\n            userMessage: {\n                ja: \"音声処理でエラーが発生しました。\",\n                en: \"An error occurred during audio processing.\",\n                zh: \"音频处理中发生错误。\",\n                ko: \"음성 처리 중 오류가 발생했습니다.\"\n            }\n        });\n    },\n    internalError: (originalError)=>{\n        return new AppError({\n            code: \"INTERNAL_ERROR\",\n            message: \"Internal server error\",\n            details:  true ? originalError : 0,\n            statusCode: 500,\n            isRetryable: false,\n            userMessage: {\n                ja: \"システムエラーが発生しました。しばらく後にお試しください。\",\n                en: \"A system error occurred. Please try again later.\",\n                zh: \"系统错误。请稍后再试。\",\n                ko: \"시스템 오류가 발생했습니다. 나중에 다시 시도해주세요.\"\n            }\n        });\n    }\n};\n// Error handler for API responses\nconst handleApiError = (error, language = \"ja\")=>{\n    if (error instanceof AppError) {\n        return {\n            success: false,\n            error: error.getUserMessage(language),\n            code: error.code,\n            retryable: error.isRetryable\n        };\n    }\n    // Handle unknown errors\n    const internalError = ErrorFactory.internalError(error);\n    return {\n        success: false,\n        error: internalError.getUserMessage(language),\n        code: internalError.code,\n        retryable: internalError.isRetryable\n    };\n};\n// Utility to safely extract error information\nconst extractErrorInfo = (error)=>{\n    if (error instanceof Error) {\n        return {\n            message: error.message,\n            stack: error.stack,\n            details: error instanceof AppError ? error.details : undefined\n        };\n    }\n    if (typeof error === \"string\") {\n        return {\n            message: error\n        };\n    }\n    if (typeof error === \"object\" && error !== null) {\n        return {\n            message: error.message || \"Unknown error\",\n            details: error\n        };\n    }\n    return {\n        message: \"Unknown error occurred\"\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2Vycm9ycy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHFDQUFxQzs7VUFFekJBO0lBQ1YsaUNBQWlDOzs7SUFJakMsYUFBYTs7Ozs7SUFNYixvQkFBb0I7Ozs7SUFLcEIsZ0JBQWdCOzs7O0lBS2hCLG1CQUFtQjs7OztJQUtuQixTQUFTOzs7O0dBMUJDQSxjQUFBQTtBQXlDTCxNQUFNQyxpQkFBaUJDO0lBTzVCQyxZQUFZQyxZQUEwQixDQUFFO1FBQ3RDLEtBQUssQ0FBQ0EsYUFBYUMsT0FBTztRQUMxQixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHSCxhQUFhRyxJQUFJO1FBQzdCLElBQUksQ0FBQ0MsVUFBVSxHQUFHSixhQUFhSSxVQUFVO1FBQ3pDLElBQUksQ0FBQ0MsV0FBVyxHQUFHTCxhQUFhSyxXQUFXO1FBQzNDLElBQUksQ0FBQ0MsT0FBTyxHQUFHTixhQUFhTSxPQUFPO1FBQ25DLElBQUksQ0FBQ0MsV0FBVyxHQUFHUCxhQUFhTyxXQUFXO1FBRTNDLDhEQUE4RDtRQUM5RFQsTUFBTVUsaUJBQWlCLENBQUMsSUFBSSxFQUFFWDtJQUNoQztJQUVBWSxTQUFTO1FBQ1AsT0FBTztZQUNMUCxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmRixTQUFTLElBQUksQ0FBQ0EsT0FBTztZQUNyQkcsWUFBWSxJQUFJLENBQUNBLFVBQVU7WUFDM0JDLGFBQWEsSUFBSSxDQUFDQSxXQUFXO1lBQzdCQyxTQUFTLElBQUksQ0FBQ0EsT0FBTztZQUNyQkksT0FBTyxJQUFJLENBQUNBLEtBQUs7UUFDbkI7SUFDRjtJQUVBQyxlQUFlQyxXQUFtQixJQUFJLEVBQVU7UUFDOUMsT0FBTyxJQUFJLENBQUNMLFdBQVcsQ0FBQ0ssU0FBUyxJQUFJLElBQUksQ0FBQ0wsV0FBVyxDQUFDTSxFQUFFLElBQUksSUFBSSxDQUFDWixPQUFPO0lBQzFFO0FBQ0Y7QUFFQSw2QkFBNkI7QUFDdEIsTUFBTWEsZUFBZTtJQUMxQkMsa0JBQWtCLENBQUNULFNBQWlCVTtRQUNsQyxPQUFPLElBQUluQixTQUFTO1lBQ2xCTSxJQUFJO1lBQ0pGLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRUssUUFBUSxDQUFDO1lBQ3hDQSxTQUFTVTtZQUNUWixZQUFZO1lBQ1pDLGFBQWE7WUFDYkUsYUFBYTtnQkFDWE0sSUFBSTtnQkFDSkksSUFBSTtnQkFDSkMsSUFBSTtnQkFDSkMsSUFBSTtZQUNOO1FBQ0Y7SUFDRjtJQUVBQyxtQkFBbUIsQ0FBQ0MsYUFBcUIsRUFBRTtRQUN6QyxPQUFPLElBQUl4QixTQUFTO1lBQ2xCTSxJQUFJO1lBQ0pGLFNBQVM7WUFDVEssU0FBUztnQkFBRWU7WUFBVztZQUN0QmpCLFlBQVk7WUFDWkMsYUFBYTtZQUNiRSxhQUFhO2dCQUNYTSxJQUFJO2dCQUNKSSxJQUFJO2dCQUNKQyxJQUFJO2dCQUNKQyxJQUFJO1lBQ047UUFDRjtJQUNGO0lBRUFHLGlCQUFpQjtRQUNmLE9BQU8sSUFBSXpCLFNBQVM7WUFDbEJNLElBQUk7WUFDSkYsU0FBUztZQUNURyxZQUFZO1lBQ1pDLGFBQWE7WUFDYkUsYUFBYTtnQkFDWE0sSUFBSTtnQkFDSkksSUFBSTtnQkFDSkMsSUFBSTtnQkFDSkMsSUFBSTtZQUNOO1FBQ0Y7SUFDRjtJQUVBSSxnQkFBZ0IsQ0FBQ0M7UUFDZixNQUFNQyxlQUFlRCxlQUFldkIsU0FBU3lCLGNBQWNDLFNBQVM7UUFDcEUsTUFBTUMsZ0JBQWdCSixlQUFldkIsU0FBU3lCLGNBQWNDLFNBQVM7UUFFckUsSUFBSUYsY0FBYztZQUNoQixPQUFPLElBQUk1QixTQUFTO2dCQUNsQk0sSUFBSTtnQkFDSkYsU0FBUztnQkFDVEssU0FBU2tCO2dCQUNUcEIsWUFBWTtnQkFDWkMsYUFBYTtnQkFDYkUsYUFBYTtvQkFDWE0sSUFBSTtvQkFDSkksSUFBSTtvQkFDSkMsSUFBSTtvQkFDSkMsSUFBSTtnQkFDTjtZQUNGO1FBQ0Y7UUFFQSxJQUFJUyxlQUFlO1lBQ2pCLE9BQU8sSUFBSS9CLFNBQVM7Z0JBQ2xCTSxJQUFJO2dCQUNKRixTQUFTO2dCQUNUSyxTQUFTa0I7Z0JBQ1RwQixZQUFZO2dCQUNaQyxhQUFhO2dCQUNiRSxhQUFhO29CQUNYTSxJQUFJO29CQUNKSSxJQUFJO29CQUNKQyxJQUFJO29CQUNKQyxJQUFJO2dCQUNOO1lBQ0Y7UUFDRjtRQUVBLE9BQU8sSUFBSXRCLFNBQVM7WUFDbEJNLElBQUk7WUFDSkYsU0FBUztZQUNUSyxTQUFTa0I7WUFDVHBCLFlBQVk7WUFDWkMsYUFBYTtZQUNiRSxhQUFhO2dCQUNYTSxJQUFJO2dCQUNKSSxJQUFJO2dCQUNKQyxJQUFJO2dCQUNKQyxJQUFJO1lBQ047UUFDRjtJQUNGO0lBRUFVLGNBQWMsQ0FBQ0w7UUFDYixPQUFPLElBQUkzQixTQUFTO1lBQ2xCTSxJQUFJO1lBQ0pGLFNBQVM7WUFDVEssU0FBU2tCO1lBQ1RwQixZQUFZO1lBQ1pDLGFBQWE7WUFDYkUsYUFBYTtnQkFDWE0sSUFBSTtnQkFDSkksSUFBSTtnQkFDSkMsSUFBSTtnQkFDSkMsSUFBSTtZQUNOO1FBQ0Y7SUFDRjtJQUVBVyx1QkFBdUIsQ0FBQ047UUFDdEIsT0FBTyxJQUFJM0IsU0FBUztZQUNsQk0sSUFBSTtZQUNKRixTQUFTO1lBQ1RLLFNBQVNrQjtZQUNUcEIsWUFBWTtZQUNaQyxhQUFhO1lBQ2JFLGFBQWE7Z0JBQ1hNLElBQUk7Z0JBQ0pJLElBQUk7Z0JBQ0pDLElBQUk7Z0JBQ0pDLElBQUk7WUFDTjtRQUNGO0lBQ0Y7SUFFQVksZUFBZSxDQUFDUDtRQUNkLE9BQU8sSUFBSTNCLFNBQVM7WUFDbEJNLElBQUk7WUFDSkYsU0FBUztZQUNUSyxTQUFTMEIsS0FBeUIsR0FBZ0JSLGdCQUFnQlMsQ0FBU0E7WUFDM0U3QixZQUFZO1lBQ1pDLGFBQWE7WUFDYkUsYUFBYTtnQkFDWE0sSUFBSTtnQkFDSkksSUFBSTtnQkFDSkMsSUFBSTtnQkFDSkMsSUFBSTtZQUNOO1FBQ0Y7SUFDRjtBQUNGLEVBQUU7QUFFRixrQ0FBa0M7QUFDM0IsTUFBTWUsaUJBQWlCLENBQUNDLE9BQVl2QixXQUFtQixJQUFJO0lBQ2hFLElBQUl1QixpQkFBaUJ0QyxVQUFVO1FBQzdCLE9BQU87WUFDTHVDLFNBQVM7WUFDVEQsT0FBT0EsTUFBTXhCLGNBQWMsQ0FBQ0M7WUFDNUJULE1BQU1nQyxNQUFNaEMsSUFBSTtZQUNoQmtDLFdBQVdGLE1BQU05QixXQUFXO1FBQzlCO0lBQ0Y7SUFFQSx3QkFBd0I7SUFDeEIsTUFBTTBCLGdCQUFnQmpCLGFBQWFpQixhQUFhLENBQUNJO0lBQ2pELE9BQU87UUFDTEMsU0FBUztRQUNURCxPQUFPSixjQUFjcEIsY0FBYyxDQUFDQztRQUNwQ1QsTUFBTTRCLGNBQWM1QixJQUFJO1FBQ3hCa0MsV0FBV04sY0FBYzFCLFdBQVc7SUFDdEM7QUFDRixFQUFFO0FBRUYsOENBQThDO0FBQ3ZDLE1BQU1pQyxtQkFBbUIsQ0FBQ0g7SUFDL0IsSUFBSUEsaUJBQWlCckMsT0FBTztRQUMxQixPQUFPO1lBQ0xHLFNBQVNrQyxNQUFNbEMsT0FBTztZQUN0QlMsT0FBT3lCLE1BQU16QixLQUFLO1lBQ2xCSixTQUFTNkIsaUJBQWlCdEMsV0FBV3NDLE1BQU03QixPQUFPLEdBQUcyQjtRQUN2RDtJQUNGO0lBRUEsSUFBSSxPQUFPRSxVQUFVLFVBQVU7UUFDN0IsT0FBTztZQUFFbEMsU0FBU2tDO1FBQU07SUFDMUI7SUFFQSxJQUFJLE9BQU9BLFVBQVUsWUFBWUEsVUFBVSxNQUFNO1FBQy9DLE9BQU87WUFDTGxDLFNBQVNrQyxNQUFNbEMsT0FBTyxJQUFJO1lBQzFCSyxTQUFTNkI7UUFDWDtJQUNGO0lBRUEsT0FBTztRQUFFbEMsU0FBUztJQUF5QjtBQUM3QyxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9reW8tb3BlbmRhdGEtaGFja2F0aG9uLy4vc3JjL2xpYi9lcnJvcnMudHM/NDUxYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTdGFuZGFyZGl6ZWQgZXJyb3IgaGFuZGxpbmcgc3lzdGVtXG5cbmV4cG9ydCBlbnVtIEVycm9yQ29kZSB7XG4gIC8vIEF1dGhlbnRpY2F0aW9uICYgQXV0aG9yaXphdGlvblxuICBJTlZBTElEX0FQSV9LRVkgPSAnSU5WQUxJRF9BUElfS0VZJyxcbiAgUkFURV9MSU1JVF9FWENFRURFRCA9ICdSQVRFX0xJTUlUX0VYQ0VFREVEJyxcbiAgXG4gIC8vIFZhbGlkYXRpb25cbiAgVkFMSURBVElPTl9GQUlMRUQgPSAnVkFMSURBVElPTl9GQUlMRUQnLFxuICBJTlZBTElEX0lOUFVUID0gJ0lOVkFMSURfSU5QVVQnLFxuICBJTlZBTElEX1NFU1NJT04gPSAnSU5WQUxJRF9TRVNTSU9OJyxcbiAgU0VTU0lPTl9OT1RfRk9VTkQgPSAnU0VTU0lPTl9OT1RfRk9VTkQnLFxuICBcbiAgLy8gRXh0ZXJuYWwgU2VydmljZXNcbiAgR0VNSU5JX0FQSV9FUlJPUiA9ICdHRU1JTklfQVBJX0VSUk9SJyxcbiAgR0VNSU5JX1FVT1RBX0VYQ0VFREVEID0gJ0dFTUlOSV9RVU9UQV9FWENFRURFRCcsXG4gIEdFTUlOSV9VTkFWQUlMQUJMRSA9ICdHRU1JTklfVU5BVkFJTEFCTEUnLFxuICBcbiAgLy8gRGF0YSAmIFNlYXJjaFxuICBTRUFSQ0hfRkFJTEVEID0gJ1NFQVJDSF9GQUlMRUQnLFxuICBEQVRBX0ZFVENIX0ZBSUxFRCA9ICdEQVRBX0ZFVENIX0ZBSUxFRCcsXG4gIElOREVYX0lOSVRJQUxJWkFUSU9OX0ZBSUxFRCA9ICdJTkRFWF9JTklUSUFMSVpBVElPTl9GQUlMRUQnLFxuICBcbiAgLy8gQXVkaW8gUHJvY2Vzc2luZ1xuICBBVURJT19QUk9DRVNTSU5HX0ZBSUxFRCA9ICdBVURJT19QUk9DRVNTSU5HX0ZBSUxFRCcsXG4gIFVOU1VQUE9SVEVEX0FVRElPX0ZPUk1BVCA9ICdVTlNVUFBPUlRFRF9BVURJT19GT1JNQVQnLFxuICBBVURJT19UT09fTEFSR0UgPSAnQVVESU9fVE9PX0xBUkdFJyxcbiAgXG4gIC8vIFN5c3RlbVxuICBJTlRFUk5BTF9FUlJPUiA9ICdJTlRFUk5BTF9FUlJPUicsXG4gIFNFUlZJQ0VfVU5BVkFJTEFCTEUgPSAnU0VSVklDRV9VTkFWQUlMQUJMRScsXG4gIENPTkZJR1VSQVRJT05fRVJST1IgPSAnQ09ORklHVVJBVElPTl9FUlJPUicsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JEZXRhaWxzIHtcbiAgY29kZTogRXJyb3JDb2RlO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGRldGFpbHM/OiBhbnk7XG4gIHN0YXR1c0NvZGU6IG51bWJlcjtcbiAgaXNSZXRyeWFibGU6IGJvb2xlYW47XG4gIHVzZXJNZXNzYWdlOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+OyAvLyBNdWx0aS1sYW5ndWFnZSB1c2VyIG1lc3NhZ2VzXG59XG5cbmV4cG9ydCBjbGFzcyBBcHBFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgcHVibGljIHJlYWRvbmx5IGNvZGU6IEVycm9yQ29kZTtcbiAgcHVibGljIHJlYWRvbmx5IHN0YXR1c0NvZGU6IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IGlzUmV0cnlhYmxlOiBib29sZWFuO1xuICBwdWJsaWMgcmVhZG9ubHkgZGV0YWlscz86IGFueTtcbiAgcHVibGljIHJlYWRvbmx5IHVzZXJNZXNzYWdlOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG4gIGNvbnN0cnVjdG9yKGVycm9yRGV0YWlsczogRXJyb3JEZXRhaWxzKSB7XG4gICAgc3VwZXIoZXJyb3JEZXRhaWxzLm1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdBcHBFcnJvcic7XG4gICAgdGhpcy5jb2RlID0gZXJyb3JEZXRhaWxzLmNvZGU7XG4gICAgdGhpcy5zdGF0dXNDb2RlID0gZXJyb3JEZXRhaWxzLnN0YXR1c0NvZGU7XG4gICAgdGhpcy5pc1JldHJ5YWJsZSA9IGVycm9yRGV0YWlscy5pc1JldHJ5YWJsZTtcbiAgICB0aGlzLmRldGFpbHMgPSBlcnJvckRldGFpbHMuZGV0YWlscztcbiAgICB0aGlzLnVzZXJNZXNzYWdlID0gZXJyb3JEZXRhaWxzLnVzZXJNZXNzYWdlO1xuICAgIFxuICAgIC8vIE1haW50YWlucyBwcm9wZXIgc3RhY2sgdHJhY2UgZm9yIHdoZXJlIG91ciBlcnJvciB3YXMgdGhyb3duXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQXBwRXJyb3IpO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBzdGF0dXNDb2RlOiB0aGlzLnN0YXR1c0NvZGUsXG4gICAgICBpc1JldHJ5YWJsZTogdGhpcy5pc1JldHJ5YWJsZSxcbiAgICAgIGRldGFpbHM6IHRoaXMuZGV0YWlscyxcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgIH07XG4gIH1cblxuICBnZXRVc2VyTWVzc2FnZShsYW5ndWFnZTogc3RyaW5nID0gJ2phJyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudXNlck1lc3NhZ2VbbGFuZ3VhZ2VdIHx8IHRoaXMudXNlck1lc3NhZ2UuamEgfHwgdGhpcy5tZXNzYWdlO1xuICB9XG59XG5cbi8vIFByZWRlZmluZWQgZXJyb3IgZmFjdG9yaWVzXG5leHBvcnQgY29uc3QgRXJyb3JGYWN0b3J5ID0ge1xuICB2YWxpZGF0aW9uRmFpbGVkOiAoZGV0YWlsczogc3RyaW5nLCB2YWxpZGF0aW9uRXJyb3JzPzogc3RyaW5nW10pOiBBcHBFcnJvciA9PiB7XG4gICAgcmV0dXJuIG5ldyBBcHBFcnJvcih7XG4gICAgICBjb2RlOiBFcnJvckNvZGUuVkFMSURBVElPTl9GQUlMRUQsXG4gICAgICBtZXNzYWdlOiBgVmFsaWRhdGlvbiBmYWlsZWQ6ICR7ZGV0YWlsc31gLFxuICAgICAgZGV0YWlsczogdmFsaWRhdGlvbkVycm9ycyxcbiAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgIGlzUmV0cnlhYmxlOiBmYWxzZSxcbiAgICAgIHVzZXJNZXNzYWdlOiB7XG4gICAgICAgIGphOiAn5YWl5Yqb5YaF5a6544Gr5ZWP6aGM44GM44GC44KK44G+44GZ44CC5q2j44GX44GE5b2i5byP44Gn5YWl5Yqb44GX44Gm44GP44Gg44GV44GE44CCJyxcbiAgICAgICAgZW46ICdUaGVyZSBpcyBhbiBpc3N1ZSB3aXRoIHlvdXIgaW5wdXQuIFBsZWFzZSBlbnRlciBpbiB0aGUgY29ycmVjdCBmb3JtYXQuJyxcbiAgICAgICAgemg6ICfovpPlhaXlhoXlrrnmnInpl67popjjgILor7fku6XmraPnoa7moLzlvI/ovpPlhaXjgIInLFxuICAgICAgICBrbzogJ+yeheugpSDrgrTsmqnsl5Ag66y47KCc6rCAIOyeiOyKteuLiOuLpC4g7Jis67CU66W4IO2YleyLneycvOuhnCDsnoXroKXtlbTso7zshLjsmpQuJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG5cbiAgcmF0ZUxpbWl0RXhjZWVkZWQ6IChyZXRyeUFmdGVyOiBudW1iZXIgPSA2MCk6IEFwcEVycm9yID0+IHtcbiAgICByZXR1cm4gbmV3IEFwcEVycm9yKHtcbiAgICAgIGNvZGU6IEVycm9yQ29kZS5SQVRFX0xJTUlUX0VYQ0VFREVELFxuICAgICAgbWVzc2FnZTogJ1JhdGUgbGltaXQgZXhjZWVkZWQnLFxuICAgICAgZGV0YWlsczogeyByZXRyeUFmdGVyIH0sXG4gICAgICBzdGF0dXNDb2RlOiA0MjksXG4gICAgICBpc1JldHJ5YWJsZTogdHJ1ZSxcbiAgICAgIHVzZXJNZXNzYWdlOiB7XG4gICAgICAgIGphOiAn44Oq44Kv44Ko44K544OI44GM5aSa44GZ44GO44G+44GZ44CC44GX44Gw44KJ44GP44GK5b6F44Gh44GP44Gg44GV44GE44CCJyxcbiAgICAgICAgZW46ICdUb28gbWFueSByZXF1ZXN0cy4gUGxlYXNlIHdhaXQgYSBtb21lbnQuJyxcbiAgICAgICAgemg6ICfor7fmsYLov4flpJrjgILor7fnqI3nrYnjgIInLFxuICAgICAgICBrbzogJ+yalOyyreydtCDrhIjrrLQg66eO7Iq164uI64ukLiDsnqDsi5wg6riw64uk66CkIOyjvOyEuOyalC4nLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcblxuICBzZXNzaW9uTm90Rm91bmQ6ICgpOiBBcHBFcnJvciA9PiB7XG4gICAgcmV0dXJuIG5ldyBBcHBFcnJvcih7XG4gICAgICBjb2RlOiBFcnJvckNvZGUuU0VTU0lPTl9OT1RfRk9VTkQsXG4gICAgICBtZXNzYWdlOiAnU2Vzc2lvbiBub3QgZm91bmQgb3IgZXhwaXJlZCcsXG4gICAgICBzdGF0dXNDb2RlOiA0MDQsXG4gICAgICBpc1JldHJ5YWJsZTogZmFsc2UsXG4gICAgICB1c2VyTWVzc2FnZToge1xuICAgICAgICBqYTogJ+OCu+ODg+OCt+ODp+ODs+OBjOimi+OBpOOBi+OCieOBquOBhOOBi+acn+mZkOWIh+OCjOOBp+OBmeOAguaWsOOBl+OBhOOCu+ODg+OCt+ODp+ODs+OCkuS9nOaIkOOBl+OBpuOBj+OBoOOBleOBhOOAgicsXG4gICAgICAgIGVuOiAnU2Vzc2lvbiBub3QgZm91bmQgb3IgZXhwaXJlZC4gUGxlYXNlIGNyZWF0ZSBhIG5ldyBzZXNzaW9uLicsXG4gICAgICAgIHpoOiAn5Lya6K+d5pyq5om+5Yiw5oiW5bey6L+H5pyf44CC6K+35Yib5bu65paw5Lya6K+d44CCJyxcbiAgICAgICAga286ICfshLjshZjsnYQg7LC+7J2EIOyImCDsl4bqsbDrgpgg66eM66OM65CY7JeI7Iq164uI64ukLiDsg4gg7IS47IWY7J2EIOunjOuTpOyWtOyjvOyEuOyalC4nLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcblxuICBnZW1pbmlBcGlFcnJvcjogKG9yaWdpbmFsRXJyb3I6IGFueSk6IEFwcEVycm9yID0+IHtcbiAgICBjb25zdCBpc1F1b3RhRXJyb3IgPSBvcmlnaW5hbEVycm9yPy5tZXNzYWdlPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdxdW90YScpO1xuICAgIGNvbnN0IGlzVW5hdmFpbGFibGUgPSBvcmlnaW5hbEVycm9yPy5tZXNzYWdlPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCd1bmF2YWlsYWJsZScpO1xuICAgIFxuICAgIGlmIChpc1F1b3RhRXJyb3IpIHtcbiAgICAgIHJldHVybiBuZXcgQXBwRXJyb3Ioe1xuICAgICAgICBjb2RlOiBFcnJvckNvZGUuR0VNSU5JX1FVT1RBX0VYQ0VFREVELFxuICAgICAgICBtZXNzYWdlOiAnR2VtaW5pIEFQSSBxdW90YSBleGNlZWRlZCcsXG4gICAgICAgIGRldGFpbHM6IG9yaWdpbmFsRXJyb3IsXG4gICAgICAgIHN0YXR1c0NvZGU6IDUwMyxcbiAgICAgICAgaXNSZXRyeWFibGU6IHRydWUsXG4gICAgICAgIHVzZXJNZXNzYWdlOiB7XG4gICAgICAgICAgamE6ICdBSeOCteODvOODk+OCueOBruWIqeeUqOWItumZkOOBq+mBlOOBl+OBvuOBl+OBn+OAguOBl+OBsOOCieOBj+W+jOOBq+OBiuippuOBl+OBj+OBoOOBleOBhOOAgicsXG4gICAgICAgICAgZW46ICdBSSBzZXJ2aWNlIHVzYWdlIGxpbWl0IHJlYWNoZWQuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyxcbiAgICAgICAgICB6aDogJ0FJ5pyN5Yqh5L2/55So6ZmQ5Yi25bey6L6+5Yiw44CC6K+356iN5ZCO5YaN6K+V44CCJyxcbiAgICAgICAgICBrbzogJ0FJIOyEnOu5hOyKpCDsgqzsmqkg7ZWc64+E7JeQIOuPhOuLrO2WiOyKteuLiOuLpC4g64KY7KSR7JeQIOuLpOyLnCDsi5zrj4TtlbTso7zshLjsmpQuJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBpZiAoaXNVbmF2YWlsYWJsZSkge1xuICAgICAgcmV0dXJuIG5ldyBBcHBFcnJvcih7XG4gICAgICAgIGNvZGU6IEVycm9yQ29kZS5HRU1JTklfVU5BVkFJTEFCTEUsXG4gICAgICAgIG1lc3NhZ2U6ICdHZW1pbmkgQVBJIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlJyxcbiAgICAgICAgZGV0YWlsczogb3JpZ2luYWxFcnJvcixcbiAgICAgICAgc3RhdHVzQ29kZTogNTAzLFxuICAgICAgICBpc1JldHJ5YWJsZTogdHJ1ZSxcbiAgICAgICAgdXNlck1lc3NhZ2U6IHtcbiAgICAgICAgICBqYTogJ0FJ44K144O844OT44K544GM5LiA5pmC55qE44Gr5Yip55So44Gn44GN44G+44Gb44KT44CC44GX44Gw44KJ44GP5b6M44Gr44GK6Kmm44GX44GP44Gg44GV44GE44CCJyxcbiAgICAgICAgICBlbjogJ0FJIHNlcnZpY2UgaXMgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyxcbiAgICAgICAgICB6aDogJ0FJ5pyN5Yqh5pqC5pe25LiN5Y+v55So44CC6K+356iN5ZCO5YaN6K+V44CCJyxcbiAgICAgICAgICBrbzogJ0FJIOyEnOu5hOyKpOqwgCDsnbzsi5zsoIHsnLzroZwg7IKs7Jqp7ZWgIOyImCDsl4bsirXri4jri6QuIOuCmOykkeyXkCDri6Tsi5wg7Iuc64+E7ZW07KO87IS47JqULicsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIG5ldyBBcHBFcnJvcih7XG4gICAgICBjb2RlOiBFcnJvckNvZGUuR0VNSU5JX0FQSV9FUlJPUixcbiAgICAgIG1lc3NhZ2U6ICdHZW1pbmkgQVBJIGVycm9yJyxcbiAgICAgIGRldGFpbHM6IG9yaWdpbmFsRXJyb3IsXG4gICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICBpc1JldHJ5YWJsZTogZmFsc2UsXG4gICAgICB1c2VyTWVzc2FnZToge1xuICAgICAgICBqYTogJ0FJ44K144O844OT44K544Gn44Ko44Op44O844GM55m655Sf44GX44G+44GX44Gf44CCJyxcbiAgICAgICAgZW46ICdBbiBlcnJvciBvY2N1cnJlZCB3aXRoIHRoZSBBSSBzZXJ2aWNlLicsXG4gICAgICAgIHpoOiAnQUnmnI3liqHlj5HnlJ/plJnor6/jgIInLFxuICAgICAgICBrbzogJ0FJIOyEnOu5hOyKpOyXkOyEnCDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLicsXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuXG4gIHNlYXJjaEZhaWxlZDogKG9yaWdpbmFsRXJyb3I6IGFueSk6IEFwcEVycm9yID0+IHtcbiAgICByZXR1cm4gbmV3IEFwcEVycm9yKHtcbiAgICAgIGNvZGU6IEVycm9yQ29kZS5TRUFSQ0hfRkFJTEVELFxuICAgICAgbWVzc2FnZTogJ1NlYXJjaCBvcGVyYXRpb24gZmFpbGVkJyxcbiAgICAgIGRldGFpbHM6IG9yaWdpbmFsRXJyb3IsXG4gICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICBpc1JldHJ5YWJsZTogdHJ1ZSxcbiAgICAgIHVzZXJNZXNzYWdlOiB7XG4gICAgICAgIGphOiAn5qSc57Si5Yem55CG44Gn44Ko44Op44O844GM55m655Sf44GX44G+44GX44Gf44CCJyxcbiAgICAgICAgZW46ICdBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgc2VhcmNoLicsXG4gICAgICAgIHpoOiAn5pCc57Si5aSE55CG5Lit5Y+R55Sf6ZSZ6K+v44CCJyxcbiAgICAgICAga286ICfqsoDsg4kg7LKY66asIOykkSDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLicsXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuXG4gIGF1ZGlvUHJvY2Vzc2luZ0ZhaWxlZDogKG9yaWdpbmFsRXJyb3I6IGFueSk6IEFwcEVycm9yID0+IHtcbiAgICByZXR1cm4gbmV3IEFwcEVycm9yKHtcbiAgICAgIGNvZGU6IEVycm9yQ29kZS5BVURJT19QUk9DRVNTSU5HX0ZBSUxFRCxcbiAgICAgIG1lc3NhZ2U6ICdBdWRpbyBwcm9jZXNzaW5nIGZhaWxlZCcsXG4gICAgICBkZXRhaWxzOiBvcmlnaW5hbEVycm9yLFxuICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgaXNSZXRyeWFibGU6IHRydWUsXG4gICAgICB1c2VyTWVzc2FnZToge1xuICAgICAgICBqYTogJ+mfs+WjsOWHpueQhuOBp+OCqOODqeODvOOBjOeZuueUn+OBl+OBvuOBl+OBn+OAgicsXG4gICAgICAgIGVuOiAnQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGF1ZGlvIHByb2Nlc3NpbmcuJyxcbiAgICAgICAgemg6ICfpn7PpopHlpITnkIbkuK3lj5HnlJ/plJnor6/jgIInLFxuICAgICAgICBrbzogJ+ydjOyEsSDsspjrpqwg7KSRIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG5cbiAgaW50ZXJuYWxFcnJvcjogKG9yaWdpbmFsRXJyb3I6IGFueSk6IEFwcEVycm9yID0+IHtcbiAgICByZXR1cm4gbmV3IEFwcEVycm9yKHtcbiAgICAgIGNvZGU6IEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUixcbiAgICAgIG1lc3NhZ2U6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgZGV0YWlsczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyBvcmlnaW5hbEVycm9yIDogdW5kZWZpbmVkLFxuICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgaXNSZXRyeWFibGU6IGZhbHNlLFxuICAgICAgdXNlck1lc3NhZ2U6IHtcbiAgICAgICAgamE6ICfjgrfjgrnjg4bjg6Djgqjjg6njg7zjgYznmbrnlJ/jgZfjgb7jgZfjgZ/jgILjgZfjgbDjgonjgY/lvozjgavjgYroqabjgZfjgY/jgaDjgZXjgYTjgIInLFxuICAgICAgICBlbjogJ0Egc3lzdGVtIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicsXG4gICAgICAgIHpoOiAn57O757uf6ZSZ6K+v44CC6K+356iN5ZCO5YaN6K+V44CCJyxcbiAgICAgICAga286ICfsi5zsiqTthZwg7Jik66WY6rCAIOuwnOyDne2WiOyKteuLiOuLpC4g64KY7KSR7JeQIOuLpOyLnCDsi5zrj4TtlbTso7zshLjsmpQuJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG59O1xuXG4vLyBFcnJvciBoYW5kbGVyIGZvciBBUEkgcmVzcG9uc2VzXG5leHBvcnQgY29uc3QgaGFuZGxlQXBpRXJyb3IgPSAoZXJyb3I6IGFueSwgbGFuZ3VhZ2U6IHN0cmluZyA9ICdqYScpID0+IHtcbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgQXBwRXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IuZ2V0VXNlck1lc3NhZ2UobGFuZ3VhZ2UpLFxuICAgICAgY29kZTogZXJyb3IuY29kZSxcbiAgICAgIHJldHJ5YWJsZTogZXJyb3IuaXNSZXRyeWFibGUsXG4gICAgfTtcbiAgfVxuICBcbiAgLy8gSGFuZGxlIHVua25vd24gZXJyb3JzXG4gIGNvbnN0IGludGVybmFsRXJyb3IgPSBFcnJvckZhY3RvcnkuaW50ZXJuYWxFcnJvcihlcnJvcik7XG4gIHJldHVybiB7XG4gICAgc3VjY2VzczogZmFsc2UsXG4gICAgZXJyb3I6IGludGVybmFsRXJyb3IuZ2V0VXNlck1lc3NhZ2UobGFuZ3VhZ2UpLFxuICAgIGNvZGU6IGludGVybmFsRXJyb3IuY29kZSxcbiAgICByZXRyeWFibGU6IGludGVybmFsRXJyb3IuaXNSZXRyeWFibGUsXG4gIH07XG59O1xuXG4vLyBVdGlsaXR5IHRvIHNhZmVseSBleHRyYWN0IGVycm9yIGluZm9ybWF0aW9uXG5leHBvcnQgY29uc3QgZXh0cmFjdEVycm9ySW5mbyA9IChlcnJvcjogYW55KTogeyBtZXNzYWdlOiBzdHJpbmc7IHN0YWNrPzogc3RyaW5nOyBkZXRhaWxzPzogYW55IH0gPT4ge1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgc3RhY2s6IGVycm9yLnN0YWNrLFxuICAgICAgZGV0YWlsczogZXJyb3IgaW5zdGFuY2VvZiBBcHBFcnJvciA/IGVycm9yLmRldGFpbHMgOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgfVxuICBcbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4geyBtZXNzYWdlOiBlcnJvciB9O1xuICB9XG4gIFxuICBpZiAodHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiBlcnJvciAhPT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIHx8ICdVbmtub3duIGVycm9yJyxcbiAgICAgIGRldGFpbHM6IGVycm9yLFxuICAgIH07XG4gIH1cbiAgXG4gIHJldHVybiB7IG1lc3NhZ2U6ICdVbmtub3duIGVycm9yIG9jY3VycmVkJyB9O1xufTsiXSwibmFtZXMiOlsiRXJyb3JDb2RlIiwiQXBwRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiZXJyb3JEZXRhaWxzIiwibWVzc2FnZSIsIm5hbWUiLCJjb2RlIiwic3RhdHVzQ29kZSIsImlzUmV0cnlhYmxlIiwiZGV0YWlscyIsInVzZXJNZXNzYWdlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ0b0pTT04iLCJzdGFjayIsImdldFVzZXJNZXNzYWdlIiwibGFuZ3VhZ2UiLCJqYSIsIkVycm9yRmFjdG9yeSIsInZhbGlkYXRpb25GYWlsZWQiLCJ2YWxpZGF0aW9uRXJyb3JzIiwiZW4iLCJ6aCIsImtvIiwicmF0ZUxpbWl0RXhjZWVkZWQiLCJyZXRyeUFmdGVyIiwic2Vzc2lvbk5vdEZvdW5kIiwiZ2VtaW5pQXBpRXJyb3IiLCJvcmlnaW5hbEVycm9yIiwiaXNRdW90YUVycm9yIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImlzVW5hdmFpbGFibGUiLCJzZWFyY2hGYWlsZWQiLCJhdWRpb1Byb2Nlc3NpbmdGYWlsZWQiLCJpbnRlcm5hbEVycm9yIiwicHJvY2VzcyIsInVuZGVmaW5lZCIsImhhbmRsZUFwaUVycm9yIiwiZXJyb3IiLCJzdWNjZXNzIiwicmV0cnlhYmxlIiwiZXh0cmFjdEVycm9ySW5mbyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/errors.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/logger.ts":
/*!***************************!*\
  !*** ./src/lib/logger.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   PerformanceTimer: () => (/* binding */ PerformanceTimer),\n/* harmony export */   generateRequestId: () => (/* binding */ generateRequestId),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n// Enhanced logging system with multiple levels and structured logging\nvar LogLevel;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n    LogLevel[LogLevel[\"FATAL\"] = 4] = \"FATAL\";\n})(LogLevel || (LogLevel = {}));\nclass Logger {\n    constructor(){\n        this.logs = [];\n        this.maxLogHistory = 1000;\n        this.minLevel = this.getLogLevel();\n    }\n    getLogLevel() {\n        const level = process.env.LOG_LEVEL?.toUpperCase() || \"INFO\";\n        switch(level){\n            case \"DEBUG\":\n                return 0;\n            case \"INFO\":\n                return 1;\n            case \"WARN\":\n                return 2;\n            case \"ERROR\":\n                return 3;\n            case \"FATAL\":\n                return 4;\n            default:\n                return 1;\n        }\n    }\n    shouldLog(level) {\n        return level >= this.minLevel;\n    }\n    formatMessage(entry) {\n        const timestamp = entry.timestamp.toISOString();\n        const level = LogLevel[entry.level].padEnd(5);\n        const context = entry.context ? ` | Context: ${JSON.stringify(entry.context)}` : \"\";\n        const requestId = entry.requestId ? ` | RequestID: ${entry.requestId}` : \"\";\n        const performance = entry.performance?.duration ? ` | Duration: ${entry.performance.duration}ms` : \"\";\n        return `[${timestamp}] ${level} | ${entry.message}${context}${requestId}${performance}`;\n    }\n    writeLog(entry) {\n        if (!this.shouldLog(entry.level)) {\n            return;\n        }\n        const formattedMessage = this.formatMessage(entry);\n        // Console output\n        switch(entry.level){\n            case 0:\n                console.debug(formattedMessage);\n                break;\n            case 1:\n                console.info(formattedMessage);\n                break;\n            case 2:\n                console.warn(formattedMessage);\n                break;\n            case 3:\n            case 4:\n                console.error(formattedMessage);\n                if (entry.error) {\n                    console.error(\"Stack trace:\", entry.error.stack);\n                }\n                break;\n        }\n        // Store in memory (for debugging and monitoring)\n        this.logs.push(entry);\n        if (this.logs.length > this.maxLogHistory) {\n            this.logs = this.logs.slice(-this.maxLogHistory);\n        }\n    }\n    debug(message, context, requestId) {\n        this.writeLog({\n            level: 0,\n            message,\n            timestamp: new Date(),\n            context,\n            requestId\n        });\n    }\n    info(message, context, requestId) {\n        this.writeLog({\n            level: 1,\n            message,\n            timestamp: new Date(),\n            context,\n            requestId\n        });\n    }\n    warn(message, context, requestId) {\n        this.writeLog({\n            level: 2,\n            message,\n            timestamp: new Date(),\n            context,\n            requestId\n        });\n    }\n    error(message, error, context, requestId) {\n        this.writeLog({\n            level: 3,\n            message,\n            timestamp: new Date(),\n            error,\n            context,\n            requestId\n        });\n    }\n    fatal(message, error, context, requestId) {\n        this.writeLog({\n            level: 4,\n            message,\n            timestamp: new Date(),\n            error,\n            context,\n            requestId\n        });\n    }\n    // Performance logging\n    performance(message, duration, context, requestId) {\n        this.writeLog({\n            level: 1,\n            message,\n            timestamp: new Date(),\n            context,\n            requestId,\n            performance: {\n                duration,\n                memory: process.memoryUsage()\n            }\n        });\n    }\n    // API request logging\n    apiRequest(method, path, statusCode, duration, requestId) {\n        const level = statusCode >= 400 ? 3 : 1;\n        this.writeLog({\n            level,\n            message: `API ${method} ${path} - ${statusCode}`,\n            timestamp: new Date(),\n            context: {\n                method,\n                path,\n                statusCode,\n                type: \"api_request\"\n            },\n            requestId,\n            performance: {\n                duration\n            }\n        });\n    }\n    // Security logging\n    security(event, details, requestId) {\n        this.writeLog({\n            level: 2,\n            message: `Security Event: ${event}`,\n            timestamp: new Date(),\n            context: {\n                ...details,\n                type: \"security_event\"\n            },\n            requestId\n        });\n    }\n    // Business logic logging\n    business(event, details, requestId) {\n        this.writeLog({\n            level: 1,\n            message: `Business Event: ${event}`,\n            timestamp: new Date(),\n            context: {\n                ...details,\n                type: \"business_event\"\n            },\n            requestId\n        });\n    }\n    // Get recent logs for debugging\n    getRecentLogs(count = 100) {\n        return this.logs.slice(-count);\n    }\n    // Get logs by level\n    getLogsByLevel(level, count = 100) {\n        return this.logs.filter((log)=>log.level === level).slice(-count);\n    }\n    // Get logs by time range\n    getLogsByTimeRange(from, to) {\n        return this.logs.filter((log)=>log.timestamp >= from && log.timestamp <= to);\n    }\n    // Clear logs\n    clearLogs() {\n        this.logs = [];\n        this.info(\"Log history cleared\");\n    }\n    // Get statistics\n    getStats() {\n        const logCounts = {};\n        for (const log of this.logs){\n            const levelName = LogLevel[log.level];\n            logCounts[levelName] = (logCounts[levelName] || 0) + 1;\n        }\n        return {\n            totalLogs: this.logs.length,\n            logCounts,\n            oldestLog: this.logs.length > 0 ? this.logs[0].timestamp : undefined,\n            newestLog: this.logs.length > 0 ? this.logs[this.logs.length - 1].timestamp : undefined\n        };\n    }\n}\n// Create singleton logger instance\nconst logger = new Logger();\n// Performance measurement utility\nclass PerformanceTimer {\n    constructor(name, requestId){\n        this.name = name;\n        this.requestId = requestId;\n        this.startTime = Date.now();\n    }\n    end(context) {\n        const duration = Date.now() - this.startTime;\n        logger.performance(`${this.name} completed`, duration, context, this.requestId);\n        return duration;\n    }\n}\n// Request ID generator\nconst generateRequestId = ()=>{\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n};\n// Export singleton logger\n\n// Convenience functions\nconst log = {\n    debug: (message, context, requestId)=>logger.debug(message, context, requestId),\n    info: (message, context, requestId)=>logger.info(message, context, requestId),\n    warn: (message, context, requestId)=>logger.warn(message, context, requestId),\n    error: (message, error, context, requestId)=>logger.error(message, error, context, requestId),\n    fatal: (message, error, context, requestId)=>logger.fatal(message, error, context, requestId),\n    performance: (name, requestId)=>new PerformanceTimer(name, requestId),\n    api: (method, path, statusCode, duration, requestId)=>logger.apiRequest(method, path, statusCode, duration, requestId),\n    security: (event, details, requestId)=>logger.security(event, details, requestId),\n    business: (event, details, requestId)=>logger.business(event, details, requestId)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/logger.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/RedisService.ts":
/*!******************************************!*\
  !*** ./src/lib/services/RedisService.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedisService: () => (/* binding */ RedisService),\n/* harmony export */   getRedisService: () => (/* binding */ getRedisService)\n/* harmony export */ });\n/* harmony import */ var redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redis */ \"(rsc)/./node_modules/redis/dist/index.js\");\n/* harmony import */ var redis__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(redis__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/config */ \"(rsc)/./src/lib/config.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/logger */ \"(rsc)/./src/lib/logger.ts\");\n\n\n\nclass RedisService {\n    constructor(){\n        this.client = null;\n        this.isConnected = false;\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 5;\n        // Check if Redis is explicitly disabled\n        if (process.env.DISABLE_REDIS === \"true\") {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.info(\"Redis explicitly disabled via DISABLE_REDIS environment variable\");\n            return;\n        }\n        // Only initialize Redis if configured or in production\n        if (_lib_config__WEBPACK_IMPORTED_MODULE_1__.config.redisUrl || !(0,_lib_config__WEBPACK_IMPORTED_MODULE_1__.isDevelopment)()) {\n            this.initializeClient();\n        } else {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.info(\"Redis URL not configured in development, using memory storage only\");\n        }\n    }\n    async initializeClient() {\n        try {\n            // Skip initialization if in development and no Redis URL provided\n            if (!_lib_config__WEBPACK_IMPORTED_MODULE_1__.config.redisUrl && (0,_lib_config__WEBPACK_IMPORTED_MODULE_1__.isDevelopment)()) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.info(\"Development mode: Redis URL not configured, skipping Redis initialization\");\n                return;\n            }\n            if (!_lib_config__WEBPACK_IMPORTED_MODULE_1__.config.redisUrl && !(0,_lib_config__WEBPACK_IMPORTED_MODULE_1__.isDevelopment)()) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"Production mode: Redis URL not configured, falling back to memory storage\");\n                return;\n            }\n            // Redis client configuration\n            const clientOptions = _lib_config__WEBPACK_IMPORTED_MODULE_1__.config.redisUrl ? {\n                url: _lib_config__WEBPACK_IMPORTED_MODULE_1__.config.redisUrl,\n                socket: {\n                    connectTimeout: 10000,\n                    lazyConnect: true,\n                    reconnectStrategy: (retries)=>{\n                        if (retries >= this.maxReconnectAttempts) {\n                            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Redis max reconnection attempts reached\");\n                            return false;\n                        }\n                        const delay = Math.min(retries * 50, 500);\n                        _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Redis reconnecting in ${delay}ms (attempt ${retries + 1})`);\n                        return delay;\n                    }\n                }\n            } : {\n                // Local development fallback\n                socket: {\n                    host: \"localhost\",\n                    port: 6379,\n                    connectTimeout: 5000,\n                    lazyConnect: true\n                }\n            };\n            this.client = (0,redis__WEBPACK_IMPORTED_MODULE_0__.createClient)(clientOptions);\n            // Error handling\n            this.client.on(\"error\", (err)=>{\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Redis client error\", err);\n                this.isConnected = false;\n            });\n            this.client.on(\"connect\", ()=>{\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.info(\"Redis client connected\");\n                this.isConnected = true;\n                this.reconnectAttempts = 0;\n            });\n            this.client.on(\"disconnect\", ()=>{\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"Redis client disconnected\");\n                this.isConnected = false;\n            });\n            this.client.on(\"reconnecting\", ()=>{\n                this.reconnectAttempts++;\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.info(`Redis client reconnecting (attempt ${this.reconnectAttempts})`);\n            });\n            // Connect to Redis\n            await this.client.connect();\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to initialize Redis client\", error);\n            this.client = null;\n            this.isConnected = false;\n        }\n    }\n    getKey(prefix, id) {\n        return `tokyo-ai:${prefix}:${id}`;\n    }\n    async isReady() {\n        if (!this.client) return false;\n        try {\n            await this.client.ping();\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    // Session Management\n    async setSession(sessionId, sessionData, ttl = 3600) {\n        if (!this.client || !this.isConnected) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"Redis not available for session storage\");\n            return false;\n        }\n        try {\n            const key = this.getKey(\"session\", sessionId);\n            const data = JSON.stringify({\n                ...sessionData,\n                updatedAt: new Date().toISOString()\n            });\n            await this.client.setEx(key, ttl, data);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Session stored in Redis\", {\n                sessionId,\n                ttl\n            });\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to store session in Redis\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    async getSession(sessionId) {\n        if (!this.client || !this.isConnected) {\n            return null;\n        }\n        try {\n            const key = this.getKey(\"session\", sessionId);\n            const data = await this.client.get(key);\n            if (!data) {\n                return null;\n            }\n            const sessionData = JSON.parse(data);\n            // Update last activity\n            sessionData.lastActivity = new Date();\n            await this.setSession(sessionId, sessionData);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Session retrieved from Redis\", {\n                sessionId\n            });\n            return sessionData;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to retrieve session from Redis\", error, {\n                sessionId\n            });\n            return null;\n        }\n    }\n    async deleteSession(sessionId) {\n        if (!this.client || !this.isConnected) {\n            return false;\n        }\n        try {\n            const sessionKey = this.getKey(\"session\", sessionId);\n            const messagesKey = this.getKey(\"messages\", sessionId);\n            await Promise.all([\n                this.client.del(sessionKey),\n                this.client.del(messagesKey)\n            ]);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Session deleted from Redis\", {\n                sessionId\n            });\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to delete session from Redis\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    // Message Storage\n    async addMessage(sessionId, message) {\n        if (!this.client || !this.isConnected) {\n            return false;\n        }\n        try {\n            const key = this.getKey(\"messages\", sessionId);\n            const messageData = JSON.stringify(message);\n            // Add to list and set expiration\n            await this.client.rPush(key, messageData);\n            await this.client.expire(key, 86400); // 24 hours\n            // Keep only last 100 messages\n            await this.client.lTrim(key, -100, -1);\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Message added to Redis\", {\n                sessionId,\n                messageId: message.id\n            });\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to add message to Redis\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    async getMessages(sessionId, limit = 50) {\n        if (!this.client || !this.isConnected) {\n            return [];\n        }\n        try {\n            const key = this.getKey(\"messages\", sessionId);\n            const messages = await this.client.lRange(key, -limit, -1);\n            return messages.map((data)=>JSON.parse(data));\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to retrieve messages from Redis\", error, {\n                sessionId\n            });\n            return [];\n        }\n    }\n    // Cache Management\n    async setCache(key, value, ttl = 300) {\n        if (!this.client || !this.isConnected) {\n            return false;\n        }\n        try {\n            const cacheKey = this.getKey(\"cache\", key);\n            const data = JSON.stringify({\n                value,\n                timestamp: new Date().toISOString()\n            });\n            await this.client.setEx(cacheKey, ttl, data);\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to set cache in Redis\", error, {\n                key\n            });\n            return false;\n        }\n    }\n    async getCache(key) {\n        if (!this.client || !this.isConnected) {\n            return null;\n        }\n        try {\n            const cacheKey = this.getKey(\"cache\", key);\n            const data = await this.client.get(cacheKey);\n            if (!data) {\n                return null;\n            }\n            const cached = JSON.parse(data);\n            return cached.value;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to get cache from Redis\", error, {\n                key\n            });\n            return null;\n        }\n    }\n    async deleteCache(key) {\n        if (!this.client || !this.isConnected) {\n            return false;\n        }\n        try {\n            const cacheKey = this.getKey(\"cache\", key);\n            await this.client.del(cacheKey);\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to delete cache from Redis\", error, {\n                key\n            });\n            return false;\n        }\n    }\n    // Rate Limiting\n    async checkRateLimit(identifier, windowSeconds, maxRequests) {\n        if (!this.client || !this.isConnected) {\n            // Fallback to allowing request if Redis is not available\n            return {\n                allowed: true,\n                remaining: maxRequests - 1,\n                resetTime: Date.now() + windowSeconds * 1000\n            };\n        }\n        try {\n            const key = this.getKey(\"ratelimit\", identifier);\n            const now = Date.now();\n            const windowStart = now - windowSeconds * 1000;\n            // Remove old entries and count current requests\n            await this.client.zRemRangeByScore(key, 0, windowStart);\n            const currentCount = await this.client.zCard(key);\n            if (currentCount >= maxRequests) {\n                const oldestEntry = await this.client.zRangeWithScores(key, 0, 0);\n                const resetTime = oldestEntry.length > 0 ? Number(oldestEntry[0].score) + windowSeconds * 1000 : now + windowSeconds * 1000;\n                return {\n                    allowed: false,\n                    remaining: 0,\n                    resetTime\n                };\n            }\n            // Add current request\n            await this.client.zAdd(key, {\n                score: now,\n                value: `${now}-${Math.random()}`\n            });\n            await this.client.expire(key, windowSeconds);\n            return {\n                allowed: true,\n                remaining: maxRequests - currentCount - 1,\n                resetTime: now + windowSeconds * 1000\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Rate limit check failed in Redis\", error, {\n                identifier\n            });\n            // Fallback to allowing request\n            return {\n                allowed: true,\n                remaining: maxRequests - 1,\n                resetTime: Date.now() + windowSeconds * 1000\n            };\n        }\n    }\n    // Statistics\n    async getStats() {\n        if (!this.client || !this.isConnected) {\n            return {\n                connected: false\n            };\n        }\n        try {\n            const info = await this.client.info();\n            const keyCount = await this.client.dbSize();\n            // Parse info for relevant stats\n            const memoryMatch = info.match(/used_memory_human:([^\\r\\n]+)/);\n            const clientsMatch = info.match(/connected_clients:(\\d+)/);\n            return {\n                connected: true,\n                memoryUsage: memoryMatch ? memoryMatch[1].trim() : \"unknown\",\n                connectedClients: clientsMatch ? parseInt(clientsMatch[1]) : 0,\n                totalKeys: keyCount\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Failed to get Redis stats\", error);\n            return {\n                connected: false\n            };\n        }\n    }\n    // Cleanup\n    async cleanup() {\n        if (this.client) {\n            try {\n                await this.client.quit();\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.info(\"Redis client disconnected gracefully\");\n            } catch (error) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Error during Redis cleanup\", error);\n            }\n            this.client = null;\n            this.isConnected = false;\n        }\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            if (!this.client || !this.isConnected) {\n                return false;\n            }\n            const pong = await this.client.ping();\n            return pong === \"PONG\";\n        } catch  {\n            return false;\n        }\n    }\n}\n// Singleton instance\nlet redisServiceInstance = null;\nconst getRedisService = ()=>{\n    if (!redisServiceInstance) {\n        redisServiceInstance = new RedisService();\n    }\n    return redisServiceInstance;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/RedisService.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/services/SessionManager.ts":
/*!********************************************!*\
  !*** ./src/lib/services/SessionManager.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SessionManager: () => (/* binding */ SessionManager)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _RedisService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RedisService */ \"(rsc)/./src/lib/services/RedisService.ts\");\n/* harmony import */ var _lib_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/logger */ \"(rsc)/./src/lib/logger.ts\");\n/* harmony import */ var _lib_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/config */ \"(rsc)/./src/lib/config.ts\");\n\n\n\n\n// Global storage that persists across hot reloads in development\nconst globalForSessions = globalThis;\nclass SessionManager {\n    constructor(){\n        this.redisService = (0,_RedisService__WEBPACK_IMPORTED_MODULE_0__.getRedisService)();\n        this.cleanupInterval = null;\n        this.gcInterval = null;\n        this.MAX_MEMORY_SESSIONS = 10000 // メモリ内セッション数の上限\n        ;\n        this.MAX_MESSAGES_PER_SESSION = 100 // セッションごとのメッセージ数上限\n        ;\n        // Use global storage in development to persist across hot reloads\n        if (true) {\n            if (!globalForSessions.memorySessions) {\n                globalForSessions.memorySessions = new Map();\n                globalForSessions.memoryMessages = new Map();\n                _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.info(\"Initialized global session storage for development\");\n            }\n            this.memorySessions = globalForSessions.memorySessions;\n            this.memoryMessages = globalForSessions.memoryMessages;\n            // Only start cleanup if not already started\n            if (!globalForSessions.cleanupInterval) {\n                this.startCleanupProcess();\n            }\n        } else {}\n    }\n    static getInstance() {\n        if (!SessionManager.instance) {\n            SessionManager.instance = new SessionManager();\n        }\n        return SessionManager.instance;\n    }\n    startCleanupProcess() {\n        // Clean up expired sessions more frequently (every 10 minutes)\n        const interval = setInterval(()=>{\n            this.cleanupExpiredSessions();\n        }, 10 * 60 * 1000);\n        // Store interval reference globally in development\n        if (true) {\n            globalForSessions.cleanupInterval = interval;\n        } else {}\n        // Force garbage collection periodically in production\n        if (false) {}\n    }\n    async cleanupExpiredSessions() {\n        const now = new Date();\n        const expiredSessions = [];\n        const oldSessions = [];\n        // Check memory sessions\n        for (const [sessionId, session] of this.memorySessions.entries()){\n            const timeSinceActivity = now.getTime() - session.lastActivity.getTime();\n            if (timeSinceActivity > _lib_config__WEBPACK_IMPORTED_MODULE_2__.config.maxSessionDuration) {\n                expiredSessions.push(sessionId);\n            } else {\n                oldSessions.push({\n                    sessionId,\n                    lastActivity: timeSinceActivity\n                });\n            }\n        }\n        // Memory pressure management: remove oldest sessions if over limit\n        if (this.memorySessions.size > this.MAX_MEMORY_SESSIONS) {\n            oldSessions.sort((a, b)=>b.lastActivity - a.lastActivity);\n            const sessionsToRemove = oldSessions.slice(this.MAX_MEMORY_SESSIONS - expiredSessions.length);\n            for (const { sessionId } of sessionsToRemove){\n                expiredSessions.push(sessionId);\n                _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.warn(`Removing session due to memory pressure: ${sessionId.substring(0, 8)}...`);\n            }\n        }\n        // Clean up expired sessions in batches to avoid blocking\n        const batchSize = 50;\n        for(let i = 0; i < expiredSessions.length; i += batchSize){\n            const batch = expiredSessions.slice(i, i + batchSize);\n            await Promise.all(batch.map((sessionId)=>this.deleteSession(sessionId)));\n            // Allow event loop to process other tasks\n            if (i + batchSize < expiredSessions.length) {\n                await new Promise((resolve)=>setImmediate(resolve));\n            }\n        }\n        // Clean up orphaned messages (messages without corresponding sessions)\n        const orphanedMessageSessions = [];\n        for (const sessionId of this.memoryMessages.keys()){\n            if (!this.memorySessions.has(sessionId)) {\n                orphanedMessageSessions.push(sessionId);\n            }\n        }\n        for (const sessionId of orphanedMessageSessions){\n            this.memoryMessages.delete(sessionId);\n        }\n        if (expiredSessions.length > 0 || orphanedMessageSessions.length > 0) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.info(`Cleaned up ${expiredSessions.length} expired sessions and ${orphanedMessageSessions.length} orphaned message sets. Memory usage: ${this.memorySessions.size} sessions, ${this.memoryMessages.size} message sets`);\n        }\n    }\n    async createSession(language = \"ja\", metadata) {\n        const sessionId = (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n        const now = new Date();\n        const sessionData = {\n            id: sessionId,\n            language,\n            createdAt: now,\n            lastActivity: now,\n            messageCount: 0,\n            isActive: true,\n            metadata: metadata || {}\n        };\n        try {\n            // Try to store in Redis first\n            const redisStored = await this.redisService.setSession(sessionId, sessionData, Math.floor(_lib_config__WEBPACK_IMPORTED_MODULE_2__.config.maxSessionDuration / 1000));\n            if (!redisStored) {\n                // Fallback to memory storage\n                this.memorySessions.set(sessionId, sessionData);\n                this.memoryMessages.set(sessionId, []);\n                _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.warn(\"Session stored in memory (Redis unavailable)\", {\n                    sessionId\n                });\n                // Verify storage\n                const stored = this.memorySessions.get(sessionId);\n                _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.info(\"Session memory storage verified\", {\n                    sessionId: sessionId.substring(0, 8) + \"...\",\n                    stored: !!stored,\n                    totalSessions: this.memorySessions.size,\n                    isDevelopment: \"development\" === \"development\",\n                    usingGlobalStorage:  true && this.memorySessions === globalForSessions.memorySessions\n                });\n            }\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.info(\"Session created\", {\n                sessionId: sessionId.substring(0, 8) + \"...\",\n                language,\n                storage: redisStored ? \"redis\" : \"memory\"\n            });\n            return sessionId;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to create session\", error, {\n                sessionId\n            });\n            throw new Error(\"Failed to create session\");\n        }\n    }\n    async getSession(sessionId) {\n        if (!sessionId) {\n            return null;\n        }\n        try {\n            // Try Redis first\n            let sessionData = await this.redisService.getSession(sessionId);\n            if (!sessionData) {\n                // Fallback to memory storage\n                sessionData = this.memorySessions.get(sessionId) || null;\n                if (sessionData) {\n                    // Update last activity\n                    sessionData.lastActivity = new Date();\n                    this.memorySessions.set(sessionId, sessionData);\n                } else {\n                    _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.warn(\"Session not found in memory storage\", {\n                        sessionId: sessionId.substring(0, 8) + \"...\",\n                        totalSessionsInMemory: this.memorySessions.size,\n                        availableSessionIds: Array.from(this.memorySessions.keys()).map((id)=>id.substring(0, 8) + \"...\"),\n                        isDevelopment: \"development\" === \"development\",\n                        usingGlobalStorage:  true && this.memorySessions === globalForSessions.memorySessions,\n                        globalSessionCount:  true ? globalForSessions.memorySessions?.size : 0\n                    });\n                }\n            }\n            if (!sessionData) {\n                return null;\n            }\n            // Check if session is expired\n            const now = new Date();\n            const lastActivity = new Date(sessionData.lastActivity);\n            const timeSinceActivity = now.getTime() - lastActivity.getTime();\n            if (timeSinceActivity > _lib_config__WEBPACK_IMPORTED_MODULE_2__.config.maxSessionDuration) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.warn(\"Session expired\", {\n                    sessionId: sessionId.substring(0, 8) + \"...\",\n                    timeSinceActivity,\n                    maxDuration: _lib_config__WEBPACK_IMPORTED_MODULE_2__.config.maxSessionDuration\n                });\n                await this.deleteSession(sessionId);\n                return null;\n            }\n            return sessionData;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to retrieve session\", error, {\n                sessionId\n            });\n            return null;\n        }\n    }\n    async updateSession(sessionId, updates) {\n        try {\n            const existingSession = await this.getSession(sessionId);\n            if (!existingSession) {\n                return false;\n            }\n            const updatedSession = {\n                ...existingSession,\n                ...updates,\n                lastActivity: new Date()\n            };\n            // Try Redis first\n            const redisUpdated = await this.redisService.setSession(sessionId, updatedSession, Math.floor(_lib_config__WEBPACK_IMPORTED_MODULE_2__.config.maxSessionDuration / 1000));\n            if (!redisUpdated) {\n                // Fallback to memory storage\n                this.memorySessions.set(sessionId, updatedSession);\n            }\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to update session\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    async deleteSession(sessionId) {\n        try {\n            // Delete from Redis\n            const redisDeleted = await this.redisService.deleteSession(sessionId);\n            // Delete from memory\n            const memoryDeleted = this.memorySessions.delete(sessionId);\n            this.memoryMessages.delete(sessionId);\n            if (redisDeleted || memoryDeleted) {\n                _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.info(\"Session deleted\", {\n                    sessionId: sessionId.substring(0, 8) + \"...\"\n                });\n                return true;\n            }\n            return false;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to delete session\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    async addMessage(sessionId, message) {\n        try {\n            // Try Redis first\n            const redisAdded = await this.redisService.addMessage(sessionId, message);\n            if (!redisAdded) {\n                // Fallback to memory storage\n                if (!this.memoryMessages.has(sessionId)) {\n                    this.memoryMessages.set(sessionId, []);\n                }\n                const messages = this.memoryMessages.get(sessionId);\n                messages.push(message);\n                // Keep only last MAX_MESSAGES_PER_SESSION messages\n                if (messages.length > this.MAX_MESSAGES_PER_SESSION) {\n                    messages.splice(0, messages.length - this.MAX_MESSAGES_PER_SESSION);\n                }\n            }\n            // Update session message count and last activity\n            await this.updateSession(sessionId, {\n                messageCount: (await this.getMessages(sessionId)).length\n            });\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to add message to session\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    async getMessages(sessionId, limit = 50) {\n        try {\n            // Try Redis first\n            let messages = await this.redisService.getMessages(sessionId, limit);\n            if (messages.length === 0) {\n                // Fallback to memory storage\n                const memoryMessages = this.memoryMessages.get(sessionId) || [];\n                messages = memoryMessages.slice(-limit);\n            }\n            // Convert timestamp strings back to Date objects if needed\n            return messages.map((message)=>({\n                    ...message,\n                    timestamp: new Date(message.timestamp)\n                }));\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to retrieve messages\", error, {\n                sessionId\n            });\n            return [];\n        }\n    }\n    async clearMessages(sessionId) {\n        try {\n            const session = await this.getSession(sessionId);\n            if (!session) {\n                return false;\n            }\n            // Clear from Redis\n            await this.redisService.deleteCache(`messages:${sessionId}`);\n            // Clear from memory\n            this.memoryMessages.set(sessionId, []);\n            // Update session\n            await this.updateSession(sessionId, {\n                messageCount: 0\n            });\n            return true;\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to clear messages\", error, {\n                sessionId\n            });\n            return false;\n        }\n    }\n    async getSessionStats() {\n        try {\n            const memorySessionCount = this.memorySessions.size;\n            const redisStats = await this.redisService.getStats();\n            const redisSessionCount = redisStats.totalKeys ? Math.floor(redisStats.totalKeys / 2) : 0;\n            // Language distribution from memory sessions\n            const languageDistribution = {\n                ja: 0,\n                en: 0,\n                zh: 0,\n                ko: 0\n            };\n            let totalMessages = 0;\n            for (const [sessionId, session] of this.memorySessions.entries()){\n                languageDistribution[session.language]++;\n                totalMessages += this.memoryMessages.get(sessionId)?.length || 0;\n            }\n            const totalSessions = memorySessionCount + redisSessionCount;\n            const averageMessagesPerSession = totalSessions > 0 ? totalMessages / totalSessions : 0;\n            return {\n                totalActiveSessions: totalSessions,\n                memorySessionCount,\n                redisSessionCount,\n                averageMessagesPerSession: Number(averageMessagesPerSession.toFixed(2)),\n                languageDistribution\n            };\n        } catch (error) {\n            _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to get session stats\", error);\n            return {\n                totalActiveSessions: 0,\n                memorySessionCount: 0,\n                redisSessionCount: 0,\n                averageMessagesPerSession: 0,\n                languageDistribution: {\n                    ja: 0,\n                    en: 0,\n                    zh: 0,\n                    ko: 0\n                }\n            };\n        }\n    }\n    async isSessionActive(sessionId) {\n        const session = await this.getSession(sessionId);\n        return session !== null && session.isActive;\n    }\n    async setSessionLanguage(sessionId, language) {\n        return this.updateSession(sessionId, {\n            language\n        });\n    }\n    // Legacy methods for backwards compatibility\n    getSessionCount() {\n        return this.memorySessions.size;\n    }\n    getAllSessions() {\n        return Array.from(this.memorySessions.values());\n    }\n    async cleanup() {\n        // Clear cleanup intervals\n        if (this.cleanupInterval) {\n            clearInterval(this.cleanupInterval);\n            this.cleanupInterval = null;\n        }\n        if (this.gcInterval) {\n            clearInterval(this.gcInterval);\n            this.gcInterval = null;\n        }\n        // Clear global cleanup interval in development\n        if ( true && globalForSessions.cleanupInterval) {\n            clearInterval(globalForSessions.cleanupInterval);\n            globalForSessions.cleanupInterval = null;\n        }\n        // Clear memory storage\n        this.memorySessions.clear();\n        this.memoryMessages.clear();\n        // Clear global storage in development\n        if (true) {\n            globalForSessions.memorySessions?.clear();\n            globalForSessions.memoryMessages?.clear();\n        }\n        // Cleanup Redis service\n        await this.redisService.cleanup();\n        _lib_logger__WEBPACK_IMPORTED_MODULE_1__.log.info(\"SessionManager cleanup completed\");\n    }\n    // Memory usage monitoring\n    getMemoryUsage() {\n        const sessionCount = this.memorySessions.size;\n        const messageSetCount = this.memoryMessages.size;\n        // Rough estimation: each session ~1KB, each message ~0.5KB\n        let totalMessages = 0;\n        for (const messages of this.memoryMessages.values()){\n            totalMessages += messages.length;\n        }\n        const estimatedMemoryMB = Math.round((sessionCount * 1 + totalMessages * 0.5) / 1024);\n        const isNearLimit = sessionCount > this.MAX_MEMORY_SESSIONS * 0.8;\n        return {\n            sessionCount,\n            messageSetCount,\n            estimatedMemoryMB,\n            isNearLimit\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/services/SessionManager.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/validation.ts":
/*!*******************************!*\
  !*** ./src/lib/validation.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkRateLimit: () => (/* binding */ checkRateLimit),\n/* harmony export */   cleanupRateLimit: () => (/* binding */ cleanupRateLimit),\n/* harmony export */   sanitizeHtmlContent: () => (/* binding */ sanitizeHtmlContent),\n/* harmony export */   validateAndSanitizeText: () => (/* binding */ validateAndSanitizeText),\n/* harmony export */   validateAudioFile: () => (/* binding */ validateAudioFile),\n/* harmony export */   validateChatRequest: () => (/* binding */ validateChatRequest),\n/* harmony export */   validateLanguage: () => (/* binding */ validateLanguage),\n/* harmony export */   validateLocation: () => (/* binding */ validateLocation),\n/* harmony export */   validateRequestedScope: () => (/* binding */ validateRequestedScope),\n/* harmony export */   validateSessionId: () => (/* binding */ validateSessionId)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"(rsc)/./src/lib/config.ts\");\n\n// Text sanitization and validation\nconst validateAndSanitizeText = (input, fieldName = \"text\")=>{\n    const errors = [];\n    // Check if input exists\n    if (!input || typeof input !== \"string\") {\n        return {\n            isValid: false,\n            errors: [\n                `${fieldName} is required and must be a string`\n            ]\n        };\n    }\n    // Trim whitespace\n    let sanitized = input.trim();\n    // Check length\n    if (sanitized.length === 0) {\n        errors.push(`${fieldName} cannot be empty`);\n    }\n    if (sanitized.length > _config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.validation.maxMessageLength) {\n        errors.push(`${fieldName} exceeds maximum length of ${_config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.validation.maxMessageLength} characters`);\n    }\n    // Remove dangerous characters and patterns\n    // Remove control characters except newline, tab, and carriage return\n    sanitized = sanitized.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]/g, \"\");\n    // Enhanced XSS protection\n    const xssPatterns = [\n        // Script tags (various forms)\n        /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n        /<\\/script>/gi,\n        /<script[^>]*>/gi,\n        // Javascript protocols\n        /javascript:/gi,\n        /vbscript:/gi,\n        /data:text\\/html/gi,\n        // Event handlers\n        /on\\w+\\s*=/gi,\n        // HTML tags that can execute JavaScript\n        /<iframe\\b[^>]*>/gi,\n        /<object\\b[^>]*>/gi,\n        /<embed\\b[^>]*>/gi,\n        /<link\\b[^>]*>/gi,\n        /<meta\\b[^>]*>/gi,\n        /<form\\b[^>]*>/gi,\n        // Style with expression\n        /style\\s*=.*expression\\s*\\(/gi,\n        // HTML entities that might be used for XSS\n        /&\\#x?[0-9a-f]+;?/gi\n    ];\n    let hadXssContent = false;\n    xssPatterns.forEach((pattern)=>{\n        if (pattern.test(sanitized)) {\n            hadXssContent = true;\n            sanitized = sanitized.replace(pattern, \"\");\n        }\n    });\n    if (hadXssContent) {\n        errors.push(`${fieldName} contained potentially malicious content that was removed`);\n    }\n    // Enhanced SQL injection protection\n    const sqlPatterns = [\n        // SQL keywords\n        /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|EXECUTE|UNION|TRUNCATE|GRANT|REVOKE)\\b)/gi,\n        // SQL comments and terminators\n        /(--|\\/\\*|\\*\\/|;)/g,\n        // SQL injection patterns\n        /(\\b(OR|AND)\\s+\\w+\\s*=\\s*\\w+)/gi,\n        /(\\b(OR|AND)\\s+1\\s*=\\s*1)/gi,\n        /(\\b(OR|AND)\\s+\\w+\\s*(LIKE|IN|IS))/gi,\n        // Union-based injection\n        /UNION\\s+SELECT/gi,\n        // Information schema access\n        /information_schema/gi,\n        // System functions\n        /(LOAD_FILE|INTO\\s+OUTFILE|INTO\\s+DUMPFILE)/gi,\n        // Hex encoding patterns\n        /0x[0-9a-f]+/gi\n    ];\n    let hadSqlContent = false;\n    sqlPatterns.forEach((pattern)=>{\n        if (pattern.test(sanitized)) {\n            hadSqlContent = true;\n        }\n    });\n    if (hadSqlContent) {\n        errors.push(`${fieldName} contains potentially dangerous SQL patterns`);\n    }\n    // Path traversal protection\n    const pathTraversalPatterns = [\n        /\\.\\.\\//g,\n        /\\.\\.\\\\/g,\n        /%2e%2e%2f/gi,\n        /%2e%2e%5c/gi,\n        /\\.\\.%2f/gi,\n        /\\.\\.%5c/gi\n    ];\n    let hadPathTraversal = false;\n    pathTraversalPatterns.forEach((pattern)=>{\n        if (pattern.test(sanitized)) {\n            hadPathTraversal = true;\n        }\n    });\n    if (hadPathTraversal) {\n        errors.push(`${fieldName} contains path traversal patterns`);\n    }\n    // LDAP injection protection\n    const ldapPatterns = [\n        /[()\\\\*\\x00]/g\n    ];\n    let hadLdapContent = false;\n    ldapPatterns.forEach((pattern)=>{\n        if (pattern.test(sanitized)) {\n            hadLdapContent = true;\n        }\n    });\n    if (hadLdapContent) {\n        errors.push(`${fieldName} contains LDAP injection patterns`);\n    }\n    // Check for excessive repetition (potential spam)\n    const repeatedPattern = /(.)\\1{20,}/;\n    if (repeatedPattern.test(sanitized)) {\n        errors.push(`${fieldName} contains excessive character repetition`);\n    }\n    // Final safety check: ensure no null bytes or excessive whitespace\n    sanitized = sanitized.replace(/\\0/g, \"\");\n    sanitized = sanitized.replace(/\\s{10,}/g, \" \"); // Replace excessive whitespace\n    // Check for encoded attacks\n    const encodedPatterns = [\n        /%3c/gi,\n        /%3e/gi,\n        /%22/gi,\n        /%27/gi,\n        /%28/gi,\n        /%29/gi,\n        /%3b/gi\n    ];\n    let hadEncodedAttack = false;\n    encodedPatterns.forEach((pattern)=>{\n        if (pattern.test(sanitized)) {\n            hadEncodedAttack = true;\n        }\n    });\n    if (hadEncodedAttack) {\n        errors.push(`${fieldName} contains URL-encoded potentially dangerous content`);\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: errors.length === 0 ? sanitized : undefined\n    };\n};\n// Additional sanitization for HTML content (if needed)\nconst sanitizeHtmlContent = (input)=>{\n    if (!input) return \"\";\n    // Basic HTML entity encoding for dangerous characters\n    const htmlEntities = {\n        \"&\": \"&amp;\",\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\",\n        '\"': \"&quot;\",\n        \"'\": \"&#x27;\",\n        \"/\": \"&#x2F;\"\n    };\n    return input.replace(/[&<>\"'/]/g, (char)=>htmlEntities[char] || char);\n};\n// Session ID validation\nconst validateSessionId = (sessionId)=>{\n    const errors = [];\n    if (!sessionId || typeof sessionId !== \"string\") {\n        return {\n            isValid: false,\n            errors: [\n                \"Session ID is required\"\n            ]\n        };\n    }\n    // Check format (UUID v4 format)\n    const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    if (!uuidPattern.test(sessionId)) {\n        errors.push(\"Invalid session ID format\");\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: sessionId\n    };\n};\n// Language validation\nconst validateLanguage = (language)=>{\n    const supportedLanguages = [\n        \"ja\",\n        \"en\",\n        \"zh\",\n        \"ko\"\n    ];\n    const errors = [];\n    if (!language || typeof language !== \"string\") {\n        return {\n            isValid: false,\n            errors: [\n                \"Language is required\"\n            ]\n        };\n    }\n    const sanitized = language.toLowerCase().trim();\n    if (!supportedLanguages.includes(sanitized)) {\n        errors.push(`Unsupported language: ${language}. Supported languages: ${supportedLanguages.join(\", \")}`);\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: errors.length === 0 ? sanitized : undefined\n    };\n};\n// Audio file validation\nconst validateAudioFile = (file)=>{\n    const errors = [];\n    // Check file size\n    if (file.size > _config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.validation.maxFileSize) {\n        errors.push(`File size exceeds maximum limit of ${_config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.validation.maxFileSize / 1024 / 1024}MB`);\n    }\n    // Check MIME type\n    if (!_config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.validation.allowedAudioTypes.includes(file.type)) {\n        errors.push(`Unsupported audio format: ${file.type}. Allowed formats: ${_config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.validation.allowedAudioTypes.join(\", \")}`);\n    }\n    // Validate base64 data\n    try {\n        const base64Pattern = /^[A-Za-z0-9+/]*={0,2}$/;\n        if (!base64Pattern.test(file.data)) {\n            errors.push(\"Invalid audio data format\");\n        }\n    } catch  {\n        errors.push(\"Invalid audio data\");\n    }\n    return {\n        isValid: errors.length === 0,\n        errors\n    };\n};\n// Request body validation for chat endpoint\nconst validateChatRequest = (body)=>{\n    const errors = [];\n    if (!body || typeof body !== \"object\") {\n        return {\n            isValid: false,\n            errors: [\n                \"Request body is required\"\n            ]\n        };\n    }\n    // Validate message\n    const messageValidation = validateAndSanitizeText(body.message, \"message\");\n    if (!messageValidation.isValid) {\n        errors.push(...messageValidation.errors);\n    }\n    // Validate session ID\n    const sessionValidation = validateSessionId(body.sessionId);\n    if (!sessionValidation.isValid) {\n        errors.push(...sessionValidation.errors);\n    }\n    // Validate language (optional)\n    let languageValidation;\n    if (body.language) {\n        languageValidation = validateLanguage(body.language);\n        if (!languageValidation.isValid) {\n            errors.push(...languageValidation.errors);\n        }\n    }\n    // Validate boolean fields\n    if (body.useVoice !== undefined && typeof body.useVoice !== \"boolean\") {\n        errors.push(\"useVoice must be a boolean\");\n    }\n    // Validate inputType (optional)\n    if (body.inputType !== undefined && ![\n        \"text\",\n        \"voice\"\n    ].includes(body.inputType)) {\n        errors.push('inputType must be either \"text\" or \"voice\"');\n    }\n    // Validate location (optional)\n    let locationValidation;\n    if (body.location) {\n        locationValidation = validateLocation(body.location);\n        if (!locationValidation.isValid) {\n            errors.push(...locationValidation.errors);\n        }\n    }\n    // Validate requestedScope (optional)\n    let scopeValidation;\n    if (body.requestedScope) {\n        scopeValidation = validateRequestedScope(body.requestedScope);\n        if (!scopeValidation.isValid) {\n            errors.push(...scopeValidation.errors);\n        }\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: errors.length === 0 && messageValidation.sanitized && sessionValidation.sanitized ? {\n            message: messageValidation.sanitized,\n            sessionId: sessionValidation.sanitized,\n            language: body.language ? languageValidation?.sanitized || \"ja\" : \"ja\",\n            useVoice: Boolean(body.useVoice),\n            inputType: body.inputType || \"text\",\n            location: locationValidation?.sanitized,\n            requestedScope: scopeValidation?.sanitized\n        } : undefined\n    };\n};\n// Rate limiting check (simple in-memory implementation)\nconst rateLimitStore = new Map();\nconst checkRateLimit = (identifier)=>{\n    const now = Date.now();\n    const windowMs = _config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.rateLimiting.windowMs;\n    const maxRequests = _config__WEBPACK_IMPORTED_MODULE_0__.securityConfig.rateLimiting.maxRequests;\n    const current = rateLimitStore.get(identifier);\n    if (!current || now > current.resetTime) {\n        // First request or window expired\n        rateLimitStore.set(identifier, {\n            count: 1,\n            resetTime: now + windowMs\n        });\n        return {\n            allowed: true\n        };\n    }\n    if (current.count >= maxRequests) {\n        return {\n            allowed: false,\n            retryAfter: Math.ceil((current.resetTime - now) / 1000)\n        };\n    }\n    // Increment counter\n    current.count++;\n    rateLimitStore.set(identifier, current);\n    return {\n        allowed: true\n    };\n};\n// Location validation\nconst validateLocation = (location)=>{\n    const errors = [];\n    if (!location || typeof location !== \"object\") {\n        return {\n            isValid: false,\n            errors: [\n                \"Location must be an object\"\n            ]\n        };\n    }\n    // Validate latitude\n    if (typeof location.latitude !== \"number\") {\n        errors.push(\"Latitude must be a number\");\n    } else if (location.latitude < -90 || location.latitude > 90) {\n        errors.push(\"Latitude must be between -90 and 90 degrees\");\n    }\n    // Validate longitude\n    if (typeof location.longitude !== \"number\") {\n        errors.push(\"Longitude must be a number\");\n    } else if (location.longitude < -180 || location.longitude > 180) {\n        errors.push(\"Longitude must be between -180 and 180 degrees\");\n    }\n    // Validate accuracy (optional)\n    if (location.accuracy !== undefined && (typeof location.accuracy !== \"number\" || location.accuracy < 0)) {\n        errors.push(\"Accuracy must be a positive number\");\n    }\n    // Validate timestamp (optional)\n    if (location.timestamp !== undefined) {\n        try {\n            new Date(location.timestamp);\n        } catch  {\n            errors.push(\"Invalid timestamp format\");\n        }\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: errors.length === 0 ? {\n            latitude: location.latitude,\n            longitude: location.longitude,\n            accuracy: location.accuracy,\n            timestamp: location.timestamp ? new Date(location.timestamp) : undefined\n        } : undefined\n    };\n};\n// Requested scope validation\nconst validateRequestedScope = (scope)=>{\n    const errors = [];\n    if (!scope || typeof scope !== \"object\") {\n        return {\n            isValid: true,\n            errors: []\n        }; // Optional field\n    }\n    const validTimeRanges = [\n        \"today\",\n        \"this_week\",\n        \"this_month\",\n        \"next_month\",\n        \"any\"\n    ];\n    const validLocationRanges = [\n        \"nearby\",\n        \"walking_distance\",\n        \"cycling_distance\",\n        \"city_wide\",\n        \"any\"\n    ];\n    // Validate timeRange (optional)\n    if (scope.timeRange !== undefined && !validTimeRanges.includes(scope.timeRange)) {\n        errors.push(`Invalid timeRange. Must be one of: ${validTimeRanges.join(\", \")}`);\n    }\n    // Validate locationRange (optional)\n    if (scope.locationRange !== undefined && !validLocationRanges.includes(scope.locationRange)) {\n        errors.push(`Invalid locationRange. Must be one of: ${validLocationRanges.join(\", \")}`);\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        sanitized: errors.length === 0 ? {\n            timeRange: scope.timeRange,\n            locationRange: scope.locationRange\n        } : undefined\n    };\n};\n// Cleanup expired rate limit entries (should be called periodically)\nconst cleanupRateLimit = ()=>{\n    const now = Date.now();\n    for (const [key, value] of rateLimitStore.entries()){\n        if (now > value.resetTime) {\n            rateLimitStore.delete(key);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/validation.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/uuid","vendor-chunks/@redis","vendor-chunks/generic-pool","vendor-chunks/yallist","vendor-chunks/cluster-key-slot","vendor-chunks/redis"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsession%2Froute&page=%2Fapi%2Fsession%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsession%2Froute.ts&appDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fnegishi%2FDocuments%2Fdevelop%2FHackathon%2FTokyoOpenDataHackathon&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();